#+Description: This is file is generated from my init.org; do not edit.

* Default                                           :global:

** my_org_insert_link: cleverly insert a link copied to clipboard
 [[${1:`(clipboard-yank)`}][$2]] $0

** begin: produce an org-mode block
#+begin_${1:environment$(let*
    ((block '("src" "example" "quote" "verse" "center" "latex" "html" "ascii"))
     (langs '("c" "emacs-lisp" "lisp" "latex" "python" "sh" "haskell" "plantuml" "prolog"))
     (type (yas-choose-value block)))
     (concat type (when (equal type "src") (concat " " (yas-choose-value langs)))))}
 $0
#+end_${1:$(car (split-string yas-text))}

** s_org: src for org
#+begin_src org
$0
#+end_src

** s_agda2: src for agda2
#+begin_src agda2
$0
#+end_src

** s_any: src for any
#+begin_src any
$0
#+end_src

** s_emacs-lisp: src for emacs-lisp
#+begin_src emacs-lisp
$0
#+end_src

** is_org: inline source for org
src_org[:exports code]{$1} $0
** is_agda2: inline source for agda2
src_agda2[:exports code]{$1} $0
** is_any: inline source for any
src_any[:exports code]{$1} $0
** is_emacs-lisp: inline source for emacs-lisp
src_emacs-lisp[:exports code]{$1} $0
** e_org: example for org
#+begin_example org
$0
#+end_example

** e_agda2: example for agda2
#+begin_example agda2
$0
#+end_example

** e_any: example for any
#+begin_example any
$0
#+end_example

** e_emacs-lisp: example for emacs-lisp
#+begin_example emacs-lisp
$0
#+end_example

** q_quote: quote
#+begin_quote 
$0
#+end_quote

** v_verse: verse
#+begin_verse 
$0
#+end_verse

** c_center: center
#+begin_center 
$0
#+end_center

** ex_export: export
#+begin_export 
$0
#+end_export

** p_parallel: parallel
#+begin_parallel 
$0
#+columnbreak:

#+end_parallel

** d_details: details
#+begin_details ${1:title}
$0
#+end_details

** ed_edcomm: edcomm
#+begin_edcomm ${1:editor}
$0
#+end_edcomm

** doc_documentation: documentation
#+begin_documentation ${1: mandatory entry name}
$0
#+end_documentation

** def_latex-definitions: latex-definitions
#+begin_latex-definitions 
$0
#+end_latex-definitions

** ll_make_a_link: insert a link template
${1:`(let* ((τ (read-string "Link type: "))
            (δ (read-string "Link Description: "))
            (⊤ (if (s-contains? ":" τ) τ (s-concat τ ":"))))
       (format "[[%s][%s]]" ⊤ δ))`} $0

** os-command: ⌘ Operating System Keyboard Symbol
⌘
** os_option: ⌥ Operating System Keyboard Symbol
⌥
** os_alt: ⌥ Operating System Keyboard Symbol
⌥
** os_control: ⌃ Operating System Keyboard Symbol
⌃
** os_shift: ⇧ Operating System Keyboard Symbol
⇧
** os_backspace: ⌫ Operating System Keyboard Symbol
⌫
** os_delete: ⌫ Operating System Keyboard Symbol
⌫
** os_delete_forward: ⌦ Operating System Keyboard Symbol
⌦
** os_enter: ⏎ Operating System Keyboard Symbol
⏎
** os_return: ⏎ Operating System Keyboard Symbol
⏎
** os_escape: ⎋ Operating System Keyboard Symbol
⎋
** os_tab_right: ⇥ Operating System Keyboard Symbol
⇥
** os_tab_left: ⇤ Operating System Keyboard Symbol
⇤
** os_caps_lock: ⇪ Operating System Keyboard Symbol
⇪
** os_eject: ⏏ Operating System Keyboard Symbol
⏏

** ll_console_log: Log some JS variables

console.log("%c ******* LOOK HERE *******", "color: green; font-weight: bold;");
console.log({ ${1:List the variables here whose values you want to log} });
$0

** uuidgen: Insert the result of “uuidgen” and copy it to the clipboard

${1:`(-let [it (shell-command-to-string "uuidgen | tr '[:upper:]' '[:lower:]' |
pbcopy; pbpaste")] (message "Copied to clipboard, uuid: %s" it) it)`}

** loop:  Elisp's for each loop
(dolist (${1:var} ${2:list-form})
        ${3:body})

** defun: Lisp functions
(cl-defun ${1:fun-name} (${2:arguments})
  "${3:documentation}"
  $0)

** cond: Elisp conditionals
(cond (${1:scenario₁} ${2:response₁})
      (${3:scenario₂} ${4:response₂}))

** fun: Function declaration with type signature

${1:fun-name} : ${2:arguments}
$1 ${3:args} = ?$0

** eqn_begin: Start a ≡-Reasoning block in Agda

begin
  ${1:complicated-side}
$0≡⟨ ${3:reason-for-the-equality} ⟩
 ${2:simpler-side}
∎

** eqn_step: Insert a step in a ≡-Reasoning block in Agda
≡⟨ ${2:reason-for-the-equality} ⟩
  ${1:new-expression}
$0

** reply_opinionated_pantomath: What to say to, e.g., an arrogant academic

Your certainty inspires me to continuing exploring, and I may arrive at your
point of view, but I'm going to need more evidence first.

** reply_em_dashes: Why use em dashes for parenthetical remarks?

According to the “Canadian Style Guide” (CSG):

   The em is an expansive, attention-seeking dash. It supplies much stronger
   emphasis than the comma, colon or semicolon it often replaces. Positioned
   around interrupting elements, em dashes have the opposite effect of
   parentheses—em dashes emphasize; parentheses minimize.

From “A Logical Approach to Discrete Math” (LADM), page ix:

   We place a space on one side of an em dash ---here are examples--- in
   order to help the reader determine whether the em dash begins or ends
   a parenthetical remark. In effect, we are creating two symbols from one.
   In longer sentences---and we do write long sentences from time to time---the
   lack of space can make it difficult to see the sentence structure---especially
   if the em dash is used too often in one sentence. Parenthetical remarks
   delimited by parentheses (like this one) have a space on one side of each
   parenthesis, so why not parenthetical remarks delimited by em dashes?

Interestingly, according to the CSG, there should be no space before or after an
em dash.  As such, it appears that the spacing is mostly stylistic; e.g., some
people surround em-s with spaces on both sides.  In particular, when em-s are
unmatched, I make no use of additional space ---indeed this form of one-sided
parentheses without a space is how LADM is written, as can be seen at the top of
page 3.

** remark: top-level literate comment

{{{remark(${1:thoughts})}}} $0

** my_name: User's name
`user-full-name`

** my_email: User's email address
`user-mail-address`

** my_github: User's Github repoistory link
https://github.com/alhassy/

** my_emacsdrepo: User's version controlled Emacs init file
https://github.com/alhassy/emacs.d

** my_blog: User's blog website
https://alhassy.github.io/

** my_webpage: User's organisation website
http://www.cas.mcmaster.ca/~alhassm/

** my_twitter: User's Twitter profile
https://twitter.com/musa314

** my_masters_thesis
A Mechanisation of Internal Galois Connections In Order Theory Formalised Without Meets
https://macsphere.mcmaster.ca/bitstream/11375/17276/2/thesis.pdf

** journal_guided: Introspection & Growth
I'm writing from ${1:location}.

Gut answer, today I feel ${2:scale}/10.
⇒ ${3:Few words or paragraphs to explain what's on your mind.}

${4: All things which cause us to groan or recoil are part of the tax of
life. These things you should never hope or seek to escape.  Life is a battle,
and to live is to fight.

⟨ Press TAB once you've read this mantra. ⟩
$(when yas-moving-away-p "")
}
`(progn
  (eww "https://www.dailyinspirationalquotes.in/")
  (sit-for 2) (when nil let eww load)
  (read-only-mode -1)
  (goto-line 52)
  (kill-line)
  (kill-buffer)
  (yank))`
${7:
Self Beliefs:
+ I am working on a healthier lifestyle, including a low-carb diet.

  - I’m also investing in a healthy, long-lasting relationship.

  ➩ These are what I want and are important to me. ⇦

+ I will not use any substances to avoid real issues in my life. I must own them.

+ Everything I’m searching for is already inside of me.

+ Progress is more important than perfection.

⟨ Press TAB once you've read these beliefs. ⟩
$(when yas-moving-away-p "")
}

*Three things I'm grateful for:*
1. ${8:??? … e.g., old relationship, something great yesterday, an opportunity I
   have today, something simple near me within sight}
2. ${9:??? … e.g., old relationship, something great yesterday, an opportunity I
   have today, something simple near me within sight}
3. ${10:??? … e.g., old relationship, something great yesterday, an opportunity I
   have today, something simple near me within sight}

*Three things that would make today great:*
1. ${11:???}
2. ${12:???}
3. ${13:???}

*What one thing is top of mind today?*
${14:???}

*What’s one opportunity I want to go after?*
${15:???}

*What’s one thing I’m really proud of OR I’m amazed and in awe of?*
${16:???}

$0
** contacts: Get the email of one of my personal contacts

${1:`(and (or (featurep 'my/contacts) (org-babel-load-file "~/Dropbox/contacts.org"))
(yas-choose-value (--map (format "%s <%s>" (getf it :name) (getf it :email))
my/contacts)))`} $0
