# ÿßŸÑÿ≥ŸëŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ ‚îÄ‚ÄúHello, and welcome‚Äù in Arabic (ÿßŸÑÿπÿ±ÿ®ŸäŸëÿ©)
#
# Over 13k line org file, with over 300 source code blocks.

#+title: A Life Configuring Emacs
#+author: Musa Al-hassy
#+email: alhassy@gmail.com
#+date: 2018-07-25
#+description: My Emacs Initialisation File, Written in Org-mode.
#+startup: indent lognoteclock-out
#+options: html-postamble:nil toc:2 d:nil num:t broken-links:auto
# +property: header-args :tangle deferred-init.el :comments link :results none
#+property: header-args :tangle init.el :comments link :results none
#+export_file_name: index

* Abstract                                                           :ignore:
:PROPERTIES:
:CUSTOM_ID: Abstract
:END:

#+begin_center

badge:A_Life|Configuring_Emacs|success|https://github.com/alhassy/emacs.d|gnu-emacs

badge:A_Life_Configuring|Emacs|success|https://alhassy.github.io/emacs.d/|gnu

badge:Currently_Reorganising|Not_Polished|yellow
#+end_center

#+html: <p align="center">
#+begin_center text
*Abstract*
#+end_center
#+html: </p>

[[doc:Hello][Hello!]] Herein I document the configurations I utilise with [[https://gnu.org/s/emacs][Emacs]].
# After cloning the file, many packages are automatically installed; usually with
# little or no trouble.

As a [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][literate program]] file with [[http://orgmode.org/][Org-mode]], I am ensured optimal navigation
through my ever growing configuration files, ease of usability and reference
for peers, and, most importantly, better maintainability for myself!

Dear reader, when encountering a foregin command ~X~ I encourage you to execute
~(describe-symbol 'X)~, or press kbd:C-h_o with the cursor on ~X~.  An elementary
Elisp Cheat Sheet can be found at [[badge:Elisp|CheatSheet|success|https://alhassy.github.io/ElispCheatSheet/CheatSheet.pdf|Gnu-Emacs][Elisp cheat sheet]] and
badge:Lifemacs|CheatSheet|informational|https://alhassy.github.io/emacs.d/CheatSheet.pdf|Gnu-Emacs
is a 2-page 3-column PDF of the bindings in /this/ configuration.
+ kbd:C-h_e ‚áí *What'd /Emacs/ do?*
+ kbd:C-h_o ‚áí *What's this thing?*
+ kbd:C-h_l ‚áí *What'd /I/ do?*
+ [[kbd:C-h_?]] ‚áí *What're the help topics?* ---gives possible completions to ‚ÄúC-h ‚ãØ‚Äù.
+ ‚ÄúI accidentally hit a key, which one and what did it do!?‚Äù ‚áí kbd:C-h_e and kbd:C-h_l,
  then use kbd:C-h_o to get more details on the action.
  ;-)

Finally, kbd:C-h_d asks nicely what ‚Äòd‚Äôocumentation you're interested in.
After providing a few keywords, the =apropos= tool yields possible functions
and variables that may accomplish my goal.

#+begin_center
badge:Emacs|27|green|https://www.gnu.org/software/emacs|gnu-emacs
badge:Org|9.4|blue|https://orgmode.org|gnu

[[badge:license|GNU_3|informational|https://www.gnu.org/licenses/gpl-3.0.en.html|read-the-docs][gnu 3 license badge]]
tweet:https://github.com/alhassy/org-special-block-extras

badge:author|musa_al-hassy|purple|https://alhassy.github.io/|nintendo-3ds
badge:|buy_me_a¬†coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee

# badge:Hire|me|success|https://alhassy.github.io/about
#+end_center

This article is about /how I like/ to do things
---/I'm not insisting others should/ do things this way.

#+begin_box
/Always remember that to argue, and win, is to break down the reality of the
person you are arguing against. It is painful to lose your reality, so be kind,/
/even if you are right./ - Haruki Murakami

/Life is too short to not read the very best book you know of right now./ - Patrick Collison

/Inspiration is for amateurs. The rest of us just show up and get to work./ - Chuck Close
#+end_box

* Meta-setup                                                         :ignore:
:PROPERTIES:
:CUSTOM_ID: Meta-setup
:END:
** Blog/HTML Setup                                                   :ignore:
:PROPERTIES:
:CUSTOM_ID: Blog-HTML-Setup
:END:
# ‚îÄAlBasmala keywords‚îÄ
# DRAFT: yes
#+SOURCEFILE: https://github.com/alhassy/emacs.d/blob/master/init.org
#+IMAGE: ../assets/img/emacs_logo.png
#+CATEGORIES: Emacs Lisp

#+html_head: <link href="https://alhassy.github.io/org-notes-style.css" rel="stylesheet" type="text/css" />
#+html_head: <link href="https://alhassy.github.io/floating-toc.css" rel="stylesheet" type="text/css" />
#+html_head: <link href="https://alhassy.github.io/blog-banner.css" rel="stylesheet" type="text/css" />
# The last one has the styling for lists.

** Github Actions                                                  :noexport:
:PROPERTIES:
:CUSTOM_ID: Github-Actions
:END:

The following creates the ‚ÄúGithub Actions Workflow‚Äù file;
this way, Github will run your tests every time you commit ^_^

Below I'm using =main= as the /name/ of the main branch; if you use =master= as the
name, then change that or otherwise the tests will not trigger automatically
after push!

#+begin_src shell :tangle .github/workflows/main.yml :mkdirp yes
# This workflow will do a clean install of dependencies and run tests
# For more information see: https://help.github.com/actions/language-and-framework-guides/

name: Lifemacs Loads Successfully

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Emacs
        uses: purcell/setup-emacs@v3.0
        with:
          # The version of Emacs to install, e.g. "24.3", or "snapshot" for a recent development version.
          version: 27.1 # optional

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.

      - name: where am I and what is here
        run: |
          pwd
          ls

      - name: Attempting startup & basic test ...
        run: time emacs -nw --batch --eval='(let
                                (
                                 (user-emacs-directory default-directory))
                              (message "Default directory" )
                              (message default-directory)
                              (setq url-show-status nil)
                              (package-initialize)
                              (load-file "init.el")
                              (message "\n ü§§ Startup Successful! ü§©")
                              (when nil "It seems this results in a non-existent Agenda issue when run by GHA; ignoring for now."
                                  (message "\nCheck we can do something basic, like getting pretty HTML from an Org file\n")
                                  (find-file "init.org")
                                  (org-html-export-to-html)
                                  (message "\n ü§§ HTML file generated successfully! ü§©\n")))'
#+end_src

TODO: Build HTML export as a minimal test that things work as expected.

                              (find-file "init.org")
                              (org-html-export-to-html)
                              (message "\n ü§§ HTML Export Successful! ü§©")

(unless noninteractive ...) ;; Use this to omit stuff from the Github Actions test

** Personal instructions for a new machine                           :ignore:
:PROPERTIES:
:CUSTOM_ID: Personal-instructions-for-a-new-machine
:END:
#+begin_details "‚ÄúPersonal instructions for a new machine‚Äù"
These steps must be performed at the terminal /since/ they are
required to get /my/ Emacs, which then installs everything else /when
it's first opened/.

1. Install a package manager: https://brew.sh/ :

  #+begin_src shell :tangle no
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  #+end_src

   Also: Change to the conventional scrolling direction:
   /If I pull my scroll down, I want to go down./
   - Apple menu ‚Üí System Preferences ‚Üí Mouse ‚Üí Tick the scroll direction option.

2. [[https://www.emacswiki.org/emacs/EmacsForMacOS#h5o-14][Use brew to get Emacs]]:
   #    #+begin_src shell :tangle no
   # brew install --cask emacs
   #    #+end_src
   #
   #+begin_src shell :tangle no
# https://github.com/d12frosted/homebrew-emacs-plus
$ brew tap d12frosted/emacs-plus
$ brew reinstall emacs-plus@30  --with-xwidgets --with-imagemagick --with-dbus --with-debug --with-no-frame-refocus --with-native-comp --with-savchenkovaleriy-big-sur-3d-icon --with-poll
#+end_src
  # --with-EmacsIcon3-icon
  # --with-spacemacs-icon

   # $ /usr/local/Cellar/emacs-plus@29/29.0.50/bin/emacs-29.0.50 &
   #
   # In ~/.bashrc, or ~/.zshrc, put the following at the end:
   # alias emacs="/opt/homebrew/Cellar/emacs-plus@29/29.0.90/bin/emacs-29.0.90"
   #

   #
   #    If that fails, try this to [[https://github.com/daviderestivo/homebrew-emacs-head#gnu-emacs-27-bottle-or-head][install Emacs:]]
   #    #+BEGIN_SRC shell :tangle no
   # brew tap daviderestivo/emacs-head
   # brew install emacs-head
   # #+END_SRC
   #
3. [[https://emacs.stackexchange.com/a/50405/10352][Then]] ¬†¬† [[https://www.emacswiki.org/emacs/EmacsForMacOS#h5o-14][make]] ¬†¬†the command ~emacs~ available via the terminal ---required if
   doing any melpa development.
   #+begin_src shell :tangle no
ln -s /opt/homebrew/opt/emacs-plus@30/Emacs.app /Applications
   #+end_src
   # sudo ln -s /usr/local/opt/emacs-head@27/Emacs.app/Contents/MacOS/Emacs /usr/local/bin/emacs

4. Why ~--with-imagemagick~?

    ;; This lets us change the size of images when shown in Org-mode.
    #+begin_src emacs-lisp
    (setq org-image-actual-width nil)
    #+end_src

    #+begin_org-demo
    #+ATTR_HTML: :alt musa in a pink shirt :title The author of this article :align center
    #+ATTR_HTML: :width 50% :height 50%
    [[~/blog/images/musa_pink.jpg]]
    #+end_org-demo

    Note that only the =:width= option is used for in-Org image preview.

5. Why =--with-xwidgets=?

    We get a full-fledged Internet browser /within/ Emacs.
    #+begin_src emacs-lisp
    ;; Clicking on a URL, or running M-x browse-url, should open the URL *within* Emacs.
    (setq browse-url-browser-function #'xwidget-webkit-browse-url)

    ;; (use-package xwwp) ;; Enhance the Emacs xwidget-webkit browser
    #+end_src

    Related: doc:goto-address-mode is useful whenever you have a buffer full of "http..." URLs (e.g.., a JSON file):
    It makes them into clickable buttons or via =C-c RET=.

    #+begin_details "How about EAF or nyxt?"
    An alternative to xwidget-webkit is EAF, sadly this does not work well with MacOS.

    EAF essentially makes Emacs a window manager that runs other GUI apps ---as such, EAF buffers are not classic Emacs
    buffers (and so your favourite text commands are useless).

    There is also:
    | nyxt ¬†‚âÖ¬† the web running common lisp instead of JS ¬†‚âÖ¬† an Emacs backed-by common lisp |
    #+end_details

    #+begin_details "Tell me more about xwidget-webkit"
    I‚Äôve found that the only two applications I regularly have open are Emacs and a browser ---and Emacs has a modern
    browser, so might as well use that in Emacs.
    - Downsides of Emacs as a browser: Some webpages, such as Slack, try to be an editor and so I'm using a Slack editor
      insider a web browser inside an text editor (Emacs). As such, sometimes the lines between editor and browser need to
      be  explicitly demarcated; e.g., via doc:xwidget-webkit-edit-mode.
    - *‚Äúxwidget ‚âà eXternal widget‚Äù* lets us embed GTK widgets inside an Emacs window; e.g., we can insert fancy buttons via
      doc:xwidget-insert, and a browser using doc:xwidget-webkit-browse-url.
    - For history and info on xwidget, see [[https://github.com/jave/xwidget-emacs][the original patch]];
      See also: https://webkitgtk.org/
      #+end_details

6. Install git: =brew install git=

7. Get my Emacs setup: =rm -rf ~/.emacs.d; git clone
   https://github.com/alhassy/emacs.d.git ~/.emacs.d=

   Open Emacs and watch download and set up many other things ... ^_^

   *This may take ~15 minutes ---we install a massive LaTeX setup.*

We get: Spell checker, dictionary, LaTeX + pygements, Dropbox, AG (for fast system-wide searching
of a string with doc:helm-do-grep-ag, useful for finding definitions),
Amethyst window manager.

Amethyst requires some more setup: Open its preferences, then...
    - Then select: =Mouse: Focus follows mouse=.
    - Also: =Shortcuts=, then disable ‚Äòincrease/decrease main pane count‚Äô bindings
      since they override the beloved Emacs =M-<,>= keys.


For convenience, on a Mac, add the home (=~/=) directory to the default file
navigator: Finder ‚Üí Preferences ‚Üí Sidebar, then select home üè†.

If you notice any ‚Äúfile system access‚Äù concerns, give Emacs permissions to read
your files: General Settings ‚Üí Security & Privacy ‚Üí Full Disk Access ‚Üí ~‚åò-M-g~ (to
search) then enter =/usr/bin/ruby= ---Emacs is launched via a Ruby script in
MacOS.

--------------------------------------------------------------------------------

/See the Prose/Unicode section, we need to manually install the Symbol font for subscripts./

#+end_details
* Why Emacs?
:PROPERTIES:
:CUSTOM_ID: Why-Emacs
:header-args: :tangle init.el
:END:

A raw code file is difficult to maintain, especially for a /large/ system such as
Emacs. Instead, we're going with a ‚Äòliterate programming‚Äô approach: The
intialisation configuration is presented in an essay format, along with headings
and subheadings, intended for consumption by humans such as myself, that,
incidentally, can be ‚Äòtangled‚Äô into a raw code file that is comprehensible by a
machine. We achieve this goal using [[#Life-within-Org-mode][org-mode]] ---which is /Emacs' killer app/.

** Mini-tutorial on Org-mode                                         :ignore:
:PROPERTIES:
:CUSTOM_ID: Mini-tutorial-on-Org-mode
:header-args: :tangle no
:END:

# To include this mini-tutorial elsewhere:
#    #+include: ~/.emacs.d/init.org::#Mini-tutorial-on-Org-mode

#+begin_details Super Simple Intro to Emacs‚Äô Org-mode
link-here:Super-Simple-Intro-to-Emacs-Org-mode
Emacs‚Äô Org-mode is an outliner, a rich markup language, spreadsheet tool,
literate programming system, and so much more. It is an impressive reason to
use Emacs (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

# badge:Emacs|27|green|https://www.gnu.org/software/emacs|gnu-emacs
# badge:Org|9.4|blue|https://orgmode.org|gnu

Org-mode syntax is very /natural/; e.g., the following is Org-mode!
( [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][Org Mode Is One of the Most Reasonable Markup Languages to Use for Text]] )

#+begin_src org :noeval
+ Numbered and bulleted lists are as expected.
  - Do the things:
    1.  This first
    2.  This second
    44. [@44] This forty-fourth
  - =[@ùìÉ]= at the beginning of an iterm forces
    list numbering to start at ùìÉ
  - =[ ]= or =[X]= at the beginning for checkbox lists
  - Use =Alt ‚Üë, ‚Üì= to move items up and down lists;
    renumbering happens automatically.

+ Definitions lists:
   ~- term :: def~
+ Use a comment, such as =# separator=, between two lists
  to communicate that these are two lists that /happen/ to be
  one after the other. Or use any /non-indented/ text to split
  a list into two.

,* My top heading, section
  words
,** Child heading, subsection
  more words
,*** Grandchild heading, subsubsection
    even more!
#+END_SRC


*Export* In Emacs, press kbd:C-c_C-e_h_o to obtain an HTML webpage ---/like this
one!/--- of the Org-mode markup; use kbd:C-c_C-e_l_o to obtain a PDF rendition.

You can try Org-mode notation and see how it renders live at:
http://mooz.github.io/org-js/

--------------------------------------------------------------------------------

You make a heading by writing =* heading= at the start of a line, then you can
kbd:TAB to fold/unfold its contents. A table of contents, figures, tables can be
requested as follows:
#+BEGIN_SRC org
# figures not implemented in the HTML backend
# The ùìÉ is optional and denotes headline depth
,#+toc: headlines ùìÉ
,#+toc: figures
,#+toc: tables
#+END_SRC

--------------------------------------------------------------------------------

+ *Markup* elements can be nested.

  | Syntax                             | Result           |
  |------------------------------------+------------------|
  | ~/Emphasise/~, italics               | /Emphasise/        |
  | ~*Strong*~, bold                     | *Strong*           |
  | ~*/very strongly/*~, bold italics    | */very strongly/*  |
  | ~=verbatim=~, monospaced typewriter  | =verbatim=         |
  | ~+deleted+~                          | +deleted+          |
  | ~_inserted_~                         | _inserted_         |
  | ~super^{script}ed~                   | super^{script}ed |
  | ~sub_{scripted}ed~                   | sub_{scripted}ed |

  * Markup can span across multiple lines, by default no more than 2.
  * In general, markup cannot be ‚Äòin the middle‚Äô of a word.
+ New lines demarcate paragraphs
+ Use =\\= to force line breaks without starting a new paragraph
+ Use /at least/ 5 dashes, =-----=, to form a horizontal rule

badge:org-special-block-extras|2.0|informational|https://github.com/alhassy/org-special-block-extras|Gnu-Emacs
provides support for numerous other kinds of markup elements, such as ~red:hello~
which becomes ‚Äú red:hello ‚Äù.

--------------------------------------------------------------------------------

*Working with tables*
#+BEGIN_SRC org
#+ATTR_HTML: :width 100%
#+name: my-tbl
#+caption: Example table
| Who? | What? |
|------+-------|
| me   | Emacs |
| you  | Org   |
#+END_SRC

Note the horizontal rule makes a header row and is formed by typing [[kbd:doit][| -]] then
pressing kbd:TAB. You can kbd:TAB between cells.
+ You can make an empty table with ~C-c |~, which is just
  doc:org-table-create-or-convert-from-region, then give it row√ócolumn
  dimensions.
+ Any lines with comma-separated-values (CSV) can be turned into an Org table by
   selecting the region and pressing ~C-u C-c |~.
   (Any CSV file can thus be visualised nicely as an Org table).
+ Use ~C-u C-u C-u C-c |~ to make a table from values that are speared by a certain regular expression.

--------------------------------------------------------------------------------

*Working with links*

Link syntax is =[[source url][description]]=; e.g., we can refer to the above
table with =[[my-tbl][woah]]=.
Likewise for images: =file:path-to-image.=

# The HTML has Up/Home on the right now ;-)
# +HTML_LINK_HOME: http://www.google.com
# +HTML_LINK_UP: http://www.bing.com

--------------------------------------------------------------------------------

*Mathematics*

#+BEGIN_org-demo
\[ \sin^2 x + \cos^2 x = \int_\pi^{\pi + 1} 1 dx = {3 \over 3} \]
#+END_org-demo

- Instead of ~\[...\]~, which displays a formula on its own line, centred, use
  ~$...$~ to show a formula inline.
- Captioned equations are numbered and can be referenced via links,
  as shown below.

#+BEGIN_org-demo :source-color green :result-color green
#+name: euler
\begin{equation}
e ^ {i \pi} + 1 = 0
\end{equation}

See equation [[euler]].
#+END_org-demo

--------------------------------------------------------------------------------

*Source code*
#+begin_org-demo :source-color custard :result-color custard
#+begin_src C -n
int tot = 1;                    (ref:start)
for (int i = 0; i != 10; i++)   (ref:loop)
   tot *= i;                    (ref:next)
printf("The factorial of 10 is %d", tot);
#+end_src
#+end_org-demo

The labels =(ref:name)= refer to the lines in the source code and can be
referenced with link syntax: ~[[(name)]]~. Hovering over the link, in the HTML
export, will dynamically highlight the corresponding line of code.  To strip-out
the labels from the displayed block, use ~-r -n~ in the header so it becomes
=#+begin_src C -r -n=, now the references become line numbers.

--------------------------------------------------------------------------------

Another reason to use Org:
If you use =:results raw=, you obtain *dynamic templates* that may use Org-markup:
#+begin_org-demo :source-color brown :result-color brown
#+BEGIN_SRC C :results raw replace
printf("*bold* +%d+ (strikethrough) /slanted/", 12345);
#+END_SRC

‚ôØ+RESULTS:
*bold* +12345+ (strikethrough) /slanted/
#+end_org-demo

The ~#+RESULTS:~ is obtained by pressing kbd:C-c_C-c on the ~src~ block, to execute
it and obtain its result.

Also: Notice that a C program can be run without a =main= ;-)

That is, we can write code /in between/ prose that is intended to be read like an
essay:

# This should be a URL, so that any includes will show the PNG.
# It does work locally too; but just in case...
# [[file:images/literate-programming.png]]
 [[file:https://alhassy.github.io/emacs.d/images/literate-programming.png]]

--------------------------------------------------------------------------------

+ badge:Lifemacs|CheatSheet|informational|https://alhassy.github.io/emacs.d/CheatSheet.pdf|Gnu-Emacs
  ‚áí A brief reference of Emacs keybindings; 2 pages
+ [[badge:Elisp|CheatSheet|success|https://alhassy.github.io/ElispCheatSheet/CheatSheet.pdf|Gnu-Emacs][Elisp cheat sheet]] ‚áí A /compact/ Emacs Lisp Reference; 7 pages

--------------------------------------------------------------------------------

*Single source of truth:* This mini-tutorial can be included into other Org files
by declaring
| ~#+include: ~/.emacs.d/init.org::#Mini-tutorial-on-Org-mode~ |

--------------------------------------------------------------------------------

For more, see https://orgmode.org/features.html.
#+end_details

** Intro to why Emacs                                                :ignore:
:PROPERTIES:
:CUSTOM_ID: Intro-to-why-Emacs
:END:

/Emacs is a flexible platform for developing end-user applications/
---unfortunately it is generally perceived as merely a text editor. Some people
use it specifically for one or two applications.

For example, [[https://www.youtube.com/watch?v=FtieBc3KptU][writers]] use it as an interface for Org-mode and others use it as an
interface for version control with Magit. [[https://orgmode.org/index.html#sec-4][Org]] is an organisation tool that can
be used for typesetting which subsumes LaTeX, generating many different formats
--html, latex, pdf, etc-- from a single source, keeping track of [[https://orgmode.org/worg/org-tutorials/index.html#orgff7b885][schedules]] &
task management, blogging, habit tracking, personal information management tool,
and [[http://orgmode.org/worg/org-contrib/][much more]].  Moreover, its syntax is so [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][natural]] that most people use it
without even knowing!  For me, Org allows me to do literate programming: I can
program and document at the same time, with no need to seperate the two tasks
and with the ability to generate multiple formats and files from a single file.

#+begin_details A list of programs that can be replaced by Emacs
/Pieces of (disparate) software can generally be replaced by (applications
written on the) Emacs (text processing Lisp platform)./

From the table below, of non-editing things you can do with Emacs, it's
reasonable to think of Emacs as an operating system ---and Vim/Evil is one of
its text editors.

# Examples:
|----------------------------------------------+---+--------------------------------------------------------------------|
| Application                                  | ‚âà | Emacs Package                                                      |
|----------------------------------------------+---+--------------------------------------------------------------------|
| Habit Tracker / TODO-list                    |   | Org mode                                                           |
| Agenda / Calendar / Time Tracker             |   | Org mode                                                           |
| Literate Programming (like Jupyter)          |   | Org mode                                                           |
| Blogging Software                            |   | Org mode                                                           |
| Reference Information Platform               |   | Org mode with [[https://orgmode.org/manual/Refile-and-Copy.html][refile]] and my/reference                          |
|----------------------------------------------+---+--------------------------------------------------------------------|
| Word Processing / PDFs / Slidedeck tool      |   | Org mode                                                           |
| Spell checker & dictionary & grammar checker |   | doc:ispell & langtool                                              |
| Reference and citation manager               |   | org-ref                                                            |
| PDF Viewer                                   |   | PDF View mode                                                      |
| Powerful Calculator                          |   | Calc-mode ([[https://hungyi.net/posts/solve-system-of-equations-literate-calc-mode/][Nice article on literate calc mode]])                     |
| Fillable Forms / Data Entry                  |   | [[https://www.gnu.org/software/emacs/manual/html_mono/widget.html][Widgets]]                                                            |
| Ebook Reader                                 |   | [[https://depp.brause.cc/nov.el/][nov.el]] and [[https://github.com/chenyanming/calibredb.el][calibredb.el]]                                            |
|----------------------------------------------+---+--------------------------------------------------------------------|
| Git / Version control                        |   | Magit or doc:vc-mode                                               |
| Shells                                       |   | doc:eshell or doc:shell                                            |
| Terminal emulators                           |   | doc:term, doc:ansi-term, and [[https://github.com/akermu/emacs-libvterm][vterm]]                                 |
| Package Manager                              |   | doc:helm-system-packages                                           |
| File Manager                                 |   | doc:dired                                                          |
| IDE / debugger                               |   | LSP / Dap                                                          |
| Scripting Language                           |   | Emacs Lisp                                                         |
| Web client / server                          |   | [[https://github.com/pashky/restclient.el][Restclient]] / [[https://github.com/skeeto/emacs-web-server][emacs-web-server]]                                      |
|----------------------------------------------+---+--------------------------------------------------------------------|
| [Neo]Vim / Modal text editor                 |   | EVIL mode                                                          |
| RSS Newsreader                               |   | ElFeed                                                             |
| Email                                        |   | Gnus / [[https://gist.github.com/rougier/009e7d13a816d053d8f319b56836e1c9?permalink_comment_id=3738945#gistcomment-3738945][Mu4e]] [very pretty!] / notmuch                               |
| Spredsheet tool                              |   | [[https://orgmode.org/manual/The-Spreadsheet.html][Org Table]] / [[https://www.reddit.com/r/emacs/comments/t8k1cw/simple_emacs_spreadsheet/][Simple Emacs Spreadsheet]] / spreadsheet-mode / csv-mode |
| Automatic file backups                       |   | ‚ü®Built-in‚ü© & backup-walker                                         |
| seemless GPG tool                            |   | ‚ü®Built-in‚ü©                                                         |
| Lisp interpreter                             |   | Anywhere press kbd:C-x_C-e to run a Lisp expression                |
| Documentation viewer                         |   | tldr-mode; kbd:C-h_o / doc:describe-symbol                         |
| Diff / Merge tool                            |   | doc:ediff, doc:diff                                                |
|----------------------------------------------+---+--------------------------------------------------------------------|
| Games                                        |   | doc:tetris, pacman, mario, etc                                     |
| Psychologist                                 |   | doc:doctor                                                         |
| Weather Web Service                          |   | [[https://github.com/bcbcarl/emacs-wttrin][wttrin.el]] or [[https://github.com/aaronbieber/sunshine.el][sunshine.el]]                                           |
| Typing tutor                                 |   | typing-of-emacs                                                    |
| Modern Internet Browser                      |   | doc:xwidget-webkit-browse-url                                      |
| Street map viewer                            |   | [[https://github.com/minad/osm][osm.el - OpenStreetMap viewer for Emacs]]                            |
| everything else                              |   | [[https://github.com/emacs-eaf/emacs-application-framework][EAF]]                                                                |
|----------------------------------------------+---+--------------------------------------------------------------------|

I‚Äôm down to essentially Emacs and Chrome for almost all my work ---I like using Chrome; I like the integration of all things Google.
- The [[https://nyxt.atlas.engineer/][Nyxt browser]]  is an eerily Emacs-like browser ;-)

Were I ‚Äúonly coding‚Äù, then I'd use a popular Integrated Development Environment
that requires minimal setup and Just Works·µÄ·¥π; but I blog, make cheat sheets, run
background services, etc, and so I need an /Integrated Computing Environment:/
Emacs.
#+end_details

#+begin_quote
If you are a professional writer‚Ä¶Emacs outshines all other editing software
in approximately the same way that the noonday sun does the stars.
It is not just bigger and brighter; it simply makes everything else vanish.
‚Äî[[http://project.cyberpunk.ru/lib/in_the_beginning_was_the_command_line/][Neal Stephenson]], /In the beginning was the command line/
#+end_quote

  + Extensible ‚áí IDEs are generally optimised for one framework, unlike Emacs!
      # Emacs is a live interpreter for ELisp.
    - You can /program/ Emacs to /automate/ anything you want.
      # Even arrow keys and characters can be customised, via self-insert-command!
    - Hence, it's an /environment/, not just an editor.
    - ‚áí Unified keybinding across all tools in your environment.

    Users are given a high-level full-featured programming language,
    not just a small configuration language. For the non-programmers,
    there is Custom, a friendly point-and-click customisation interface.
    # with support for a large portion of Common Lisp
  + Self Documented ‚áí Simply [[kbd:M-x info-apropos]] or kbd:C-h_d to search all manuals or
    look up any function provided by Emacs!
  + [[https://en.wikipedia.org/wiki/Emacs#History][Mature]] ‚áí tool with over 40 years of user created features
    - Plugins for nearly everything!
    - No distinction between built-ins and user-defined features! (Lisp!)
    - You can alter others' code [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][without even touching the source]].
      * Advising functions and ‚Äòhooking‚Äô functionality onto events.
  + [[https://www.gnu.org/philosophy/free-sw.html][Free software]] ‚áí It will never die!
    - Emacs is one of the oldest open source projects still under developement.
    # - Unlike other certain editors, Emacs' source is completely open.

Of course Emacs comes with the basic features of a text editor, but it is much more; for example, it comes with a
powerful notion of ‚Äòundo‚Äô: Basic text editors have a single stream of undo, yet in Emacs, we have a /tree/ ---when we undo
and make new edits, we branch off in our editing stream as if our text was being version controlled as we type! We can
even switch between such branches! /That is, while other editors have a single-item clipboard, Emacs has an infinite
clipboard that allows undoing to any historical state./

#+begin_src emacs-lisp :tangle no :noweb-ref undo-tree-setup
;; Allow tree-semantics for undo operations.
(use-package undo-tree
  :defer nil
  :bind ("C-x u" . undo-tree-visualize)
  :config
    ;; Each node in the undo tree should have a timestamp.
    (setq undo-tree-visualizer-timestamps t)

    ;; Show a diff window displaying changes between undo nodes.
    (setq undo-tree-visualizer-diff t)

    ;; Prevent undo tree files from polluting your git repo
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))

;; Always have it on
(global-undo-tree-mode)

;; Execute (undo-tree-visualize) then navigate along the tree to witness
;; changes being made to your file live!
#+end_src
( The above snippet has a ~noweb-ref~: It is presented here in a natural
position, but is only executable once ~use-package~ is setup and so it
is weaved there! We can /present/ code in any order and /tangle/ it to
the order the compilers need it to be! )

/Emacs is an extensible editor: You can make it into the editor of your dreams!/
You can make it suited to your personal needs.
If there's a feature you would like, a behaviour your desire, you can simply code that into Emacs with
a bit of Lisp. As a programming language enthusiast, for me Emacs is my default Lisp interpreter
and a customisable IDE that I use for other programming languages
--such as C, Haskell, Agda, Lisp, and Prolog.
Moreover, being a Lisp interpreter, we can alter the look and feel of Emacs live, without having
to restart it --e.g., press kbd:C-x_C-e after the final parenthesis of ~(scroll-bar-mode 0)~
to run the code that removes the scroll-bar.

#+begin_quote
/I use Emacs every day. I rarely notice it. But when I do, it usually brings me joy./
‚îÄ[[https://so.nwalsh.com/2019/03/01/emacs][Norman Walsh]]
#+end_quote

I have used Emacs as an interface for developing [[https://github.com/alhassy/CheatSheet#cheatsheet-examples][cheat sheets]], for making my
blog, and as an application for ‚Äòinteractively learning C‚Äô. If anything Emacs is
more like an OS than just a text editor --‚Äúliving within Emacs‚Äù provides an
abstraction over whatever operating system my machine has: [[https://www.fugue.co/blog/2015-11-11-guide-to-emacs.html][It's so easy to take
everything with me.]] Moreover, the desire to mould Emacs to my needs has made me
a better programmer: I am now a more literate programmer and, due to Elisp's
documentation-oriented nature, I actually take the time and effort to make
meaningful documentation --even when the project is private and will likely only
be seen by me.

#+begin_quote
/Seeing Emacs as an editor is like seeing a car as a seating-accommodation./ -- [[https://karl-voit.at/2015/10/23/Emacs-is-not-just-an-editor/][Karl Voit]]
#+end_quote
# Comparing Emacs to an editor is like comparing GNU/Linux to a word processor. -- [[https://karl-voit.at/2015/10/23/Emacs-is-not-just-an-editor/][Karl Voit]]

** ¬† /Emacs is a flexible platform for developing end-user applications/
:PROPERTIES:
:CUSTOM_ID: Emacs-is-a-flexible-platform-for-developing-end-user-applications
:END:
Just as a web browser is utilised as a platform for deploying applications,
   or ‚Äòextensions‚Äô, written in JavaScript that act on HTML documents, Emacs is a
   platform for deploying applications written in Emacs Lisp that act on buffers
   of text.  In the same vein, people who say Emacs having Tetris is bloat are
   akin to non-coders who think their browser has bloat since it has a ‚Äúview
   page source‚Äù feature ---which nearly all browsers have, yet it's only useful
   to web developers. Unlike a web browser in which the user must get accustomed
   to its features, Emacs is customised to meet the needs of its user.  (
   Incidentally, Emacs comes bundled with a web browser. )

   #+begin_quote
   In the case of Emacs the boundary between user and programmer is blurred as
   adapting the environment to one‚Äôs needs is [[https://www.gnu.org/software/emacs/emacs-paper.html][already an act of programming with
   a very low barrier to entry.]]    ---[[https://elephly.net/posts/2016-02-14-ilovefs-emacs.html][rekado]]
   #+END_quote

   #+begin_box
   /Don't just get used to your tool, make it get used to you!/
   #+end_box

   Emacs is not just an editor, but a host for running Lisp applications!

   For example, Emacs is shipped as a language-specific IDE to a number of
   communities ---e.g., Oz, Common Lisp, and, most notably, Agda.  Emacs is a
   great IDE for a language ---one just needs to provide a ‚Äòmajor mode‚Äô and will
   then have syntax highlighting, code compleition, jumping to definitions, etc.
   There is no need to make an IDE from scratch.

** The Power of Text Manipulation
:PROPERTIES:
:CUSTOM_ID: The-Power-of-Text-Manipulation
:END:
 Emacs has ways to represent all kinds of information as text.

 E.g., if want to make a regular expression rename of files in a directory,
 there's no need to learn about a batch renaming tool:
 [[kbd:M-x dired ‚ü®RET‚ü© M-x wdired-change-to-wdired-mode]] now simply perform a /usual/
 find-and-replace, then save with the /usual/ kbd:C-x_C-s to effect the changes!

 Likewise for other system utilities and services (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

Moreover, as will be shown below, you can literally use [[https://github.com/zachcurry/emacs-anywhere/#usage][Emacs anywhere]]
for textually input in your operating system --no copy-paste required.

** COMMENT It will change how you think about programming
:PROPERTIES:
:CUSTOM_ID: COMMENT-It-will-change-how-you-think-about-programming
:END:

Emacs is an incremental programming environment: You run snippets of code immediately after writing them ---there is no
formal edit-run cycle.  /The editor is the interpreter./

In my personal experience, Emacs introduced me to Lisp.
- Since Lisp has no concrete syntax, everything is written using abstract syntax trees (and macros introduce concrete,
  domain-specific, syntax), we can see Lisp everywhere and so see Lisp as ‚Äúbuilding material‚Äù for other programming
  languages.
- Likewise, Emacs is building material for a computing environment.  Whereas others might use a mixture of bash scripts
  to accomplish their goals, I can use Lisp to produce applications with radically distinct uses; e.g., using the same
  template application to produce email snippets and code snippets.

  - [ ] Generally speaking, applications provide configurations via checkboxes that can be ticked off (i.e., a JSON file).
    - [ ] What if you want such a feature enabled only under specific settings?
    - [ ] What if you want the value of the checkbox setting to be the result of an arbitrary expression evaluated
      according to a file?

    Emacs provides a full fledged programming language for the purposes of configuration: Press ~C- h k~ then any key
    sequence to find out what (well-documented) code is run, then /advise/ that code with your desired configuration.
    # This is the power of full introspectivity!

    That is, general applications are configured using a /passive/ JSON *files* (i.e., checkboxes) whereas Emacs is
    configured using an /executable/ Lisp *program*.

I have fallen head over heels for Lisp.

** Keyboard Navigation and Alteration
:PROPERTIES:
:CUSTOM_ID: Keyboard-Navigation-and-Alteration
:END:

Suppose you wrote a paragraph of text, and wanted to ‚Äòborder‚Äô it up for
emphasies in hypens. Using the mouse to navigate along with a copy-paste of the
hypens is vastely inferior to the incantation [[kbd:M-{ C-u 80 - RET M-} C-u 80 -
RET]].  If we want to border up the previous ùìÉ-many paragraphs, we simply prefix
kbd:M-{,} above with kbd:C-u_ùìÉ ---a manual approach would have us count ùìÉ and
slowly scroll.  ( Exercise: What incantation of keys ‚Äòunderlines‚Äô the current
line with /only/ the necessary amount of dashes?  ---Solution in the source
file. )
# =C-a C-k C-y RET C-y C-SPC C-a C-M-% . RET - RET !=

‚áí [[https://support.apple.com/en-ca/HT201236][MacOS supports]] many Emacs shortcuts, system-wide, such as kbd:C-a/e, kbd:C-d, kbd:C-k/y,
 kbd:C-o, kbd:C-p/n and even kbd:C-t for transposing two characters.  ‚áê

** Emacs Proverbs as Koan
:PROPERTIES:
:CUSTOM_ID: Emacs-Proverbs-as-Koan
:END:

Below is an extract from William Cobb's ‚ÄúReflections on the Game of Go‚Äù, with
minor personalised adjustements for Emacs. Enjoy!

The Japanese term /satori/ refers to the experience of enlightenment, the
realisation of how things really are that is the primary aim of practice and
meditation. However, the Zen tradition is famous for claiming that one cannot
say what it is that one realises, that is, one cannot articulate the content of
the enlightenment experience. Although it makes everything clear, it is an experience
beyond words. Instead of being given an explanation of how things are, the student of
Zen hears sayings called /koan/, often somewhat paradoxical in character, that come
from those who are enlightened:

+ ‚ÄúThere are no CTRL and META.‚Äù
+ ‚ÄúIf you meet an Emacs you dislike, kill it.‚Äù
+ ‚ÄúNo one knows Emacs.‚Äù
+ ‚ÄúOne can only learn Emacs by living within it.‚Äù
+ ‚ÄúTo know Org mode is to know oneself.‚Äù

It is important to realise that /koan/ are intended to move you off of one path
and onto another. They are not just attempts to mystify you. For example,
the first proverb is in regards to newcomers complaining about too many
keybinings ---eventually it's muscle memory---, whereas the second is about
using the right tool for the right task ---Emacs is not for everyone. The fourth
is, well, Emacs is an operating system.

** Possibly Interesting Reads
:PROPERTIES:
:CUSTOM_ID: Possibly-Interesting-Reads
:END:
+ [[https://www.gnu.org/software/emacs/tour/][The Emacs Tour]]
+ [[https://sachachua.com/blog/series/a-visual-guide-to-emacs/][How to Learn Emacs: A Hand-drawn One-pager for Beginners / A visual tutorial]]
+ [[http://emacsrocks.com/][Video Series on Why Emacs Rocks]] ---catch the enthusiasm!
+ [[https://www.gnu.org/software/emacs/emacs-paper.html][EMACS: The Extensible, Customizable Display Editor]]
     # - This paper was written by Richard Stallman in 1981 and delivered in the
     #  ACM Conference on Text Processing.
     ‚ÄúThe programmable editor is an outstanding opportunity to learn to program!‚Äù
+ [[https://www.gnu.org/philosophy/free-sw.html][What is free software?]]
   # + Link to emacs main site, [[https://www.gnu.org/software/emacs/][Emacs]] .
+ [[http://ehneilsen.net/notebook/orgExamples/org-examples.html#sec-18][Emacs org-mode examples and cookbook]]
+ [[https://m00natic.github.io/emacs/emacs-wiki.html][An Opinionated Emacs guide for newbies and beyond]]
+ [[https://tuhdo.github.io/emacs-tutor.html][Emacs Mini-Manual, Part I of III]]
  # + The [[http://tuhdo.github.io/emacs-tutor.html#orgheadline63][Emacs Mini Manual]], or
+ [[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][Org and R Programming]] ---a tutorial on literate programming, e.g., evaluating code within ~src~ bloc.
+ Reference cards for [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][GNU Emacs]], [[https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf][Org-mode]], and [[https://github.com/alhassy/ElispCheatSheet/blob/master/CheatSheet.pdf][Elisp]].
+ [[https://www.reddit.com/r/emacs/comments/6fytr5/when_did_you_start_using_emacs/][‚ÄúWhen did you start using Emacs‚Äù discussion on Reddit]]
+ [[https://david.rothlis.net/emacs/howtolearn.html][‚ÄúHow to Learn Emacs‚Äù]]
+ [[https://orgmode.org/index.html#sec-4][The Org-mode Reference Manual]] or [[https://orgmode.org/worg/][Worg: Community-Written Docs]] which includes a [[https://orgmode.org/worg/org-tutorials/index.html][meta-tutorial]].
+ [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A community driven list of useful Emacs packages, libraries and others.
+ [[https://github.com/caisah/emacs.dz][A list of people's nice emacs config files]]
  #  + [[https://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][Stackexchange: Using org-mode to structure config files]]
+ [[http://emacslife.com/how-to-read-emacs-lisp.html][Read Lisp, Tweak Emacs: How to read Emacs Lisp so that you can customize Emacs]]
+ [[https://practicaltypography.com/why-racket-why-lisp.html][Why Racket? Why Lisp?]]

---If eye-candy, a sleek and beautiful GUI, would entice you then consider starting with [[http://spacemacs.org/][spacemacs]].
   Here's a helpful [[https://www.youtube.com/watch?v=hCNOB5jjtmc][installation video]], after which you may want to watch
   [[https://www.youtube.com/watch?v=PVsSOmUB7ic][Org-mode in Spacemacs]] tutorial---

Remember: Emacs is a flexible platform for developing end-user applications; e.g., this configuration file
is at its core an Emacs Lisp program that yields the editor of my dreams
--it encourages me to grow and to be creative, and I hope the same for all who use it;
moreover, it reflects my personality such as what I value and what I neglect in my workflow.

# why emacs ---not marching to someone-else's tune!
#+begin_quote org
I‚Äôm stunned that you, as a professional software engineer, would eschew inferior
computer languages that hinder your ability to craft code, but you put up with
editors that bind your fingers to someone else‚Äôs accepted practice. ---[[http://www.howardism.org/Technical/Emacs/why-emacs.html][Howard
Abrams]]
#+end_quote
** Fun commands to try out
:PROPERTIES:
:CUSTOM_ID: Fun-commands-to-try-out
:END:
Finally, here's some fun commands to try out:
+ ~M-x doctor~ ---generalising the idea of rubber ducks
+ ~M-x tetris~  or ~M-x gomoku~ or ~M-x snake~---a break with a classic
  - ~C-u ùìÉ M-x hanoi~ for the ùìÉ-towers of Hanoi
+ ~M-x butterfly~ ---in reference to [[https://xkcd.com/378/][‚Äúreal programmers‚Äù]]

# Then, ~M-x help-with-tutorial~ or ~C-h t~ to start the ~30 min tutorial.

A neat way to get started with Emacs is to solve a problem you have, such
as taking notes or maintaining an agenda ---both with Org-mode.

Before we get started‚Ä¶
** What Does Literate Programming Look Like?
:PROPERTIES:
:CUSTOM_ID: What-Does-Literate-Programming-Look-Like
:END:

Briefly put, literate programming in Emacs allows us to evaluate source code
within our text files, then using the results as values in other source
blocks. When presenting an algorithm, we can talk it out, with a full commentary
thereby providing ‚Äòreproducible research‚Äô: Explorations and resulting algorithms
are presented together in a natural style.

#+html: <p style="text-align:center">

:Src:
#+begin_src plantuml :file images/literate-programming.png :tangle no :exports results :eval never-export :results (progn (org-display-inline-images t t) "replace")
skinparam defaultTextAlignment center  /' Text alignment '/

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor red
skinparam titleBackgroundColor Aqua-CadetBlue
title Literate Programming with Org-Mode

actor You

You --> (Code) : Ideas
You --> (Text) : Ideas

[**Org Mode**] as Org

(Text) --> Org : Writing
(Code) --> Org : Writing

Org --[#green]> (Document) : ‚ÄòWeaving‚Äô
Org --[#green]> (RawCode)  : ‚ÄòTangeling‚Äô

database Computer as "**Computer**
---
interpreter
---
compiler"

cloud People {
:jasim:
:kathy:
}

(Document) --[#green]> People : PDF, HTML, Text
(RawCode) --[#green]> (Computer) : tex, java, c, py

center footer  ‚ô•‚Äø‚ô• Write once, generate many (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà
#+end_src
:End:
[[file:images/literate-programming.png]]
#
# (org-display-inline-images t t)
‚ü® This image was created in org-mode; details [[#Workflow-States][below]] or by looking at the source file üòâ ‚ü©
#+html: </p>

Here's an example of showing code in a natural style, but having the resulting
code appear in a style amicable to a machine. *Here's what you type:*
#+BEGIN_src org :tangle no
It's natural to decompose large problems,
,#+begin_src haskell :noweb-ref defn-of-f :tangle no
f = h ‚àò g
,#+end_src

But we need to define $g$ and $h$ /beforehand/ before we can use them. Yet it's
natural to ‚Äúmotivate‚Äù their definitions ---rather than pull a rabbit out of
hat. Org lets us do that!

Here's one definition,
,#+begin_src haskell :noweb-ref code-from-other-places :tangle no
g = ‚ãØ
,#+end_src

then the other.
,#+begin_src haskell :noweb-ref code-from-other-places :tangle no
h = ‚ãØ
,#+end_src

Of-course, we might also want a preamble:
,#+BEGIN_SRC haskell :tangle myprogram.hs
import ‚ãØ
,#+END_SRC

We can now tangle together the tagged code blocks in the order we want.
,#+BEGIN_SRC haskell :tangle myprogram.hs :comments none :noweb yes
<<code-from-other-places>>
<<defn-of-f>>
,#+END_SRC
( You can press ‚ÄúC-c C-v C-v‚Äù to see what this block expands into! )
#+END_src

Now kbd:C-c_C-v_C-t (doc:org-babel-tangle) yields a file named ~myprogram.hs~ with contents in an order
amicable to a machine.
#+BEGIN_SRC haskell :tangle no
import ‚ãØ

g = ‚ãØ
h = ‚ãØ
f = h ‚àò g
#+END_SRC

Interestingly, unlike certain languages, Haskell doesn't care too much about
declaration order.

*Warning!* If we have different language blocks tangled to the same file, then
they are tangled alphabetically ---e.g., if one of the blocks is marked
~emacs-lisp~ then its contents will be the very first one in the resulting source
file, since ~emacs-lisp~ begins with ~e~ which is alphabetically before ~h~ of
~haskell~.

+ [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming with Org-mode]]
+ [[http://ehneilsen.net/notebook/orgExamples/org-examples.html][Emacs org-mode examples and cookbook]]
+ [[https://leanpub.com/lit-config/read][Literate Config]] ---Online booklet

** Why a monolithic configuration?
:PROPERTIES:
:CUSTOM_ID: Why-a-monolithic-configuration
:END:

Why am I keeping my entire configuration ---from those involving cosmetics &
prose to those of agendas & programming--- in one file?  Being monolithic ---‚Äúa
large, mountain-sized, indivisible block of stone‚Äù--- is generally not ideal in
nearly any project: E.g., a book is split into chapters and a piece of software
is partitioned into modules. Using Org-mode, we can still partition our setup
while remaining in one file. An Emacs configuration is a personal, leisurely
project, and one file is a simple architecture: I don't have to worry about many
files and the troubles of moving content between them; instead, I have headings
and move content almost instantaneously ---org-refile by pressing ~w~ at the start
of the reader. Moreover, being one file, it is easy to distribute and to extract
artefacts from it ---such as the README for Github, the HTML for my blog, the
colourful PDF rendition, and the all-important Emacs Lisp raw code
file. Moreover, with a single ~#~ I can quickly comment out whole sections,
thereby momentarily disabling features.

There's no point in being modular if there's nothing explaining what's going on,
so I document.

The [[#Conclusion---Why-Configuration-Files-Should-be-Literate][concluding]] section of this read further argues the benefits of maintaining
literate, and monolithic, configuration files. As a convention, I will try to
motivate the features I set up and I will prefix my local functions with, well,
~my/~ ---this way it's easy to see all my defined functions, and this way I cannot
accidentally shadow existing utilities. Moreover, besides browsing the web, I do
nearly everything in Emacs and so the start-up time is unimportant to me: Once
begun, I have no intention of spawning another instance nor closing the current
one. ( Upon an initial startup using this configuration, it takes a total of
121 seconds to install all the packages featured here. )

                                     Enjoy!

* Booting Up
:PROPERTIES:
:CUSTOM_ID: Booting-Up
:header-args: :tangle init.el
:END:

Let's decide on where we want to setup our declarations for personalising Emacs
to our needs. Then, let's bootstrap Emacs' primitive packaging mechanism with a
slick interface ---which not only installs Emacs packages but also programs at
the operating system level, all from inside Emacs!  Finally, let's declare who
we are +and use that to setup Emacs email service.+

** ¬† =~/.emacs= vs. =init.org=
:PROPERTIES:
:CUSTOM_ID: emacs-vs-init-org
:END:

/Emacs is extensible/: When Emacs is started, it tries to load a user's Lisp
program known as an *initialisation (‚Äòinit‚Äô) file* which specifies how Emacs
should look and behave for you.  Emacs looks for the init file using the
filenames =~/.emacs.el=, =~/.emacs=, or =~/.emacs.d/init.el= ---it looks for the first
one that exists, in that order; at least it does so on my machine.  Below we'll
avoid any confusion by /ensuring/ that only one of them is in our system.
Regardless, execute [[kbd:C-h o user-init-file]] to see the name of the init file
loaded. Having no init file is tantamount to have an empty init file.

+ One can read about the various Emacs initialisation files [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File][online]] or
  within Emacs by the sequence [[kbd:C-h i m emacs RET i init file RET]].
+ A /friendly/ tutorial on ‚Äòbeginning a =.emacs= file‚Äô can be read
  [[https://www.gnu.org/software/emacs/manual/html_node/eintr/Beginning-init-File.html#Beginning-init-File][online]] or within Emacs by [[kbd:C-h i m emacs lisp intro RET i .emacs RET]].
+ After inserting some lisp code, such as ~(set-background-color "salmon")~, and
  saving, one can load the changes with [[kbd:M-x eval-buffer]], doc:eval-buffer.
+ In a terminal, use ~emacs -Q~ to open emacs without any initialisation files.

# Emacs is a stateful Lisp-based machine!

Besides writing Lisp in an init file, one may use Emacs' customisation
interface, [[kbd:M-x customize]]: Point and click to change Emacs to your needs. The
resulting customisations are, by default, automatically thrown into your init
file ---=~/.emacs= is created for you if you have no init file.  This interface is
great for beginners.
# but one major drawback is that it's a bit difficult to
# share settings since it's not amicable to copy-pasting.
#
# Unless suggested otherwise, Emacs writes stuff to =~.emacs= automatically.

We shall use =~/.emacs.d/init.el= as the initialisation file so that /all/ of our
Emacs related files live in the /same/ directory: =~/.emacs.d/=.

A raw code file is difficult to maintain, especially for a /large/ system such as
Emacs. Instead, we're going with a ‚Äòliterate programming‚Äô approach: The
intialisation configuration is presented in an essay format, along with headings
and subheadings, intended for consumption by humans such as myself, that,
incidentally, can be ‚Äòtangled‚Äô into a raw code file that is comprehensible by a
machine. We achieve this goal using [[#Life-within-Org-mode][org-mode]] ---/Emacs' killer app/--- which is
discussed in great detail later on.

#+begin_details "/Adventure time!/ ‚ÄúHoney, where's my init?‚Äù"
link-here:Adventure-time-Honey-where's-my-init
Let's use the three possible locations for the initialisation files
to explore how Emacs finds them. Make the following three files.

_~/.emacs.el_
#+BEGIN_SRC emacs-lisp :tangle no
;; Emacs looks for this first;
(set-background-color "chocolate3")
(message-box ".emacs.el says hello")
#+END_SRC

_~/.emacs_
#+BEGIN_SRC emacs-lisp :tangle no
;; else; looks for this one;
(set-background-color "plum4")
(message-box ".emacs says hello")
#+END_SRC

_~/.emacs.d/init.el_
#+BEGIN_SRC emacs-lisp :tangle no
;; Finally, if neither are found; it looks for this one.
(set-background-color "salmon")
(message-box ".emacs.d/init.el says hello")
#+END_SRC

Now restart your Emacs to see how there super tiny initilaisation files
affect your editor. Delete some of these files in-order for others to take effect!
#+end_details

#+begin_details Adventure time! Using Emacs‚Äô Easy Customisation Interface
link-here:Adventure-time-Using-Emacs'-Easy-Customisation-Interface
We have chosen not to keep configurations in ~~/.emacs~ since
Emacs may explicitly add, or alter, code in it.

Let's see this in action!

Execute the following to see additions to the ~~/.emacs~ have been added by
‚Äòcustom‚Äô.
 1. [[kbd:M-x customize-variable RET line-number-mode RET]]
 2. Then press: kbd:toggle, kbd:state, then [[kbd:1]].
 3. Now take a look: [[kbd:C-x C-f ~/.emacs]]
#+end_details

#+begin_details Support for ‚ÄòCustom‚Äô
link-here:Support-for-Custom
Let the Emacs customisation GUI insert configurations into its own file, not
touching or altering my initialisation file.  For example, I tend to have local
variables to produce ~README.org~'s and other matters, so Emacs' Custom utility
will remember to not prompt me each time for the safety of such local variables.

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(ignore-errors (load custom-file)) ;; It may not yet exist.
#+end_src

:No_longer_true:
Speaking of local variables, let's always load ones we've already marked as safe
---see the bottom of the source of this file for an example of local variables.
( At one point, all my files had locals! )
#+BEGIN_SRC emacs-lisp :tangle no
(setq enable-local-variables :safe)
#+END_SRC
:End:
#+end_details

** Who am I?
:PROPERTIES:
:CUSTOM_ID: Who-am-I
:END:
Let's set the following personal Emacs-wide variables ---to be used locations
such as email.
#+begin_src emacs-lisp
(setq user-full-name    "Musa Al-hassy"
      user-mail-address "alhassy@gmail.com")
#+end_src

For some fun, run this cute method.
#+BEGIN_SRC emacs-lisp :tangle no
(animate-birthday-present user-full-name)
#+END_SRC

** Emacs Package Manager
:PROPERTIES:
:CUSTOM_ID: Emacs-Package-Manager
:END:
# Installing Emacs packages directly from source

There are a few ways to install packages ---run kbd:C-h_C-e for a short
overview.  The easiest, for a beginner, is to use the command
doc:package-list-packages then find the desired package, press [[kbd:i]] to mark it
for installation, then install all marked packages by pressing [[kbd:x]].

+ /Interactively/: [[kbd:M-x list-packages]] to see all melpa packages that can install
  - Press kbd:Enter on a package to see its description.
+ Or more quickly, to install, say, unicode fonts: [[kbd:M-x package-install RET
  unicode-fonts RET]].

‚ÄúFrom rags to riches‚Äù: Recently I switched to Mac ---first time trying the OS.
I had to do a few ~package-install~'s and it was annoying.  I'm looking for the
best way to package my Emacs installation ---including my installed packages and
configuration--- so that I can quickly install it anywhere, say if I go to
another machine.  It seems doc:use-package allows me to configure and auto
install packages.  On a new machine, when I clone my ~.emacs.d~ and start Emacs,
on the first start it should automatically install and compile all of my
packages through ~use-package~ when it detects they're missing. ‚ô•‚Äø‚ô•

First we load ~package~, the built-in package manager.  It is by default only
connected to the GNU ELPA (Emacs Lisp Package Archive) repository, so we
extended it with other popular repositories; such as the much larger [[https://melpa.org/#/][MELPA]]
([[https://github.com/melpa/melpa][Milkypostman's ELPA]]) ---it builds packages directly from the source-code
repositories of developers rather than having all packages in one repository.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Make all commands of the ‚Äúpackage‚Äù module present.
(require 'package)

;; Internet repositories for new packages.
(setq package-archives '(("gnu"    . "http://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ("melpa"  . "http://melpa.org/packages/")))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
;; Update local list of available packages:
;; Get descriptions of all configured ELPA packages,
;; and make them available for download.
(package-refresh-contents)
#+END_SRC

- All installed packages are placed, by default, in =~/.emacs.d/elpa=.
- *Neato:* /If one module requires others to run, they will be installed automatically./

:Faq:
If there are issues with loading the archives, say, "Failed to download ‚Äògnu‚Äô
archive."  then ensure you can both read and write, recursively, to your
.emacs.d/ E.g., within emacs try to execute (package-refresh-contents) and
you'll observe a permissions error.
:End:

The declarative configuration tool [[https://github.com/jwiegley/use-package/][use-package]] is a macro/interface that manages
our packages and the way they interact.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

We can now invoke ~(use-package XYZ :ensure t)~ which should check for the ~XYZ~
package and makes sure it is accessible.  If the file is not on our system, the
~:ensure t~ part tells ~use-package~ to download it ---using the built-in ~package~
manager--- and place it somewhere accessible, in =~/.emacs.d/elpa/= by default.
By default we would like to download packages, since I do not plan on installing
them manually by downloading Lisp files and placing them in the correct places
on my system.
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

Notice that doc:use-package /allows us to tersely organise a package's
configuration/ ---and that it is /not/ a package manger, but we can make it one by
having it automatically install modules, when needed, using ~:ensure t~.

#+begin_details Super Simple ‚Äòuse-package‚Äô Mini-tutorial
link-here:Super-Simple-‚Äòuse-package‚Äô-Mini-tutorial
Here are common keywords we will use, in super simplified terms.

  - ~:init   f‚ÇÅ ‚Ä¶ f‚Çô~  /Always/ executes code forms ~f·µ¢~ /before/ loading a package.
  - ~:diminish str~  Uses /optional/ string ~str~ in the modeline to indicate
                   this module is active. Things we use often needn't take
                   real-estate down there and so no we provide no ~str~.
  - ~:config f‚ÇÅ ‚Ä¶ f‚Çô~ /Only/ executes code forms ~f·µ¢~ /after/ loading a package.

    The remaining keywords only take affect /after/ a module loads.

  - ~:bind ((k‚ÇÅ . f‚ÇÅ) ‚Ä¶ (k‚Çô . f‚Çô)~ Lets us bind keys ~k·µ¢~, such as
    ~"M-s o"~, to functions, such as =occur=.
    * When /n = 1/, the extra outer parenthesis are not necessary.
  - ~:hook ((m‚ÇÅ ‚Ä¶ m‚Çô) . f)~ Enables functionality ~f~ whenever we're in one of the
    modes ~m·µ¢~, such as ~org-mode~. The ~. f~, along with the outermost parenthesis,
    is optional and defaults to the name of the package ---Warning: Erroneous
    behaviour happens if the package's name is not a function provided by the
    package; a common case is when package's name does /not/ end in ~-mode~,
    leading to the invocation ~((m‚ÇÅ ‚Ä¶ m‚Çô) . <whatever-the-name-is>-mode)~ instead.
    # More generally, it let's us hook functions f·µ¢, which may depend on the
    # current mode, to modules m·µ¢.
    Additionally, when /n = 1/, the extra outer parenthesis are not necessary.

    Outside of =use-package=, one normally uses a ~add-hook~ clause.  Likewise, an
    ‚Äòadvice‚Äô can be given to a function to make it behave differently ---this is
    known as ‚Äòdecoration‚Äô or an ‚Äòattribute‚Äô in other languages.

  - ~:custom (k‚ÇÅ v‚ÇÅ d‚ÇÅ) ‚Ä¶ (k‚Çô v‚Çô d‚Çô)~ Sets a package's custom variables ~k·µ¢~ to have
    values ~v·µ¢~, along with /optional/ user documentation ~d·µ¢~ to explain to yourself,
    in the future, why you've made this decision.

    This is essentially ~setq~ within ~:config~.

  - Use the standalone keyword ~:disabled~ to turn off loading
      a module that, say, you're not using anymore.
#+end_details

We now bootstrap ~use-package~.

The use of ~:ensure t~ only installs absent modules, but it does no updating.
Let's set up [[https://github.com/rranelli/auto-package-update.el][an auto-update mechanism]].
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package auto-package-update
  :config
  ;; Delete residual old versions
  (setq auto-package-update-delete-old-versions t)
  ;; Do not bother me when updates have taken place.
  (setq auto-package-update-hide-results t)
  ;; Update installed packages at startup if there is an update pending.
  (auto-package-update-maybe))
#+END_SRC

Here's another example use of ~use-package~.  Later on, I have a ‚Äúshow recent files
pop-up‚Äù command set to ~C-x C-r~; but what if I forget? This mode shows me all key
completions when I type ~C-x~, for example.  Moreover, I will be shown other
commands I did not know about! Neato :-)
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Making it easier to discover Emacs key presses.
(use-package which-key
  :defer nil
  :config (which-key-mode)
          (which-key-setup-side-window-bottom)
          (setq which-key-idle-delay 0.05))
#+END_SRC
‚ü® Honestly, I seldom even acknowledge this pop-up; but it's always nice to show
to people when I'm promoting Emacs. ‚ü©

Here are other packages that I want to be installed onto my machine.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Haskell's cool
(use-package haskell-mode )

;; Lisp libraries with Haskell-like naming.
(use-package dash)    ;; ‚ÄúA modern list library for Emacs‚Äù
(use-package s   )    ;; ‚ÄúThe long lost Emacs string manipulation library‚Äù.

;; Let's use the ‚Äús‚Äù library.
(defvar my/personal-machine?
  (equal "Musa‚Äôs MacBook Air " (s-collapse-whitespace (shell-command-to-string "scutil --get ComputerName")))
  "Is this my personal machine, or my work machine?

 At one point, on my work machine I run the following command to give the machine a sensible name.

     sudo scutil --set ComputerName work-machine
     dscacheutil -flushcache")

(defvar my/work-machine? (not my/personal-machine?))

;; Library for working with system files;
;; e.g., f-delete, f-mkdir, f-move, f-exists?, f-hidden?
(use-package f)
#+END_SRC

Note:
+ [[https://github.com/magnars/dash.el][dash]]: ‚ÄúA modern list library for Emacs‚Äù
  - E.g., ~(--filter (> it 10) (list 8 9 10 11 12))~
+ [[https://github.com/magnars/s.el][s]]: ‚ÄúThe long lost Emacs string manipulation library‚Äù.
  - E.g., ~s-trim, s-replace, s-join~.

Remember that snippet for ~undo-tree~ in the introductory section?
Let's activate it now, after ~use-package~ has been setup.
#+BEGIN_SRC emacs-lisp :noweb yes :tangle init.el
  <<undo-tree-setup>>
#+END_SRC

#+begin_box DRY: Don't Repeat Yourself!
In the HTML export, above it /looks/ like I just copy-pasted the undo tree setup
from earlier, but that is not the case! All I did was *pink:declare* to Org that
I'd like that /named snippet/ to be tangled now, here in the resulting code file.
#+begin_src org :tangle no
,#+begin_src emacs-lisp :noweb yes
  <<undo-tree-setup>>
,#+end_src
#+end_src

You can press kbd:C-c_C-v_C-v, doc:org-babel-expand-src-block, to see what this
block expands into ---which is what was shown above.
#+end_box

--------------------------------------------------------------------------------

link-here:Quelpa
[[https://github.com/quelpa/quelpa-use-package][Quelpa]] allows us to build Emacs packages directly from source repositories.  It
derives its name from the German word /Quelle/, for /souce/ [code], adjoined to
ELPA.  Its ~use-package~ interface allows us to use ~use-package~ like normal but
when we want to install a file from souce we use the keyword ~:quelpa~.

# Example invocation.
# (quelpa '(discover-my-major :fetcher git :url "https://framagit.org/steckerhalter/discover-my-major.git"))
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package quelpa
  :custom (quelpa-upgrade-p t "Always try to update packages")
  :config
  ;; Get ‚Äòquelpa-use-package‚Äô via ‚Äòquelpa‚Äô
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package))
#+END_SRC

Let's use this to obtain an improved info-mode from the EmacsWiki. [Disabled for
now]
#+BEGIN_SRC emacs-lisp :tangle no
(use-package info+
  :quelpa (info+ :fetcher wiki :url "https://www.emacswiki.org/emacs/info%2b.el"))
#+END_SRC

** Installing OS packages, and automatically keeping my system up to data, from within Emacs
:PROPERTIES:
:CUSTOM_ID: Installing-OS-packages-and-automatically-keeping-my-system-up-to-data-from-within-Emacs
:END:

Sometimes Emacs packages depend on existing system binaries, ~use-package~ let's
us ensure these exist using the ~:ensure-system-package~ keyword extension.

- This is like ~:ensure t~ but operates at the OS level and uses your default
  OS package manager.
- It has [[https://github.com/jwiegley/use-package#use-package-ensure-system-package][multiple features]].

Let's obtain the extension.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Auto installing OS system packages
(use-package system-packages)

;; Ensure our operating system is always up to date.
;; This is run whenever we open Emacs & so wont take long if we're up to date.
;; It happens in the background ^_^
;;
;; After 5 seconds of being idle, after starting up.
(run-with-idle-timer 5 nil #'system-packages-update) ;; ‚âà (async-shell-command "brew update && brew upgrade")

(defvar my/installed-packages
  (shell-command-to-string "brew list")
  "What is on my machine already?

Sometimes when I install a GUI based application and do not have access to it everywhere in my path,
it may seem that I do not have that application installed. For instance,
   (system-packages-package-installed-p \"google-chrome\")
returns nil, even though Google Chrome is on my machine.

As such, we advise the `system-packages-ensure' installtion method to only do
installs of packages that are not in our `my/installed-packages' listing.
")
(advice-add 'system-packages-ensure   :before-until (lambda (pkg) (s-contains-p pkg my/installed-packages)))

;; Please don't bother me when shell buffer names are in use, just make a new buffer.
(setq async-shell-command-buffer 'new-buffer)

;; Display the output buffer for asynchronous shell commands only when the
;; command generates output.
(setq async-shell-command-display-buffer nil)

;; Don't ask me if I want to kill a buffer with a live process attached to it;
;; just kill it please.
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))
#+END_SRC

After an update to Mac OS, one may need to [[https://emacs.stackexchange.com/questions/53026/how-to-restore-file-system-access-in-macos-catalina][restore file system access privileges
to Emacs]].

Here's an example use for Emacs packages that require OS packages:
#+BEGIN_SRC emacs-lisp :tangle no
(shell-command-to-string "type rg") ;; ‚áí rg not found
(use-package rg
  :ensure-system-package rg) ;; ‚áí There's a buffer *system-packages*
                             ;;   installing this tool at the OS level!
#+END_SRC
If you look at the ~*Messages*~ buffer, via ~C-h e~, on my machine it says
~brew install rg: finished~ ---it uses ~brew~ which is my OS package manager!

+ The [[https://github.com/jwiegley/use-package#use-package-ensure-system-package][use-package-ensure-system-package]] documentation for a flurry of use cases.

The extension makes use of [[https://gitlab.com/jabranham/system-packages][system-packages]]; see its documentation to learn
more about managing installed OS packages from within Emacs. This is itself
a powerful tool, however it's interface ~M-x system-packages-install~ leaves much
to be desired ---namely, tab-compleition listing all available packages,
seeing their descriptions, and visiting their webpages.
This is remedied by [[https://github.com/emacs-helm/helm-system-packages][M-x helm-system-packages]] then ~RET~ to see a system
package's description, or ~TAB~ for the other features!
/This is so cool!/

#+BEGIN_SRC emacs-lisp :tangle init.el
;; An Emacs-based interface to the package manager of your operating system.
(use-package helm-system-packages)
#+END_SRC

The Helm counterpart is great for /discovarability/, whereas
the plain ~system-packages~ is great for /programmability/.

#+begin_src emacs-lisp :tangle init.el
(setq system-packages-noconfirm :do-not-prompt-me-about-confirms)

;; After 1 minute after startup, kill all buffers created by ensuring system
;; packages are present.
(run-with-timer 60 nil
 (lambda () (kill-matching-buffers ".*system-packages.*" t :kill-without-confirmation)))
#+end_src

It is tedious to arrange my program windows manually, and as such I love tiling
window managers, which automatically arrange them.  I had been using [[https://xmonad.org][xmonad]]
until recently when I obtained a Mac machine and now use [[https://ianyh.com/amethyst/][Amethyst]] ---‚ÄúTiling
window manager for macOS along the lines of xmonad.‚Äù

#+begin_src emacs-lisp :tangle init.el
;; Unlike the Helm variant, we need to specify our OS pacman.
(when (eq system-type 'darwin)
  (setq system-packages-package-manager 'brew))

;; If the given system package doesn't exist; install it.
(when (eq system-type 'darwin)
  (system-packages-ensure "amethyst")) ;; This is a MacOS specific package.

(ignore-errors (system-packages-ensure "google-chrome")) ;; My choice of web browser
(system-packages-ensure "microsoft-teams") ;; For remote work meetings

;; Gif maker; needs privileges to capture screen.
;;
;; ‚áí Move the screen capture frame while recording.
;; ‚áí Pause and restart recording, with optional inserted text messages.
;; ‚áí Global hotkey (shift+space) to toggle pausing while recording
(system-packages-ensure "licecap") ;; Use: ‚åò-SPACE licecap

;; Pack, ship and run any application as a lightweight container
(system-packages-ensure "docker")
;; Free universal database tool and SQL client
(system-packages-ensure "dbeaver-community")
;; Kubernetes IDE
(system-packages-ensure "lens")
;; Platform built on V8 to build network applications
;; Also known as: node.js, node@16, nodejs, npm
(system-packages-ensure "node") ;; https://nodejs.org/
;; Nice: https://nodesource.com/blog/an-absolute-beginners-guide-to-using-npm/
;; Manage multiple Node.js versions
(shell-command "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash")
;; According to https://github.com/nvm-sh/nvm, nvm shouldn't be installed via brew.

;; ;; Use ‚Äúbrew cask install‚Äù instead of ‚Äúbrew install‚Äù for installing programs.;
;; (setf (nth 2 (assoc 'brew system-packages-supported-package-managers))
;;      '(install . "brew cask install"))
#+end_src

# For instance, let's install a tiling window manager: https://ianyh.com/amethyst/
# brew install --cask amethyst
Amethyst requires some more setup: Open its preferences, then...
    - Then select: =Mouse: Focus follows mouse=.
    - Also: =Shortcuts=, then disable ‚Äòincrease/decrease main pane count‚Äô bindings
      since they override the beloved Emacs =M-<,>= keys.

Neato! Now I can live in Emacs even more ^_^

--------------------------------------------------------------------------------

(*Open Scripting Architecture (OSA) Scripts*) Amethyst is great, but it has a
problem of randomly not working.  Unfortunatley it has no command line
interface, so let's make one in Emacs: Now kbd:‚åò-a_r relaunches Amethyst.
#+begin_details
#+begin_src emacs-lisp :tangle init.el
(defun ‚åò-quit (app)
  "Kill application APP; e.g., ‚Äúamethyst‚Äù or ‚ÄúSafari‚Äù"
  (shell-command (format "osascript -e 'quit app \"%s\"'" app)))

(defun ‚åò-open (app)
 "Open application APP; e.g., ‚Äúamethyst‚Äù or ‚ÄúSafari‚Äù"
  (async-shell-command (format "osascript -e 'launch app \"%s\"'" app)))

;; (bind-key "???-a r" #'my/relaunch-amethyst)
(defun my/relaunch-amethyst () (interactive)
       (‚åò-quit "amethyst")
       (‚åò-open "amethyst"))
#+end_src

We use the ~osascript~ command to ~tell~ the [[https://en.wikibooks.org/wiki/AppleScript_Programming/System_Events][System Events]] ~application~ to issue
keystrokes to other applications. I found out about by Googling ‚ÄúHow to send
keystrokes from terminal‚Äù.

#+begin_src emacs-lisp  :tangle init.el
;; (bind-key "???-a c" #'amethyst/cycle-layout)
(defun amethyst/cycle-layout ()
  (interactive)
  (shell-command "osascript -e 'tell application \"System Events\" to keystroke space using {shift down, option down}'"))
#+end_src

If you get:
#+begin_src shell :tangle no
36:51: execution error: System Events got an error: osascript is not allowed to send keystrokes. (1002)
#+end_src

Then: Go to Security & Privacy -> Privacy tab -> Accessibility -> Add osascript (/usr/bin/osascript)

You may need to restart Emacs.

Reads:
+ [[https://eastmanreference.com/complete-list-of-applescript-key-codes][Complete list of AppleScript key codes]]
+ [[https://eastmanreference.com/how-to-automate-your-keyboard-in-mac-os-x-with-applescript][How to automate your keyboard in Mac OS X with AppleScript]]
#+end_details

I enter ‚Äú‚åò‚Äù using a TeX input method setup below (called ‚ÄúAgda‚Äù).

*** Don't show updating/installation shell buffers

#+begin_src emacs-lisp
;; By default, say, (async-shell-command "date") produces a buffer
;; with the result. In general, such commands in my init.el are for
;; updating/installing things to make sure I have the same up-to-date
;; setup where-ever I use my Emacs. As such, I don't need to see such buffers.
(add-to-list 'display-buffer-alist
             '("\\*Async Shell Command\\*.*" display-buffer-no-window))

;; For an approach that does not inhibit async-shell-command this way,
;; see https://emacs.stackexchange.com/questions/299/how-can-i-run-an-async-process-in-the-background-without-popping-up-a-buffer
#+end_src

** Syncing to the System's =$PATH=
:PROPERTIES:
:CUSTOM_ID: Syncing-to-the-System's-PATH
:END:

For one reason or another, on OS X it seems that an Emacs instance
begun from the terminal may not inherit the terminal's environment
variables, thus making it difficult to use utilities like ~pdflatex~
when Org-mode attempts to produce a PDF.

#+begin_src emacs-lisp :tangle init.el
(use-package exec-path-from-shell
  :defer nil
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

See the [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] documentation for setting other environment variables.

:Explicit_solution:
#+BEGIN_SRC emacs-lisp :tangle no
;; https://emacs.stackexchange.com/questions/4090/org-mode-cannot-find-pdflatex-using-mac-os

(defun set-exec-path-from-shell-PATH ()
  "Sets the exec-path to the same value used by the user shell"
  (let ((path-from-shell
         (replace-regexp-in-string
          "[[:space:]\n]*$" ""
          (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

;; call function now
(set-exec-path-from-shell-PATH)
#+END_SRC
:End:
** Restarting Emacs ---Keeping buffers open across sessions?
:PROPERTIES:
:CUSTOM_ID: Restarting-Emacs-Keeping-buffers-open-across-sessions
:END:

Sometimes I wish to close then reopen Emacs; unsurprisingly someone's
thought of implementing that.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Provides only the command ‚Äúrestart-emacs‚Äù.
(use-package restart-emacs
  :defer nil
  ;; If I ever close Emacs, it's likely because I want to restart it.
  :bind ("C-x C-c" . restart-emacs)
  ;; Let's define an alias so there's no need to remember the order.
  :config (defalias 'emacs-restart #'restart-emacs))
#+END_SRC

The following is disabled. I found it a nuisance to have my files
open across sessions ---If I'm closing Emacs, it's for a good reason.
#+begin_example emacs-lisp :tangle init.el
;; Keep open files open across sessions.
(desktop-save-mode 1)
(setq desktop-restore-eager 10)
#+end_example

Instead, let's try the following: When you visit a file, point goes to the last
place where it was when you previously visited the same file.
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq-default save-place  t)
(setq save-place-file "~/.emacs.d/etc/saveplace")
#+END_SRC

** ¬†‚ÄúBeing at the Helm‚Äù ---Completion & Narrowing Framework
:PROPERTIES:
:CUSTOM_ID: Being-at-the-Helm-Completion-Narrowing-Framework
:END:

Whenever we have a choice to make from a list, [[http://tuhdo.github.io/helm-intro.html][Helm]] provides possible
completions and narrows the list of choices as we type.  This is extremely
helpful for when switching between buffers, =C-x b=, and discovering & learning
about other commands!  E.g., press ~M-x~ to see recently executed commands and
other possible commands! ‚ÄúFuzzy finding‚Äù: Press ~M-x~ and just start typing,
methods mentioning what you've typed are suddenly listed! Moreover, ~C-c i~
(doc:helm-imenu) will show you the headers in an Org file /or/ the top-level
variables/functions/types when programming. Finally, whenever a Helm session has
started, toggle follow-mode with ~C-c C-f~ to obtain contextual-awareness; e.g.,
~C-c i RET C-c C-f~ will change your screen as you scroll through the menu.
/(A killer feature is doc:helm-do-grep-ag which will do a search in your whole project, file tree)./

| Remembrance comes with time, until then /ask/ Emacs! |

/Try and be grateful!/
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package helm
  :defer nil
 :init (helm-mode t)
 :bind (("M-x"     . helm-M-x)
        ("C-x C-f" . helm-find-files)
        ("C-x b"   . helm-mini)     ;; See buffers & recent files; more useful.
        ("C-x r b" . helm-filtered-bookmarks)
        ("C-x C-r" . helm-recentf)  ;; Search for recently edited files
        ("C-c i"   . helm-imenu) ;; C.f. ‚ÄúC-x t m‚Äù (imenu-list)
        ;; ("C-u C-c i" . imenu-list)  ;; TODO FIXME  Key sequence C-u C-c i starts with non-prefix key C-u
        ("C-h a"   . helm-apropos)
        ;; Look at what was cut recently & paste it in.
        ("M-y" . helm-show-kill-ring)
        ("C-x C-x" . helm-all-mark-rings)
        :map helm-map
        ;; We can list ‚Äòactions‚Äô on the currently selected item by C-z.
        ("C-z" . helm-select-action)
        ;; Let's keep tab-completetion anyhow.
        ("TAB"   . helm-execute-persistent-action)
        ("<tab>" . helm-execute-persistent-action)))

;; Show me nice file icons when using, say, ‚ÄúC-x C-f‚Äù or ‚ÄúC-x b‚Äù
;; (use-package helm-icons
;;   :defer nil
;;   :custom (helm-icons-provider 'all-the-icons)
;;   :config (helm-icons-enable))

;; When I want to see the TOC of an Org file, show me down to 3 subheadings.
(setq org-imenu-depth 3)
#+END_SRC

Helm provides generic functions for completions to replace
tab-completion in Emacs with no loss of functionality.

+ The =execute-extended-command=, the default ‚ÄúM-x‚Äù, is replaced with ~helm-M-x~
  which shows possible command completions.
  - If we want the ~M-x~ minibuffer to appear at the top of the screen, or middle,
    we can use [[https://github.com/muffinmad/emacs-mini-frame][emacs-mini-frame]] as [[https://gist.github.com/rougier/126e358464e12aa28fac5b4f3dd5eb9c?permalink_comment_id=4110106#gistcomment-4110106][shown beautifully here.]] I like ~helm-M-x~, for now.

  Likewise with ~apropos~, which is helpful for looking up commands.
  It shows all meaningful Lisp symbols whose names match a given pattern.

+ The ‚ÄòHelm-mini‚Äô, ~C-x b~, shows all buffers, recently opened files,
  bookmarks, and allows us to create new bookmarks and buffers!

+ The ‚ÄòHelm-imenu‚Äô, ~C-c i~, yields a a menu of all ‚Äútop-level items‚Äù in a file;
  e.g., functions and constants in source code or headers in an org-mode file.

  ‚ü≥ Nifty way to familarise yourself with a new code base, or one from a while
  ago.

+ When Helm is active, ~C-x~ lists possible course of actions on the currently
  selected item.

When ~helm-mode~ is enabled, even help commands make use of it.
E.g., ~C-h o~ runs ~describe-symbol~ for the symbol at point,
and ~C-h w~ runs ~where-is~ to find the key binding of the symbol at point.
Both show a pop-up of other possible commands.

                            Here's a nifty tutorial:
                     [[http://tuhdo.github.io/helm-intro.html][A package in a league of its own: Helm]]

Let's ensure ~C-x b~ shows us: Current buffers, recent files, and bookmarks
---as well as the ability to create bookmarks, which is via ~C-x r b~ manually.
For example, I press ~C-x b~ then type any string and will have the option of
making that a bookmark referring to the current location I'm working in, or
jump to it if it's an existing bookmark, or make a buffer with that name,
or find a file with that name.
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-bookmark-set
                                    helm-source-buffer-not-found))
#+END_SRC


Incidentally, Helm even provides an [[http://tuhdo.github.io/helm-intro.html#orgheadline24][interface]] for the ~top~ program via
~helm-top~. It also serves as an interface to popular search engines
and over 100 websites such as ~google, stackoverflow, ctan~, and ~arxiv~.
#+begin_src emacs-lisp :tangle init.el
(system-packages-ensure "surfraw")
; ‚áí  ‚ÄúM-x helm-surfraw‚Äù or ‚ÄúC-x c s‚Äù
#+end_src
If we want to perform a google search, with interactive suggestions,
then invoke ~helm-google-suggest~ ---which can be acted for other serves,
such as Wikipedia or Youtube by ~C-z~. For more google specific options,
there is the ~google-this~ package.

Let's switch to a powerful searching mechanism -- [[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]].  It allows us to
not only search the current buffer but also the other buffers and to make live
edits by pressing ~C-c C-e~ when a search buffer exists. Incidentally, executing
~C-s~ on a word, region, will search for that particular word, region; then make
changes with ~C-c C-e~ and apply them by ~C-x C-s~.
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package helm-swoop
  :defer nil
  :bind  (("C-s"     . 'helm-swoop)           ;; search current buffer
          ("C-M-s"   . 'helm-multi-swoop-all) ;; Search all buffer
          ;; Go back to last position where ‚Äòhelm-swoop‚Äô was called
          ("C-S-s" . 'helm-swoop-back-to-last-point)
          ;; swoop doesn't work with PDFs, use Emacs' default isearch instead.
          ; :map pdf-view-mode-map ("C-s" . isearch-forward)
          )
  :custom (helm-swoop-speed-or-color nil "Give up colour for speed.")
          (helm-swoop-split-with-multiple-windows nil "Do not split window inside the current window."))
#+END_SRC

+            ~C-u ùìÉ C-s~ does a search but showing ùìÉ contextual lines!
+               ~helm-multi-swoop-all~, ~C-M-s~, lets us grep files anywhere!

:ThisBecameMoreAnnoyingThanUseful:
#+BEGIN_SRC emacs-lisp :tangle no
  ;; If there is no symbol at the cursor, use the last used words instead.
  (setq helm-swoop-pre-input-function
      (lambda ()
        (let (($pre-input (thing-at-point 'symbol)))
          (if (eq (length $pre-input) 0)
              helm-swoop-pattern ;; this variable keeps the last used words
            $pre-input))))

#+END_SRC

Press ~M-i~ after a search has executed to enable it for all buffers.

We can also limit our search to org files, or buffers of the same mode,
or buffers belonging to the same project!

Note that on the Mac, I can still perform default Emacs search using
/Cmd+f/.
:End:
:Old_ivy_counsel_swiper_shenanigans:
+ There is a super duper neato search capability we can utilise -- ~swiper~.
+ We also use the ~counsel~, a collection of completion, ~ivy~, enhanced versions of
  common Emacs commands.
#+begin_src emacs-lisp :tangle no
(use-package ivy ;; More powerful but ugly looking completetion framework.
                 ;; Helm is prettier.
                 ;; Needed for Counsel, below.
 :config

  ;; add ‚Äòrecentf-mode‚Äô and bookmarks to ‚Äòivy-switch-buffer‚Äô.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; does not count candidates
  (setq ivy-count-format "")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil))

(use-package counsel
  :bind*                              ; load when pressed
  (("C-s"     . swiper)
   ;; ("C-x C-r" . counsel-recentf)     ; search for recently edited
   ("<f1> l"  . counsel-find-library)   ; find an Emacs Lisp library
   ("<f2> u"  . counsel-unicode-char))) ; insert a unicode symbol using a pop-up
#+end_src

~swiper~ is an alternative to Emacs' default incremental search.
It shows an overview of all matches --navigate using arrow keys.
There is also a helm based version of swiper.
:end:

Lets also use doc:helm-do-grep-ag ([[kbd:C-x c M-g a]]) *search all files in the current
   directory for a particular (regexp) string*
   - Shows matches live as you type
   - Very helpful when looking for a definition of something
#+begin_src emacs-lisp :tangle init.el
(system-packages-ensure "ag")
#+end_src

*Marking my place when I jump around*
Let's use ~M-m~ to get a nice menu of places we've been recently.
#+begin_src emacs-lisp :tangle init.el
;; Save/mark a location with ‚ÄúC-u M-m‚Äù, jump back to it with ‚ÄúM-m‚Äù.
(bind-key* "M-m"
           (lambda ()
             (interactive)
             (if (not current-prefix-arg)
                 (helm-mark-ring)
               (push-mark)
               (message "[To return to this location, press M-m] ‚à∑ %s"
                        (s-trim (substring-no-properties (thing-at-point 'line)))))))
#+end_src


Finally, note that there is now a ~M-x helm-info~ command to show documentation,
possibly with examples, of the packages installed. For example,
~M-x helm-info RET dash RET -parition RET~ to see how the parition function from the
dash library works via examples ;-)
#+begin_src emacs-lisp :tangle init.el
;; Make `links' from elisp symbols (quoted functions, variables and fonts) in Gnu-Emacs Info viewer to their help documentation.
(use-package inform
  :defer nil
  :config (require 'inform))
#+end_src
** Org-Mode Administrivia
:PROPERTIES:
:CUSTOM_ID: Org-Mode-Administrivia
:END:
:Updating_FAQ:

#+BEGIN_SRC emacs-lisp :tangle no
(shell-command "rm ~/.emacs.d/elpa/org-9.3/*.elc")
(byte-recompile-directory "~/.emacs.d/elpa/org-9.3/")
#+END_SRC

Easiest way get latest version of org-mode:
~M-x package-list-packages~, then select ~org~, then ~install~.

https://stackoverflow.com/questions/31855904/emacs-sees-the-directory-with-the-new-org-mode-version-but-loads-the-old-versio

https://emacs.stackexchange.com/questions/27597/how-to-update-org-to-latest-version-using-package-repos-git-clone-in-ubuntu
:End:

# Let's setup Org-mode so
# that we can quickly move between headings and org-blocks ---~n,p~ on heading
# starts and ~s-n,p~ on blocks---, then let's prettify the leading stars of
# headings, Org's formatting delimiters, and even its blocks delimiters by making
# them less intrusive thereby ‚Äòfading into the background‚Äô and drawing minimal
# attention.  This has been useful when promoting Org-mode by sharing my screen
# with others.
#

Let's conclude this ‚Äòboot-up‚Äô by getting /Emacs' killer app/, Org-mode, setup;
along with the extras that allow us to ignore heading names, but still utilise
their contents ---e.g., such as a heading named ‚Äòpreamble‚Äô that contains
org-mode setup for a file.

#+begin_src emacs-lisp :tangle init.el
(use-package emacs
    :defer nil
    :ensure org-contrib
    :config (require 'ox-extra)
            (ox-extras-activate '(ignore-headlines)))
#+end_src

~org-plus-contrib~ contain the files that are included with Emacs plus all
contributions from the [[https://code.orgmode.org/bzg/org-mode/src/master/contrib][org-mode repository]].
+ Use the ~:ignore:~ tag on headlines you'd like to have ignored, while not
  ignoring their content.
+ Use the ~:noexport:~ tag to omit a headline /and/ its contents.

#+begin_src emacs-lisp :tangle init.el
;; Replace the content marker, ‚Äú‚ãØ‚Äù, with a nice unicode arrow.
(setq org-ellipsis "  ‚Æõ")
;; Other candidates:
;; (setq org-ellipsis "   üìñ")
;; (setq org-ellipsis "  ‚ó¶‚ó¶‚ó¶")
;; (setq org-ellipsis "  ‚ü®ü´£‚ü©")
;; (setq org-ellipsis "  ‚ü®üëÄ‚ü©")
;; (setq org-ellipsis " ‚§µ")


;; Fold all source blocks on startup.
(setq org-hide-block-startup t)

;; Lists may be labelled with letters.
(setq org-list-allow-alphabetical t)

;; Avoid accidentally editing folded regions, say by adding text after an Org ‚Äú‚ãØ‚Äù.
(setq org-catch-invisible-edits 'show)

;; I use indentation-sensitive programming languages.
;; Tangling should preserve my indentation.
(setq org-src-preserve-indentation t)

;; Tab should do indent in code blocks
(setq org-src-tab-acts-natively t)

;; Give quote and verse blocks a nice look.
(setq org-fontify-quote-and-verse-blocks t)

;; Pressing ENTER on a link should follow it.
(setq org-return-follows-link t)
#+END_SRC

I rarely use tables, but here is a useful [[http://notesyoujustmightwanttosave.blogspot.com/][Org-Mode Table Editing Cheatsheet]] and
a [[http://www.howardism.org/Technical/Emacs/spreadsheet.html][friendly tutorial]].

Moreover, since I end up using org-mode most of the time, let's make that the
default mode.
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq initial-major-mode 'org-mode)
#+END_SRC

Finally, let's get some extra Org-mode mark-up goodies, such as ~kbd:C-c_C-e~
which renders as kbd:C-c_C-e.  Documentations and screenshots at:
https://alhassy.github.io/org-special-block-extras/
#+BEGIN_SRC emacs-lisp :tangle init.el

(defun org-special-block-extras-short-names ())
;;
;; org-special-block-extras.el:681:1:Error: Symbol‚Äôs value as variable is void: o--supported-blocks
(setq o--supported-blocks nil)

;; TODO org-special-block-extras.el:681:1:Error: Symbol‚Äôs value as variable is void: o--supported-blocks
;;
(use-package org-special-block-extras
  :defer nil
  :hook (org-mode . org-special-block-extras-mode)
  :custom
    ;; The places where I keep my ‚Äò#+documentation‚Äô
    (org-special-block-extras--docs-libraries
     '("~/org-special-block-extras/documentation.org"))
    ;; Disable the in-Emacs fancy-links feature?
    (org-special-block-extras-fancy-links
     '(elisp badge kbd link-here doc tweet))
    ;; Details heading ‚Äúflash pink‚Äù whenever the user hovers over them?
    (org-html-head-extra (concat org-html-head-extra "<style>  summary:hover {background:pink;} </style>"))
    ;; The message prefixing a ‚Äòtweet:url‚Äô badge
    (org-special-block-extras-link-twitter-excitement
     "This looks super neat (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà:")
  :config
  ;; Use short names like ‚Äòdefblock‚Äô instead of the fully qualified name
  ;; ‚Äòorg-special-block-extras--defblock‚Äô
    (org-special-block-extras-short-names))

;; Let's execute Lisp code with links, as in ‚Äúelisp:view-hello-file‚Äù.
(setq org-confirm-elisp-link-function nil)
#+END_SRC

** Password-locking files  ---‚Äúencryption‚Äù                         :Disabled:
:PROPERTIES:
:CUSTOM_ID: Password-locking-files-encryption
:header-args: :tangle no
:END:

With the following incantation, we name our files ~ùí≥.ùí¥.gpg~ where ùí≥ is the file
name and ùí¥ is the usual extension, then upon save we will be prompted for an
encryption method, we can press kbd:Enter on ~OK~ to just provide a password for
that file. You can open that file /without/ the passphrase for a limited amount of
time ---i.e., it's cached, saved, for your current computing session until
logout--- or force authentication by invoking ~gpgconf --kill gpg-agent~.

#+begin_src emacs-lisp
(system-packages-ensure "gnupg") ;; i.e.,  brew install gnupg

;; ‚Äúepa‚Äù ‚âà EasyPG Assistant

;; Need the following in init to have gpg working fine:
;; force Emacs to use its own internal password prompt instead of an external pin entry program.
(setq epa-pinentry-mode 'loopback)

;; https://emacs.stackexchange.com/questions/12212/how-to-type-the-password-of-a-gpg-file-only-when-opening-it
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
;; No more needing to enter passphrase at each save ^_^
;;
;; Caches passphrase for the current emacs session?
#+end_src

/The purpose of encrypting a file is so that an adversary/ ---e.g., an immoral
computer administrator or a thief who stole your computer--- /will have to spend
so much decrypting the data than the data is actually worth./ As such, one uses
GPG keys...!

#+begin_details GPG Details
Trivia: ‚Äúgpg‚Äù stands for GnuPG, which abbreviates GNU Privacy Guard.

To obtain encrypted messages from others, you will need a ‚ÄúGPG key‚Äù: They use
/your/ ‚Äúpublic key‚Äù (which others can see) to encrypt a file, which only /you/ can
open since you have the /associated/ ‚Äúprivate key‚Äù (which only you see).

Possibly interesting reads:
+ [[https://www.bytedude.com/gpg-in-emacs/][GPG In Emacs | Bytedude]]
+ [[https://softwareengineering.stackexchange.com/questions/212192/what-are-the-advantages-and-disadvantages-of-cryptographically-signing-commits-a][What are the advantages and disadvantages of cryptographically signing commits and tags in Git? | Software Engineering Stack Exchange]]
#+end_details

** Hydra: Supply a prefix only once
:PROPERTIES:
:CUSTOM_ID: Hydra-Supply-a-prefix-only-once
:END:

| /[[http://rski.github.io/emacs/hydra/2017/04/08/a-case-for-hydra.html][Hydras let us do ‚Äúsuper temporary modal editing‚Äù]]/ |

Sometimes we have keybindings that share a common prefix, say ~C-c j~ and ~C-c k~,
and we invoke them in an arbitrary sequence, it would be nice to invoke the
shared prefix /only once/ thereby having:
| ~C-c j C-c j C-c k C-c k M-3 C-c j M-5 C-c k~ | ‚âà | ~C-c jjkk3j5k~ |

- The [[https://github.com/abo-abo/hydra#the-one-with-the-least-amount-of-code][‚Äúhydra-zoom‚Äù]] example from the documentation really showcases this utility.
- After the prefix is supplied, all extensions are shown in a minibuffer.

#+BEGIN_SRC emacs-lisp :tangle init.el
;; Invoke all possible key extensions having a common prefix by
;; supplying the prefix only once.
(use-package hydra :defer nil)
#+END_SRC

# Outdated image.
# Center image
# +ATTR_HTML: :style margin-left: auto; margin-right: auto;
# [[file:images/hydra.png]]

From the [[https://github.com/abo-abo/hydra][Hydra]] repository is a ‚Äòdescription for poets‚Äô:
#+begin_quote
Once you summon the Hydra through the prefixed binding (the body + any one
head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head,
arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his
original purpose, calling his proper command. This makes the Hydra very
seamless, it's like a minor mode that disables itself auto-magically.
#+end_quote

‚áí The [[https://github.com/abo-abo/hydra/wiki][Hydra Wiki]] has many example hydras for common uses cases ‚áê

Below are two examples; one to simplify textual navigation and another for
window navigation.
Yet another possible hydra would be to avoid remembering word operations, such
as copying a word, upcasing it, killing a word from anywhere within it ---in
contrast ~kill-word~ kills /to the end/ of the word---, etc. Likewise for line
operations, such as copying a line from anywhere in it.  See [[#Taking-a-tour-of-one's-edits][Taking a tour of
one's edits]] below for another small and useful example.

When there are multiple actions, it's nice to see such a menu displayed in the
middle of the frame; so we use [[https://github.com/Ladicle/hydra-posframe#hydra-posframe][hydra-posframe]]. Moreover, it can be useful to
group related actions under a common heading ---e.g., textual navigation may
occur at the line level or word level or screen level--- we obtain a nice
interface by declaraing hydras using [[https://github.com/jerrypnz/major-mode-hydra.el#get-started][pretty-hydra-define]] ---this saves us the
trouble of [[https://github.com/abo-abo/hydra#the-impressive-looking-one][formating docstrings using classic hydra]].

#+begin_src emacs-lisp :tangle init.el
;; Show hydras overlayed in the middle of the frame
(use-package hydra-posframe
  :disabled "TODO Fix me, breaking Github Actions test setup"
  :quelpa (hydra-posframe :fetcher git :url
                          "https://github.com/Ladicle/hydra-posframe.git")
  :hook (after-init . hydra-posframe-mode)
  :custom (hydra-posframe-border-width 5))

;; Neato doc strings for hydras
(use-package pretty-hydra :defer nil)
#+end_src

To /actually/ define hydras, we make a helper function: doc:my/defhydra
---which combines doc:defhydra and doc:pretty-hydra-define.
#+begin_details Implementation
#+begin_src emacs-lisp  :tangle init.el
;; TODO convert my existing defhydras to my/defhydra.
(defmacro my/defhydra (key title icon-name &rest body)
"Make a hydra whose heads appear in a pretty pop-up window.
Heads are signalled by keywords and the hydra has an icon in its title.

KEY [String]: Global keybinding for the new hydra.

TITLE [String]: Either a string or a plist, as specified for pretty-hydra-define.
       The underlying Lisp function's name is derived from the TITLE;
       which is intentional since hydra's are for interactive, pretty, use.

       One uses a plist TITLE to specify what a hydra should do *before*
       any options, or to specify an alternate quit key (:q by default).

ICON-NAME [Symbol]: Possible FontAwesome icon-types: C-h v `all-the-icons-data/fa-icon-alist'.

BODY: A list of columns and entries. Keywords indicate the title
      of a column; 3-lists (triples) indicate an entry key and
      the associated operation to perform and, optionally, a name
      to be shown in the pop-up. See DEFHYDRA for more details.


For instance, the verbose mess:

    ;; Use ijkl to denote ‚Üë‚Üê‚Üì‚Üí arrows.
    (global-set-key
     (kbd \"C-c w\")
     (pretty-hydra-define my/hydra/\\t\\tWindow\\ Adjustment
       ;; Omitting extra work to get an icon into the title.
       (:title \"\t\tWindow Adjustment\" :quit-key \"q\")
       (\"Both\"
        ((\"b\" balance-windows                 \"balance\")
         (\"s\" switch-window-then-swap-buffer  \"swap\"))
        \"Vertical adjustment\"
        ((\"h\" enlarge-window                  \"heighten\")
         (\"l\" shrink-window                   \"lower\"))
        \"Horizontal adjustment\"
        ((\"n\" shrink-window-horizontally      \"narrow\")
         (\"w\" enlarge-window-horizontally \"widen\" )))))

Is replaced by:

    ;; Use ijkl to denote ‚Üë‚Üê‚Üì‚Üí arrows.
    (my/defhydra \"C-c w\" \"\t\tWindow Adjustment\" windows
       :Both
       (\"b\" balance-windows                 \"balance\")
       (\"s\" switch-window-then-swap-buffer  \"swap\")
       :Vertical_adjustment
       (\"h\" enlarge-window                  \"heighten\")
       (\"l\" shrink-window                   \"lower\")
       :Horizontal_adjustment
       (\"n\" shrink-window-horizontally      \"narrow\")
       (\"w\" enlarge-window-horizontally     \"widen\"))"
  (let* ((name (intern (concat "my/hydra/"
                              (if (stringp title)
                                  title
                                (plist-get title :title)))))
         (icon-face `(:foreground ,(face-background 'highlight)))
         (iconised-title
          (concat
           (when icon-name
                 (require 'all-the-icons)
             (concat
              (all-the-icons-faicon (format "%s" icon-name) :face icon-face :height 1.0 :v-adjust -0.1)
              " "))
           (propertize title 'face icon-face))))
    `(global-set-key
      (kbd ,key)
      (pretty-hydra-define ,name
        ,(if (stringp title)
             (list :title iconised-title
                   :quit-key "q")
           title)
        ,(thread-last body
           (-partition-by-header #'keywordp)
           (--map (cons (s-replace "_" " " (s-chop-prefix ":" (symbol-name (car it)))) (list (cdr it))))
           (-flatten-n 1))))))
#+end_src
#+end_details
*** Textual Navigation ---‚ÄúLook Ma, no CTRL key!‚Äù
:PROPERTIES:
:CUSTOM_ID: Textual-Navigation-Look-Ma-no-CTRL-key
:END:

Basic movement commands ---without having to hold the control key!

=C-n= moves us to the next line, as it should; but it now /also/ let's us press
=n,p,f,‚Ä¶= for other movement commands. Unlisted keys insert themselves, whereas ~q~
close the pop-up menu.

#+begin_src emacs-lisp :tangle init.el
(my/defhydra "C-n" "\t\t\t\t\tTextual Navigation" arrows
   :Line
   ("n" next-line)
   ("p" previous-line)
   ("a" beginning-of-line)
   ("e" move-end-of-line)
   ("g" goto-line)
   :Word
   ("f" forward-word "Next")
   ("b" backward-word "Previous")
   ("{" org-backward-element "Next Element")
   ("}" org-forward-element "Previous Element")
   :Screen
   ("v" scroll-up-command "Scroll Down")
   ("V" scroll-down-command "Scroll Up")
   ("l" recenter-top-bottom "Center Page")
   ("r" move-to-window-line-top-bottom "Relocate Point")
   ("m" helm-imenu "Textual Menu"))
#+end_src
#  (:body-pre (next-line) :title "\t\t\t\t\tTextual Navigation" :quit-key "q")

/Along with the ‚Äúpop-up window‚Äù, this is a useful way to (re)learn about Emacs' features./

For ‚Äúkey-based navigation‚Äù, consider ‚ÄòEVIL-mode‚Äô or ‚ÄòSpacemacs‚Äô, or
[[#Letter-based-Navigation][ace-jump-mode]] (below).

Also ‚Ä¶
#+BEGIN_SRC emacs-lisp :tangle init.el
;; C-n, next line, inserts newlines when at the end of the buffer
(setq next-line-add-newlines t)
#+END_SRC

*** Window Navigation
:PROPERTIES:
:CUSTOM_ID: Window-Navigation
:END:
It can be difficult to remember the incantations to adjust
windows, so we can make a hydra to alleviate the trouble.
#+begin_src emacs-lisp :tangle init.el
;; Use ijkl to denote ‚Üë‚Üê‚Üì‚Üí arrows.
(my/defhydra "C-c w" "\t\tWindow Adjustment" windows
   :Both
   ("b" balance-windows                 "balance")
   ("s" switch-window-then-swap-buffer  "swap")
   :Vertical_adjustment
   ("h" enlarge-window                  "heighten")
   ("l" shrink-window                   "lower")
   :Horizontal_adjustment
   ("n" shrink-window-horizontally      "narrow")
   ("w" enlarge-window-horizontally     "widen"))

;; Provides a *visual* way to choose a window to switch to.
;; (use-package switch-window )
;; :bind (("C-x o" . switch-window)
;;        ("C-x w" . switch-window-then-swap-buffer))

;; Have a thick ruler between vertical windows
(window-divider-mode)
#+end_src
** Helpful Utilities & Shortcuts
:PROPERTIES:
:CUSTOM_ID: Helpful-Utilities-Shortcuts
:END:

Let's save a few precious seconds,
#+begin_src emacs-lisp :tangle init.el
;; change all prompts to y or n
(fset 'yes-or-no-p 'y-or-n-p)

;; Make RETURN key act the same way as ‚Äúy‚Äù key for ‚Äúy-or-n‚Äù prompts.
;; E.g., (y-or-n-p "Happy?") accepts RETURN as ‚Äúyes‚Äù.
(define-key y-or-n-p-map [return] 'act)

;; Enable all ‚Äòpossibly confusing commands‚Äô such as helpful but
;; initially-worrisome ‚Äúnarrow-to-region‚Äù, C-x n n.
(setq-default disabled-command-function nil)
#+end_src

** Quickly pop-up a terminal, run a command, close it ---and zsh
:PROPERTIES:
:CUSTOM_ID: Quickly-pop-up-a-terminal-run-a-command-close-it-and-zsh
:END:

/Pop up a terminal, do some work, then close it using the same command./

#+begin_src emacs-lisp
(use-package vterm) ;; Shell with a nearly universal compatibility with terminal applications üíù

;; "Intelligent" switching to vterm; eg creates it if it's not open, non-intrusive windowing, saves window setup, etc.
(use-package vterm-toggle
    :bind* ("C-t" . vterm-toggle))
#+end_src

*** Shell-pop                                              :Disabled:details:

[[https://github.com/kyagi/shell-pop-el][Shell-pop]] uses only one key action to work: If the buffer exists, and we're in
it, then hide it; else jump to it; otherwise create it if it doesn't exit.  Use
universal arguments, e.g., ~C-u 5 C-t~, to have multiple shells and the same
universal arguments to pop those shells up, but ~C-t~ to pop them away.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package shell-pop
  :custom
    ;; This binding toggles popping up a shell, or moving cursour to the shell pop-up.
    (shell-pop-universal-key "C-t")

    ;; Percentage for shell-buffer window size.
    (shell-pop-window-size 30)

    ;; Position of the popped buffer: top, bottom, left, right, full.
    (shell-pop-window-position "bottom")

    ;; Please use an awesome shell.
    (shell-pop-term-shell "/bin/zsh"))
#+END_SRC
# There are also a number of hooks for shell-pop. E.g., to unconditionally kill the buffer afterwards.

*** Oh My Zsh                                                       :details:
Now that we have access to quick pop-up for a shell, let's get a pretty and
practical shell: [[https://www.howtogeek.com/362409/what-is-zsh-and-why-should-you-use-it-instead-of-bash/][zsh]] along with the [[https://ohmyz.sh/][Oh My Zsh]] community configurations give us:

1. ~brew install zsh~
2. ~sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"~

   This installs everything ^_^

#+BEGIN_SRC emacs-lisp
;; Be default, Emacs please use zsh
;; E.g., M-x shell
(unless noninteractive (setq shell-file-name "/bin/zsh"))
#+END_SRC

Out of the box, zsh comes with
+ git support; the left side indicates which branch we're on and
  whether the repo is dirty, ‚úó.
+ Recursive path expansion; e.g., ~/u/lo/b TAB~ expands to ~/usr/local/bin/~
+ Over [[https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins#apache2-macports][250+ Plugins]] and [[https://github.com/ohmyzsh/ohmyzsh/wiki/Themes][125+ Themes]] that are enabled by simply
  mentioning their name in the ~.zshrc~ file.

The defaults have been good enough for me, for now ---as all else is achieved
via Emacs ;-)

*** tldr

Also, there's the [[https://tldr.sh/][tldr]] tool which aims to be like terse manuals for
commandline-tools in the style of practical example uses cases: ~tldr ùí≥~ yields a
number of ways you'd actually use ùí≥. ( In Emacs, [[kbd:C-t tldr ùí≥ ‚ü®return‚ü©]]. )
#+BEGIN_SRC emacs-lisp
(system-packages-ensure "tldr")
#+END_SRC

** hr: [[https://github.com/LuRsT/hr][A horizontal for your terminal]] :relocate:
:PROPERTIES:
:CUSTOM_ID: hr-https-github-com-LuRsT-hr-A-horizontal-for-your-terminal
:END:

When working in the terminal, at least in my day job, it can be helpful to
visually segregate large chunks of output. With the ~hr~ command, I can run ~hr
'output5`~, for example, to have the same the string /output5/ repeated horizontal
across one line of my terminal.  We can also just run ~hr~ which is the same as ~hr
'#'~. Finally, you can also run =hr '-#-' '-' '-#-'= to have 3 horizontal lines and
more generally =hr p‚ÇÅ p‚ÇÇ ‚Ä¶ p‚Çô= will produce /n/-many horizontal lines with the
$i^{th}$-line having pattern =p·µ¢=.

#+begin_src emacs-lisp
(system-packages-ensure "hr") ;; ‚âà brew install hr
#+end_src

** TODO Summary of Utilities Provided
:PROPERTIES:
:CUSTOM_ID: Summary-of-Utilities-Provided
:END:

Since I'm using ~use-package~, I can invoke ~M-x describe-personal-keybindings~ to see what key bindings I've defined.
Since not all my bindings are via ~use-package~, it does not yet cover all of my bindings.

We could run ~C-h b~ to see /all/ our bindings ---or ~M-x describe-personal-bindings~
to see only those set throughout our init file.
#+begin_src emacs-lisp :tangle no
(use-package helm-descbinds
  :bind ("C-h b" . helm-descbinds))
#+END_SRC

Finally, we can observe which features are active in our current Emacs with,
#+begin_src emacs-lisp :tangle no :tangle no
(message "Features: %s" features)
#+end_src

# List of installed packages: (mapcar 'car package-alist)
** ‚ÄúC-x 2‚Äù and ‚ÄúC-x 3‚Äù now create a new window horizontally/vertically and send cursor there
:PROPERTIES:
:CUSTOM_ID: C-x-2-and-C-x-3-now-create-a-new-window-horizontally-vertically-and-send-cursor-there
:END:
 #+begin_src emacs-lisp :tangle no
;; When we split open a new window, we usually want to jump to the new window.
(advice-add #'split-window-below :after (lambda (&rest _) (other-window 1)))
(advice-add #'split-window-right :after (lambda (&rest _) (other-window 1)))
 #+end_src

** Get Shell history within Emacs via Completing Read with Helm
:PROPERTIES:
:CUSTOM_ID: Get-Shell-history-within-Emacs-via-Completing-Read-with-Helm
:END:
Note that ~C-r~ in a terminal gets you to search shell history, here's how to do
it from Emacs in a more interactive fashion.
#+begin_src emacs-lisp
;; Usage: M-x helm-shell-history
(use-package helm-shell-history
  :config
  (setq helm-shell-history-file "~/.zsh_history")
  (bind-key "M-r" #'helm-shell-history shell-mode-map))
#+end_src

** Launch macOS apps with Helm
:PROPERTIES:
:CUSTOM_ID: Launch-macOS-apps-with-Helm
:END:

# In addition to apps, it can also launch system preferences, just like Alfred.
#+begin_src emacs-lisp
;; MacOS's default ‚åò-SPC does not let us do either of the following scenarios:
;; Usage: M-x helm-osx-app RET preferences bat RET ‚áí See battery preferences settings
;; Another Usage: M-x helm-osx-app RET ‚áí See all apps, maybe we forgot about one of them from an install a long time ago, and open it
;; See https://www.alfredapp.com/ as an alternative (for non-Emacs users), which can do more.
(use-package helm-osx-app)
;; For non-MacOS, we can use [[https://github.com/d12frosted/counsel-osx-app][counsel-osx-app]], whose name is misleading.
#+end_src

* Literate Programming
:PROPERTIES:
:CUSTOM_ID: Literate-Programming
:END:

Org-mode lets us run chunks of code anywhere, then feed their outputs to other
chunks of code in /possibly different/ programming languages: Org is a
meta-(programming language).

Importantly, this means we can write text and whenever we need the result of
some computation, we can place it there and then and only request its result
appear in PDF/HTML export. The result is a single document.

( There is the [[https://github.com/minad/org-modern][org-modern]] package, which provides a modern look-and-feel: It
makes Org look less like a markup and more like a word editor. Nice stuff. )

** High Speed Literate Programming
:PROPERTIES:
:CUSTOM_ID: High-Speed-Literate-Programming
:END:

*** Manipulating Sections
:PROPERTIES:
:CUSTOM_ID: Manipulating-Sections
:END:

#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC

This enables the [[http://notesyoujustmightwanttosave.blogspot.com/2011/12/org-speed-keys.html][Org Speed Keys]] so that when the cursor is at the beginning of a
headline, we can perform fast manipulation & navigation using the standard Emacs
movement controls, such as:
+ [[kbd:#]] toggle ~COMMENT~-ing for an org-header.
+ [[kbd:s]] toggles [[doc:narrow-to-region][‚Äúnarrowing‚Äù]] to a subtree; i.e., hide the rest of the document.

  If you narrow to a subtree then any export, kbd:C-c_C-e, will joyously only
  consider the narrowed detail.
+ [[kbd:u]] for going to upwards to parent heading
  * [[kbd:i]] insert a new same-level heading below current heading.
+ [[kbd:c]] for cycling structure below current heading, or ~C~ for cycling global structure.
+ [[kbd:w]] refile current heading; options list pops-up to select which heading to move
  it to. Neato!
  - [[kbd:g]] to go to another heading, without refiling anything.
    #+begin_src emacs-lisp
;; When refiling, only show me top level headings [Default]. Sometimes 2 is useful.
;; When I'm refiling my TODOS, then give me all the freedom.
(setq org-refile-targets '((nil :maxlevel . 1)
                           (org-agenda-files :maxlevel . 9)))

;; Maybe I want to refile into a new heading; confirm with me.
(setq org-refile-allow-creating-parent-nodes 'confirm)

;; Use full outline paths for refile targets
;; When refiling, using Helm, show me the hierarchy paths
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path 'file-path)
  #+end_src
+ kbd:n/p for next/previous /visible/ heading.
+ kbd:f/b for jumping forward/backward to the next/previous /same-level/ heading.
+ kbd:D/U move a heading down/up.
+ kbd:L/R recursively promote (move leftwards) or demote (more rightwards) a heading.
+ kbd:I/O clock In/Out to the task defined by the current heading.
  - Keep track of your work times!
  - [[kbd:v]] view agenda.
+ kbd:t/,/:/e to add a TODO state, priority level, tag, or effort estimate
  * kbd:1/2/3 to mark a heading with priority, highest to lowest.
+ [[kbd:^]] sort children of current subtree; brings up a list of sorting options.
+ kbd:k/@/a to kill or mark or archive the current subtree
+ [[kbd:o]] to open a link mentioned in the subtree then go to the link; a pop-up of
  links appears.

We can add our own speed keys by altering the doc:org-speed-commands association
list variable; e.g.,
#+begin_src emacs-lisp
;; TODO FIXME Crashes upon startup.
(when nil (add-to-list 'org-speed-commands (cons "P" #'org-set-property)))
;; Use ‚Äò:‚Äô and ‚Äòe‚Äô to set tags and effort, respectively.
#+end_src

#  To see the commands available, execute  ~M-x org-speed-command-help~.
| ‚áí Moreover, [[kbd:?]] to see a complete list of keys available. ‚áê |

*** Seamless Navigation Between Source Blocks
:PROPERTIES:
:CUSTOM_ID: Seamless-Navigation-Between-Source-Blocks
:END:

The ‚Äúsuper key‚Äù ---aka the command or windows key--- can be used to jump to the
previous, next, or toggle editing org-mode source blocks.
#+begin_src emacs-lisp
;; Overriding keys for printing buffer, duplicating gui frame, and isearch-yank-kill.
;;
(require 'org)
(use-package emacs
  :bind (:map org-mode-map
              ("s-p" . org-babel-previous-src-block)
              ("s-n" . org-babel-next-src-block)
              ("s-e" . org-edit-special)
              :map org-src-mode-map
              ("s-e" . org-edit-src-exit)))
#+end_src

#                       Interestingly, ~s-l~ is ‚Äúgoto line‚Äù.

Note that we could have bound kbd:‚åò+e to doc:org-edit-src-code /
doc:org-edit-src-exit, but instead chose the more general doc:org-edit-special
since, well, look at the tooltip documentation: This allows us to use kbd:‚åò+e to
‚Äòe‚Äôdit all kinds of Org entities ---including footnotes and export blocks.  (
Footnotes can be quickly produced with doc:org-footnote-new. )

*** Modifying [[kbd:‚ü®return‚ü©]]
:PROPERTIES:
:CUSTOM_ID: Modifying-return
:END:

+  [[kbd:C-‚ü®return‚ü©]] ,  [[kbd:C-S-‚ü®return‚ü©]]  make a new heading where the latter marks it as a ~TODO~.
+ By default  [[kbd:M-‚ü®return‚ü©]] makes it easy to work with existing list items, headings,
  tables, etc by creating a new item, heading, etc.

Usually we want a newline then we indent, let's make that the default.
   #+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook '(lambda ()
   (local-set-key (kbd "<return>") 'org-return-indent))
   (local-set-key (kbd "C-M-<return>") 'electric-indent-just-newline))
#+END_SRC

   Notice that I've also added another kind of return, for when I want to
   break-out of the indentation approach and start working at the beginning of
   the line.

In summary:
| key              | method                                      | behaviour                         |
|------------------+---------------------------------------------+-----------------------------------|
| [[kbd:‚ü®return‚ü©]]     | doc:org-return-indent                       | Newline with indentation          |
| [[kbd:M-‚ü®return‚ü©]]   | doc:org-meta-return                         | Newline with new org item         |
| [[kbd:C-M-‚ü®return‚ü©]] | doc:electric-indent-just-newline            | Newline, cursor at start          |
| [[kbd:C-‚ü®return‚ü©]]   | doc:org-insert-heading-respect-content      | New heading /after/ current content |
| [[kbd:C-S-‚ü®return‚ü©]] | doc:org-insert-todo-heading-respect-content | Ditto, but with a ~TODO~ marker     |

*** COMMENT ¬† ~C-a,e,k~ and Yanking of sections               :Does_not_work:
:PROPERTIES:
:CUSTOM_ID: C-a-e-k-and-Yanking-of-sections
:END:

On an org-heading, kbd:C-a goes to /after/ the star, heading markers.  To use
speed keys, run kbd:C-a_C-a to get to the star markers.

kbd:C-e goes to the end of the heading, not including the tags.
#+begin_src emacs-lisp
(setq org-special-ctrl-a/e t)
#+end_src

kbd:C-k no longer removes tags, if activated in the middle of a heading's name.
#+begin_src emacs-lisp
(setq org-special-ctrl-k t) ;; MA: Does not work ‚Ä¶!
#+end_src

When you yank a subtree and paste it alongside a subtree of depth /‚Äòd‚Äô/, then the
yanked tree's depth is adjusted to become depth /‚Äòd‚Äô/ as well.  If you don't want
this, then refile instead of copy-pasting.
#+begin_src emacs-lisp
(setq org-yank-adjusted-subtrees t)
#+end_src
** Executing code from ~src~ blocks
:PROPERTIES:
:CUSTOM_ID: Executing-code-from-src-blocks
:END:

For example, to execute a shell command in Emacs, write a ~src~ with a shell
command, then ~C-c c-c~ to see the results.  Emacs will generally query you to
ensure you're confident about executing the (possibly dangerous) code block;
let's stop that:
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Seamless use of babel: No confirmation upon execution.
;; Downside: Could accidentally evaluate harmful code.
(setq org-confirm-babel-evaluate nil)

;; Never evaluate code blocks upon export and replace results when evaluation does occur.
;; For a particular language ùë≥, alter ‚Äòorg-babel-default-header-args:ùë≥‚Äô.
(setq org-babel-default-header-args
      '((:results . "replace")
        (:session . "none")
        (:exports . "both")
        (:cache .   "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        (:eval . "never-export")))
#+END_SRC


# A worked out example can be obtained as follows: ~<g TAB~ then ~C-c C-C~ to make a nice
# simple graph ---the code for this is in the next section.

Some initial languages we want org-babel to support:
#+BEGIN_SRC emacs-lisp
(defvar my/programming-languages
  '(emacs-lisp shell python haskell
      ;; rust ;; FIXME: There's an error wrt ob-rust: Cannot open load file: No such file or directory, ob-rust
    ruby ocaml dot latex org js css
               sqlite C) ;; Captial ‚ÄúC‚Äù gives access to C, C++, D
  "List of languages I have used in Org-mode, for literate programming.")

;; Load all the languagues
;; FIXME: There's an error wrt ob-rust: Cannot open load file: No such file or directory, ob-rust
(ignore-errors (cl-loop for lang in my/programming-languages
                        do (require (intern (format "ob-%s" lang)))))
;;
(org-babel-do-load-languages
 'org-babel-load-languages
 (--map (cons it t) my/programming-languages))

;; Preserve my indentation for source code during export.
(setq org-src-preserve-indentation t)

;; The export process hangs Emacs, let's avoid this.
;; MA: For one reason or another, this crashes more than I'd like.
;; (setq org-export-in-background t)
#+END_SRC

More languages can be added using doc:add-to-list.

** Executing all =#+name: startup-code= for local configurations
:PROPERTIES:
:CUSTOM_ID: Executing-all-name-startup-code-for-local-configurations
:END:

Sometimes my Org-files contain configurations that are local to the file,
so I name all such =src= blocks =#+name: startup-code= and place =# -*- eval: (my/execute-startup-blocks) -*-= at the top of the file so that such
blocks are evaluated when the file opens up.
- The =-*- ... -*-= notation is for making local configurations.
- Use =M-x add-file-local-variable-prop-line= to have them inserted interactively.
#+begin_src emacs-lisp
(defun my/execute-startup-blocks ()
  "Execute all startup blocks, those named ‚Äòstartup-code‚Äô.

I could not use ORG-BABEL-GOTO-NAMED-SRC-BLOCK since it only goes
to the first source block with the given name, whereas I'd like to
visit all blocks with such a name."
  (interactive)
  (save-excursion
    (goto-char 0)
    (while (ignore-errors (re-search-forward "^\\#\\+name: startup-code"))
      (org-babel-execute-src-block))))
#+end_src

The following setup enables this feature in a safe fashion ---e.g., we do not
want to avoid evaluating a random person's potentially dangerous code when we
only want to look at it.
#+BEGIN_SRC emacs-lisp
;; Please ask me on a file by file basis whether its local variables are ‚Äòsafe‚Äô
;; or not. Use ‚Äò!‚Äô to mark them as permanently ‚Äòsafe‚Äô to avoid being queried
;; again for the same file.
(setq enable-local-variables t)
#+END_SRC

I have been using a combination of =(org-babel-goto-named-src-block ‚ãØ)= in
multi-line local-variable declarations ---=M-x add-file-local-variable-prop=---
for a while in many files using a dedicated =* footer :noexport:= section, but
this new approach frees from having such sections and instead to having a single
line at the top of the file. Moreover, being at the top of the file, such a line
is a nice *[[green:‚Äòin your face‚Äô]]* reminder that there is local configuration that
should have been loaded.
# - E.g., this init file has local configuration for making the corresponding
#  =init.el= file and generating the =README.org= file.
** TODO COMMENT Snippets ---Template Expansion & Completion
:PROPERTIES:
:CUSTOM_ID: Snippets-Template-Expansion
:END:

It is common that there is a sequence of text that we tend to repeat
often, possibly with a name or some other parameter altered.
Such a ‚Äòsnippet‚Äô could be written once then provided by a simple
Lisp insert command with the parameters being queried. Luckily, others
have written such pleasant utilities.

Besides snippets, there are words that we may want to repeat often but it can be
tedious to write them out in full. As such, we employ *[[green: word completion]]*;
which we also use to expand our snippets.
# For instance, I knew someone who writes ‚ÄòU‚Äô all over the place
# since the word ‚Äúuniverse‚Äù is too long to write
# and Emacs doesn't come with word completion.

*** Word Completion and Documentation Pop-ups
:PROPERTIES:
:CUSTOM_ID: Word-Completion
:END:

Let's enable [[https://company-mode.github.io/][‚Äúcomplete anything‚Äù mode]] ---it ought to start in half a second and
only need two characters to get going, which means word suggestions are provided
and so I need only type partial words then tab to get the full word!

#+begin_src emacs-lisp
(use-package company

  :config
  (global-company-mode 1)
  (setq ;; Only 2 letters required for completion to activate.
   company-minimum-prefix-length 2

   ;; Search other buffers for compleition candidates
   company-dabbrev-other-buffers t
   company-dabbrev-code-other-buffers t

   ;; Show candidates according to importance, then case, then in-buffer frequency
   company-transformers '(company-sort-by-backend-importance
                          company-sort-prefer-same-case-prefix
                          company-sort-by-occurrence)

   ;; Flushright any annotations for a compleition;
   ;; e.g., the description of what a snippet template word expands into.
   company-tooltip-align-annotations t

   ;; Allow (lengthy) numbers to be eligible for completion.
   company-complete-number t

   ;; M-‚ü™num‚ü´ to select an option according to its number.
   company-show-numbers t

   ;; Show 10 items in a tooltip; scrollbar otherwise or C-s ^_^
   company-tooltip-limit 10

   ;; Edge of the completion list cycles around.
   company-selection-wrap-around t

   ;; Do not downcase completions by default.
   company-dabbrev-downcase nil

   ;; Even if I write something with the ‚Äòwrong‚Äô case,
   ;; provide the ‚Äòcorrect‚Äô casing.
   company-dabbrev-ignore-case nil

   ;; Immediately activate completion.
   company-idle-delay 0)

  ;; Use C-/ to manually start company mode at point. C-/ is used by undo-tree.
  ;; Override all minor modes that use C-/; bind-key* is discussed below.
  (bind-key* "C-/" #'company-manual-begin)

  ;; Bindings when the company list is active.
  :bind (:map company-active-map
              ("C-d" . company-show-doc-buffer) ;; In new temp buffer
              ("<tab>" . company-complete-selection)
              ;; Use C-n,p for navigation in addition to M-n,p
              ("C-n" . (lambda () (interactive) (company-complete-common-or-cycle 1)))
              ("C-p" . (lambda () (interactive) (company-complete-common-or-cycle -1)))))

;; It's so fast that we don't need a key-binding to start it!
#+end_src
Note that ~M-/~ goes through a sequence of completions ---and ~C-/~ manually begins
company mode at point.  Besides the arrow keys, we can also use ~M-~ with ~n, p~ to
navigate the options /or/ use ~C-s~ to search the list of suggestions.

+ Company backends are available as separate packages.
+ Note that [[https://github.com/company-mode/company-mode/issues/360][by default]] company mode does not support completion for phrases
  containing hyphens ---this can be altered, if desired.

Let's add a test for some basic features of completition:
#+begin_src emacs-lisp :tangle init-test.el
(ert-deftest company-works-as-expected-in-text-mode ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Text*")

  ;; Ensure we have a clear buffer, and enter some text. (Namely, Python code).
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  ;; Completion anything mode is enabled by default.
  (should company-mode)

  ;; There are 2 completion candidates: The two we wrote.
  (insert "\n fi")
  (company-manual-begin) ;; i.e., C-/
  (should (equal company-candidates '("fierce" "first")))

  ;; [fi ‚Ü¶ fierce] Default option is the most recently matching written word.
  (insert "\n fi")
  (execute-kbd-macro (kbd "C-/ <return>"))
  (should (looking-back "fierce"))

  ;; [fi ‚Ü¶ first] We can use M-2 to select the candidate ‚Äúfirst‚Äù
  (insert "\n fi")
  (execute-kbd-macro (kbd "C-/ M-2"))
  (should (looking-back "first"))

  (kill-buffer))

;; Let's enter Python mode and see how things change

(ert-deftest company-shows-keywords-alongside-completions-alphabetically ()
  :tags '(company)
  (switch-to-buffer "*TESTING COMPANY MODE ~ Python*")
  (python-mode)

  ;; Ensure we have a clear buffer, and enter some text. (Namely, Python code).
  (erase-buffer)
  (insert "\n def first(x): pass")
  (insert "\n def fierce(a, b): pass")

  ;; There are 3 completion candidates: The two we wrote, & the third being a Python keyword.
  (insert "\n fi")
  (company-manual-begin)
  (should (equal company-candidates '("fierce" "first" #("finally" 0 7 (company-backend company-keywords)))))

  ;; Candidates are shown alphabetically: M-2 yields ‚Äúfinally‚Äù.
  (execute-kbd-macro (kbd "C-g C-/ M-2")) ;; Quit and restart the completion, to get to starting position, then M-2.
  (should (looking-back "finally"))

  (kill-buffer))

#+end_src

We do ~M-: (ert '(tag company))~ to run these specific tests; better would be to
call these (and all) tests with a nifty name:
#+begin_src emacs-lisp
(defun my/ensure-machine-works-as-expected ()
  "Run all my personal tests to ensure Emacs behaves as I expect it to."
  (interactive)
  (load-file "init-test.el")
  (ert t)
  (ert-results-pop-to-timings))
#+end_src

Anyhow, besides boring word completion, let's add support for [[https://github.com/dunn/company-emoji][emojis]].
#+begin_src emacs-lisp
(use-package company-emoji
  :config (add-to-list 'company-backends 'company-emoji))
#+end_src

For example: ü•û üíª üêµ ‚úâÔ∏èüòâ üê¨ üåµ.

‚û°Ô∏èOn a new line, write ~:~ then any letter to have a tool-tip appear.
All emoji names are lowercase. ‚óÄ

+ On MacOS, ~C-‚åò-SPC~ brings up an emoji picker, where one drags desired emojis to
  textual areas.
+ [[https://gist.github.com/rxaviers/7360908][Here]] is a list of emoji ---all supported by Github.

The libraries ~emojify~ and ~emojify-logos~ provides cool items like =:haskell:
:emacs: :org: :ruby: :python:=.  Unfortunately they do not easily export to html
with org-mode, so I'm not using them.
:Alternatives:
#+BEGIN_SRC emacs-lisp
(use-package emojify)



(-let [font-for-emojis "Noto Color Emoji"]
  (if (member font-for-emojis (font-family-list))
      (set-fontset-font
       t 'symbol (font-spec :family font-for-emojis) nil 'prepend)
    (message-box "Musa: Install the font!")
    ;; Download font @ https://fonts.google.com/noto/specimen/Noto+Color+Emoji
    ;; Double-click on the ttf file then select ‚Äúinstall‚Äù to have it installed on your system
    ))
(setq emojify-display-style 'unicode) ;; unicode is the way to go!


(setq emojify-emoji-styles '(unicode))

(global-emojify-mode 1) ;; Will install missing images, if need be.

#+END_SRC

(use-package emojify-logos
:after emojify)

For example,
#+begin_src emacs-lisp :tangle no
 :emacs: :haskell: :org: :c: :wink: :ruby: :python: :c: :html5:
#+end_src
Yields :emacs: :haskell: :org: :c: :wink: :ruby: :python: :c: :html5:. Run ~(emojify-insert-emoji)~ to see more.

Rather than remember all of these, let's install [[https://github.com/syohex/emacs-ac-emoji][ac-emoji]]
for completion of emoji names.

(use-package ac-emoji
  :init (ac-emoji-setup)
)
:End:

**** Documentation Pop-Ups
:PROPERTIES:
:CUSTOM_ID: Documentation-Pop-Ups
:END:

Let [[https://github.com/expez/company-quickhelp][documentation pop-up]] when we pause on a completion.
+ For example, open an ELisp buffer and enter =s-j= and see a list of completions, including =s-join=,
  pause for a sec and a documentation tooltip appears.
This is very useful when editing in a particular coding language, say via
~C-c '~ for org-src blocks. Or when working in a language-specific buffer.
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
  :config
  (setq company-quickhelp-delay 0.1)
  (company-quickhelp-mode)
  ;; Especially when learning a new language, looking up its definition/docstring can be helpful.
  ;; Note: I use ‚ÄúM-!‚Äù everywhere else to mean ‚Äúdefine word at point‚Äù.
  )

;; TODO: Consider adding a hook to company mode to immediately call (company-quickhelp--show), in prog-modes
#+END_SRC

This ~M-!~ is from plain ~company~, but I wanted to define it here beside the
quickhelp setup since they're related utilities.

*** Intro to Snippets
:PROPERTIES:
:CUSTOM_ID: Intro-to-Snippets
:END:

A *snippet, template, mechanism* is a tool that when you press some keystrokes
inserts some text, possibly with some fields (‚Äòblanks‚Äô) to fill in.  Possibly
interesting read:
+ [[https://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/index.html][Snippet Expansion With Yasnippet: Save Yourself Keystrokes and Headaches]]
  ---a nice before introduction to Yasnippet (‚ÄúYet another snippet‚Äù)
+ [[https://jpace.wordpress.com/2012/10/20/tweaking-emacs-snippets/][Tweaking Emacs: Snippets]] ---a brief article on using snippets for uniformity
  across languages and to mitigate verbosity of weak languages (i.e., those
  without macros).

--------------------------------------------------------------------------------

[[http://joaotavora.github.io/yasnippet/snippet-development.html][Yasnippet]] is a pleasant utility for template expansion with the alluring
feature to allow arbitrary Lisp code to be executed during expansion.
The declaration of templates is verbose, requiring a particular file
hierarchy, as such I utilise [[https://github.com/Kungsgeten/yankpad][Yankpad]] which allows me to employ
an Org-mode approach: Each template corresponds to an org heading of
the form ~Key:Words:For:Expansion:Here: name of snippet here~ and the
template body is then the body of the org heading.
Any of ~Key, Words, For, Expansion, Here~ will rewrite into the body
of the org tree. This is much more terse, and I even don't bother
with that; instead preferring to tangle my templates using yankpad
as a mere interface. It is important to note that Yankpad also provides
features that are not in Yassnippet, such as allowing arbitrary language
code to be executed ---one simply uses an org-src block!

| [[https://www.philnewton.net/blog/exploring-emacs-yasnippet/][Here]] is a nice self-contained tutorial.                                                  |
| Also, [[https://www.reddit.com/r/emacs/comments/o282fq/yasnippet_snippetstemplating_introductiontutorial/][YASnippet snippets/templating Introduction/Tutorial ‚Äî Straightforward Emacs: emacs]] |

There can only be one major completion backend for any mode, but
other backends can serve as secondary ones. Here's a function to
make ~company-yankpad~ a secondary of all existing backends.
#+begin_src emacs-lisp
;; Add yasnippet support for all company backends
;;
(cl-defun my/company-backend-with-yankpad (backend)
  "There can only be one main completition backend, so let's
   enable yasnippet/yankpad as a secondary for all completion
   backends.

   Src: https://emacs.stackexchange.com/a/10520/10352"

  (if (and (listp backend) (member 'company-yankpad backend))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yankpad))))
#+end_src

#+begin_src emacs-lisp
;; Yet another snippet extension program
(use-package yasnippet
  :config
    (yas-global-mode 1) ;; Always have this on for when using yasnippet syntax within yankpad
    ;; respect the spacing in my snippet declarations
    (setq yas-indent-line 'fixed))

;; Alternative, Org-based extension program
(use-package yankpad

  :config
    ;; Location of templates
    (setq yankpad-file "~/.emacs.d/yankpad.org")

    ;; Ignore major mode, always use defaults.
    ;; Yankpad will freeze if no org heading has the name of the given category.
    (setq yankpad-category "Default")

    ;; Load the snippet templates ---useful after yankpad is altered
    (yankpad-reload)

    ;; Set company-backend as a secondary completion backend to all existing backends.
    (setq company-backends (mapcar #'my/company-backend-with-yankpad company-backends)))
#+end_src

With these settings, along with the ~company~ backend, I may type a keyword then
kbd:TAB it into expansion.

Yankpad requires we have an org file that contains our templates, so we /tangle/
such a file ~~/.emacs.d/yankpad.org~, and have all of our templates be globally
accessible. Here is the start of my file:
#+BEGIN_SRC org :tangle "~/.emacs.d/yankpad.org"  :comments none
,#+Description: This is file is generated from my init.org; do not edit.

,* Default                                           :global:
#+end_src

#+begin_details Fully discussed example: Using the clipboard for Org-links
Here's an example of a common template I perform by hand ---no more!  I have the
expected habit of /copying (to clipboard)/ a URL from someplace then forming a
link to it by writing ~[[URL] [description]]~, since the URL & syntax are already
known, let's expand those and place the cursour at the only unknown ---the
description.
#+begin_src org :tangle "~/.emacs.d/yankpad.org" :comments none
,** my_org_insert_link: cleverly insert a link copied to clipboard
 [[${1:`(clipboard-yank)`}][$2]] $0
#+end_src

What's going on here? ( The above, verbatim: ~[[${1:`(clipboard-yank)`}][$2]] $0~. )
0. This template is expanded with the keyword ~my-org-insert-link~, then kbd:TAB.
1. The cursour lands at position ~$1~, which has default text being the result
  of evaluating ~(clipboard-yank)~.
  # I've ‚Äòdocumented‚Äô this default as being the url.

  # If I leave out the ~$(clipboard-yank)~ part, the default would simply be ~url~ pasted in.

  We may evaluate Lisp code anywhere by enclosing it in backticks.

  # `(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`

2. If we're satisfied with the current field, we simply tab to the next field.
   Otherwise, we simply write text ---which overwrites the default text.

3. After enough tabbing we complete the template and the cursour lands
   at position ~$0~.

‚ü™ Having default or mirrored text for ~$2~ would not allow me to see the URL
field, lest I wish to change it or at least confirm it's what I want.
Hence, the ~$2~ field has no default. ‚ü´

Let's overwrite the usual way to insert such links, via ~C-c C-l~.
#+BEGIN_SRC emacs-lisp
(cl-defun org-insert-link ()
  "Makes an org link by inserting the URL copied to clipboard and
  prompting for the link description only.

  Type over the shown link to change it, or tab to move to the
  description field.

  This overrides Org-mode's built-in ‚Äòorg-insert-link‚Äô utility;
  whence C-c C-l uses the snippet."
  (interactive)
  (insert "my_org_insert_link")
  (yankpad-expand))
#+END_SRC
#+end_details

/Warning!/ Snippet names cannot have hypens in them ---in this setup at least.

The [[http://joaotavora.github.io/yasnippet/snippet-development.html][Yasnippet manual]] is an accessible read, as is the [[https://github.com/Kungsgeten/yankpad][Yankpad manual]], and
 showcases many other utilities; such as having certain snippets being
 enabled only in particular modes or on demand. Of note is that field ~$n~ can be
 accessed in code with the invocation ~(yas-field-value n)~.

Incidentally, I used this snippet setup to [[https://www.youtube.com/watch?v=NYOOF9xKBz8&feature=youtu.be][demo]] the idea of repetitious code in
grouping constructs within dependently-typed languages, which was accepted and
led to my doctoral research on a [[https://alhassy.github.io/next-700-module-systems/][‚Äòdo it yourself module system‚Äô]].

The rest of this section is other templates, not much for now,
concluding with actually loading this snippet mechanism globally.

         The remaining subsections discuss contents of my yankpad file.

*** Org-mode Templates ---A reason I ‚Äúgenerate‚Äù templates ;)
:PROPERTIES:
:CUSTOM_ID: Org-mode-Templates-A-reason-I-generate-templates
:END:

This produces a pop-up list of org-mode block types, if ~src~ is selected, then a
list of my commonly used languages pops-up.  Alternatively, ignore the pop-up
menu and write any block or language name.
#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** begin: produce an org-mode block
,#+begin_${1:environment$(let*
    ((block '("src" "example" "quote" "verse" "center" "latex" "html" "ascii"))
     (langs '("c" "emacs-lisp" "lisp" "latex" "python" "sh" "haskell" "plantuml" "prolog"))
     (type (yas-choose-value block)))
     (concat type (when (equal type "src") (concat " " (yas-choose-value langs)))))}
 $0
,#+end_${1:$(car (split-string yas-text))}
#+end_src
In this case, ~yas-text~ is equivalent to (~yas-field-value 1)~;
it generally refers to the value of the field being mirrored with ~${n: ‚ãØyas-text‚ãØ}~.

However, going through pop-ups takes precious time ---besides being slightly annyoing.
Let's introduce a template for my most utilised kind of language blocks.
#+begin_example
,** s_org: src block for org
,#+begin_src org
$0
,#+end_src
#+end_example

However, doing this for each language I want is a waste of time and textual
space. Why? *The purpose of templates is to reduce repetition,* yet the above
block would be repeated with only 3 parts ‚Äòunknown‚Äô: The expansion keyword, the
description, and the org-mode source block name.  Whence, the template /text/ is
generated by the following basic loop ---whose source block is named
~my-org-lang-templates~.
#+name: my-org-lang-templates
#+begin_src emacs-lisp :tangle no :wrap "src org :tangle ~/.emacs.d/yankpad.org" :exports code :results replace drawer
;; We make an org BLOCK snippet template for each LANG the user has declared.
;;
(cl-loop for (shortcut block takes-language-argument? default-text)
      in '(("s_" "src" t)
           ("is_" "inline source" t)  ;; Treated specially below
           ("e_" "example" t)
           ("q_" "quote")
           ("v_" "verse")
           ("c_" "center")
           ("ex_" "export") ;; only HTML and LATEX
           ;; https://alhassy.github.io/org-special-block-extras/#Summary
           ("p_"  "parallel" nil "\n$0\n#+columnbreak:\n")
           ("d_"  "details"  nil "${1:title}\n$0")
           ("ed_" "edcomm"   nil  "${1:editor}\n$0")
           ("doc_" "documentation" nil "${1: mandatory entry name}\n$0")
           ("def_" "latex-definitions"))
      for languages = (if takes-language-argument?
                          (-cons* "org" "agda2" "any" ;; Extra ‚Äòlanguages‚Äô
                                  ;; Also include whatever languages we've loaded for literate programming.
                                  (--map (symbol-name (car it)) org-babel-load-languages))
                        '("")) ;; The ‚Äúempty language‚Äù
      concat (cl-loop for lang in languages
                   for key         = (concat shortcut
                                       (if (s-blank? lang) block lang))
                   for description =  (if (s-blank? lang)
                                          block
                                        (concat
                                         block " for " lang))
                   concat (if (equal "is_" shortcut)
                              (concat "\n** " key ": " description
                                      "\nsrc_" lang "[:exports code]{$1} $0")
                            (concat "\n** " key ": " description
                                    "\n#+begin_" block " " lang
                                    (or default-text "\n$0")
                                    "\n#+end_" block "\n"))))
#+end_src

The /resulting text/ of this block, generated below, is tangled to our yankpad by
utilising a [[https://www.gnu.org/software/emacs/manual/html_node/org/Noweb-reference-syntax.html][noweb]] source block invocation. An example of the resulting text is
the above ~s_org~ block. The result is (last I checked) *83* template expansions
---that would have been a bit much to write by hand.
#+begin_example org
,#+begin_src org :tangle "~/.emacs.d/yankpad.org" :noweb yes
<<my-org-lang-templates()>>
,#+end_src
#+end_example
# ActuallyDoIt
#+begin_src org  :tangle "~/.emacs.d/yankpad.org" :noweb yes :comments none
<<my-org-lang-templates()>>
#+end_src

# The ‚Äú:eval never-export‚Äù means that this block is never tangled on document
# export, C-c C-e.

#+begin_box
Now ~s_~, due to company mode, brings up a list of languages that I can then
scroll down through, then ‚Äúenter‚Äù upon to expand. Moreover, the prefix ~s_~ means
that the key is mostly irrelevant, since I needn't remember it because
company-mode immediately lists possible completions /along/ with the /descriptions/
for the snippets. Likewise for examples with ~e_~ or quotes with ~q_~.  Super neat
stuff :-)

                 Ain't this reminiscent of meta-programming ;-)
#+end_box
Using =noweb= invocations, any time the tangling is performed, the yankpad
is kept up to date ---no personal intervention from myself.

# Neat, but not what I want.
# https://github.com/abo-abo/auto-yasnippet

:Fun_albeit_useless_exercise:

Let's push this frontier a bit more ‚Ä¶

In expressive languages like Agda, one can not only be type polymorphic but also
‚Äòlevel polymorphic‚Äô ---since types constitute a hierarchy where a ‚Äòtype‚Äô is
uninterestingly an ‚Äòelement‚Äô of a higher ‚Äòtype‚Äô, ad infinitum.  For example, the
type of a level polymorphic ‚Ä≤choice‚Äô function would be ~{a : Level} (A : Set a) ‚Üí A~
---note that such a choice function cannot exist since for any type ~A~ it returns
an element of ~A~, then what of the empty type. Anyhow, the template ~{${1:a} :
Level} ‚Üí (${2:A} : Set $1) ‚Üí $0~ would suffice to make this happen. Yet, what if
we wanted /n/-many sets?

Make a function that takes /n ‚â§ 26/ as input, produces a list of
levels, then uses each level to produce a list of type names ;-)
:End:

With the advent of org-special-block-extras, I've made increased usage of links
--such as ~green:hello~ which yields green:hello and ~[[kbd:][green]]~ which yields
[[kbd:][green]].
#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** ll_make_a_link: insert a link template
${1:`(let* ((œÑ (read-string "Link type: "))
            (Œ¥ (read-string "Link Description: "))
            (‚ä§ (if (s-contains? ":" œÑ) œÑ (s-concat œÑ ":"))))
       (format "[[%s][%s]]" ‚ä§ Œ¥))`} $0
#+END_SRC

*** Operating System Keyboard Symbols
:PROPERTIES:
:CUSTOM_ID: Operating-System-Keyboard-Symbols
:END:

Write ~os_~ then see a bunch of completions ;-)

#+name: my-snippets-os-symbols
#+begin_src emacs-lisp :tangle no :wrap "src org :tangle ~/.emacs.d/yankpad.org" :exports code :results replace drawer
(cl-loop for (name expansion)
      in '((os-command ‚åò)
           (os_option ‚å•)
           (os_alt ‚å•)
           (os_control ‚åÉ)
           (os_shift ‚áß)
           (os_backspace ‚å´)
           (os_delete ‚å´)
           (os_delete_forward ‚å¶)
           (os_enter ‚èé)
           (os_return ‚èé)
           (os_escape ‚éã)
           (os_tab_right ‚á•)
           (os_tab_left ‚á§)
           (os_caps_lock ‚á™)
           (os_eject ‚èè))
      concat
      (format "** %s: %s Operating System Keyboard Symbol\n%s\n" name expansion expansion))
#+end_src

#+begin_src org  :tangle "~/.emacs.d/yankpad.org" :noweb yes :comments none
<<my-snippets-os-symbols()>>
#+end_src

*** Work Templates
:PROPERTIES:
:CUSTOM_ID: Work-Templates
:END:

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** ll_console_log: Log some JS variables

console.log("%c ******* LOOK HERE *******", "color: green; font-weight: bold;");
console.log({ ${1:List the variables here whose values you want to log} });
$0

,** uuidgen: Insert the result of ‚Äúuuidgen‚Äù and copy it to the clipboard

${1:`(-let [it (shell-command-to-string "uuidgen | tr '[:upper:]' '[:lower:]' |
pbcopy; pbpaste")] (message "Copied to clipboard, uuid: %s" it) it)`}
#+end_src

*** Elisp Templates
:PROPERTIES:
:CUSTOM_ID: Elisp-Templates
:END:

The following snippets were rather useful as I began learning Lisp to construct
my editor of choice ---I love Emacs so much. Admittedly, I still need the first
one below and usually beat around the bush by using ~(cl-loop for ‚ãØ do ‚ãØ)~, (doc:cl-loop), which is
‚Äònoisier‚Äô but easier to remember and to read for non-Lispers.
#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** loop:  Elisp's for each loop
(dolist (${1:var} ${2:list-form})
        ${3:body})

,** defun: Lisp functions
(cl-defun ${1:fun-name} (${2:arguments})
  "${3:documentation}"
  $0)

,** cond: Elisp conditionals
(cond (${1:scenario‚ÇÅ} ${2:response‚ÇÅ})
      (${3:scenario‚ÇÇ} ${4:response‚ÇÇ}))
#+end_src

*** Equational Templates
:PROPERTIES:
:CUSTOM_ID: Equational-Templates
:END:

To show ~‚Ñí = ‚Ñõ~, one starts at the complicated side, say /‚Ñí/, then, with the aim of
simplification, tries to end at the simpler side, /ùì°/.  Along the way, one
justifies each step of the calculation. This approach is popular in the proof
assistant Agda; [[https://alhassy.github.io/PathCat/][Examples]]. Read more about [[http://www.mathmeth.com/][informal calculational proofs]].

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** fun: Function declaration with type signature

${1:fun-name} : ${2:arguments}
$1 ${3:args} = ?$0

,** eqn_begin: Start a ‚â°-Reasoning block in Agda

begin
  ${1:complicated-side}
$0‚â°‚ü® ${3:reason-for-the-equality} ‚ü©
 ${2:simpler-side}
‚àé

,** eqn_step: Insert a step in a ‚â°-Reasoning block in Agda
‚â°‚ü® ${2:reason-for-the-equality} ‚ü©
  ${1:new-expression}
$0
#+end_src

One expands ~eqn_begin~, tabs to fill in the three main locations, then
/immediately/ types ~eqn_step~ to produce a new step in a calculational proof.

*** Fixed replies
:PROPERTIES:
:CUSTOM_ID: Fixed-replies
:END:

Here are some replies that I sometimes need to produce; e.g., to people who
insist their way is the right way.

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** reply_opinionated_pantomath: What to say to, e.g., an arrogant academic

Your certainty inspires me to continuing exploring, and I may arrive at your
point of view, but I'm going to need more evidence first.

,** reply_em_dashes: Why use em dashes for parenthetical remarks?

According to the ‚ÄúCanadian Style Guide‚Äù (CSG):

   The em is an expansive, attention-seeking dash. It supplies much stronger
   emphasis than the comma, colon or semicolon it often replaces. Positioned
   around interrupting elements, em dashes have the opposite effect of
   parentheses‚Äîem dashes emphasize; parentheses minimize.

From ‚ÄúA Logical Approach to Discrete Math‚Äù (LADM), page ix:

   We place a space on one side of an em dash ---here are examples--- in
   order to help the reader determine whether the em dash begins or ends
   a parenthetical remark. In effect, we are creating two symbols from one.
   In longer sentences---and we do write long sentences from time to time---the
   lack of space can make it difficult to see the sentence structure---especially
   if the em dash is used too often in one sentence. Parenthetical remarks
   delimited by parentheses (like this one) have a space on one side of each
   parenthesis, so why not parenthetical remarks delimited by em dashes?

Interestingly, according to the CSG, there should be no space before or after an
em dash.  As such, it appears that the spacing is mostly stylistic; e.g., some
people surround em-s with spaces on both sides.  In particular, when em-s are
unmatched, I make no use of additional space ---indeed this form of one-sided
parentheses without a space is how LADM is written, as can be seen at the top of
page 3.
#+end_src

*** Misc Templates
:PROPERTIES:
:CUSTOM_ID: Misc-Templates
:END:

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** remark: top-level literate comment

{{{remark(${1:thoughts})}}} $0
#+end_src

Where my local use contains ~#+MACRO: remark  @@latex: \fbox{\textbf{Comment: $1 }}@@~.

*** Emojis                                                         :Disabled:
:PROPERTIES:
:CUSTOM_ID: emojis
:END:

#+NAME: my-emoji-templates
#+begin_src emacs-lisp :tangle nil :wrap "src org :tangle ~/.emacs.d/yankpad.org" :exports code :results replace drawer
;;
;; https://emojipedia.org/people/
(cl-loop for (emoji name description)
         in '((üòÄ "Grinning Face"
                  "Often conveys general pleasure and good cheer or humor.")

              (üòÉ "Grinning Face with Big Eyes"
                  "Often conveys general happiness and good-natured amusement.
                   Similar to üòÄ Grinning Face but with taller,
                   more excited eyes.")

              (üòÑ "Grinning Face with Smiling Eyes"
                  "Often conveys general happiness and good-natured amusement.
                   Similar to üòÄ Grinning Face and üòÉ Grinning
                   Face With Big Eyes, but with warmer, less
                   excited eyes.")

              (üòÅ "Beaming Face with Smiling Eyes"
                  "Often expresses a radiant, gratified
                  happiness. Tone varies, including warm, silly,
                  amused, or proud.")

              (üòÜ "Grinning Squinting Face"
                  "Often conveys excitement or hearty laughter.
                   Similar to üòÄ Grinning Face but with eyes that
                   might say ‚ÄòSquee!‚Äô or ‚ÄòAwesome!‚Äô An emoji form of
                   the >< or xD emoticons.")

              (üòÖ "Grinning Face with Sweat"
                  "Intended to depict nerves or discomfort but
                  commonly used to express a close call, as if
                  saying ‚ÄòWhew!‚Äô and wiping sweat from the
                  forehead. ")

              (ü§£ "Rolling on the Floor Laughing"
                  "Often conveys hysterical laughter more intense
                  than üòÇ Face With Tears of Joy.")

              (üòÇ "Face with Tears of Joy")
              (üôÇ "Slightly Smiling Face")
              (üôÉ "Upside-Down Face")
              (üòâ "Winking Face")
              (üòä "Smiling Face with Smiling Eyes")
              (üòá "Smiling Face with Halo")
              (ü•∞ "Smiling Face with Hearts")
              (üòç "Smiling Face with Heart-Eyes")
              (ü§© "Star-Struck")
              (üòò "Face Blowing a Kiss")
              (üòó "Kissing Face")
              (‚ò∫Ô∏è "Smiling Face")
              (üòö "Kissing Face with Closed Eyes")
              (üòô "Kissing Face with Smiling Eyes")
              (ü•≤ "Smiling Face with Tear")
              (üòã "Face Savoring Food")
              (üòõ "Face with Tongue")
              (üòú "Winking Face with Tongue")
              (ü§™ "Zany Face")
              (üòù "Squinting Face with Tongue")
              (ü§ë "Money-Mouth Face")
              (ü§ó "Hugging Face")
              (ü§≠ "Face with Hand Over Mouth")
              (ü§´ "Shushing Face")
              (ü§î "Thinking Face")
              (ü§ê "Zipper-Mouth Face")
              (ü§® "Face with Raised Eyebrow")
              (üòê "Neutral Face")
              (üòë "Expressionless Face")
              (üò∂ "Face Without Mouth")
              (üòè "Smirking Face")
              (üòí "Unamused Face")
              (üôÑ "Face with Rolling Eyes")
              (üò¨ "Grimacing Face")
              (ü§• "Lying Face")
              (üòå "Relieved Face")
              (üòî "Pensive Face")
              (üò™ "Sleepy Face")
              (ü§§ "Drooling Face")
              ("Sleeping Face")
              (üò∑ "Face with Medical Mask")
              (ü§í "Face with Thermometer")
              (ü§ï "Face with Head-Bandage")
              (ü§¢ "Nauseated Face")
              (ü§Æ "Face Vomiting")
              (ü§ß "Sneezing Face")
              (ü•µ "Hot Face")
              (ü•∂ "Cold Face")
              (ü•¥ "Woozy Face")
              (üòµ "Dizzy Face")
              (ü§Ø "Exploding Head")
              (ü§† "Cowboy Hat Face")
              (ü•≥ "Partying Face")
              (ü•∏ "Disguised Face")
              (üòé "Smiling Face with Sunglasses")
              (ü§ì "Nerd Face")
              (üßê "Face with Monocle")
              (üòï "Confused Face")
              (üòü "Worried Face")
              (üôÅ "Slightly Frowning Face")
              (‚òπÔ∏è "Frowning Face")
              (üòÆ "Face with Open Mouth")
              (üòØ "Hushed Face")
              (üò≤ "Astonished Face")
              (üò≥ "Flushed Face")
              (ü•∫ "Pleading Face")
              (üò¶ "Frowning Face with Open Mouth")
              (üòß "Anguished Face")
              (üò® "Fearful Face")
              (üò∞ "Anxious Face with Sweat")
              (üò• "Sad but Relieved Face")
              (üò¢ "Crying Face")
              (üò≠ "Loudly Crying Face")
              (üò± "Face Screaming in Fear")
              (üòñ "Confounded Face")
              (üò£ "Persevering Face")
              (üòû "Disappointed Face")
              (üòì "Downcast Face with Sweat")
              (üò© "Weary Face")
              (üò´ "Tired Face")
              (ü•± "Yawning Face")
              (üò§ "Face with Steam From Nose")
              (üò° "Pouting Face")
              (üò† "Angry Face")
              (ü§¨ "Face with Symbols on Mouth")
              )
         for nom  = (s-replace " " "_" name)
         for desc = (s-collapse-whitespace (or description ""))
         concat (concat
                 ;; f_‚Ä¶ ‚áí get emoji from company menu showing only name & emoji
                 (format "\n** f_%s: %s %s \n%s" nom emoji "" emoji)
                 ;; fd_‚Ä¶ ‚áí get emoji from company menu showing name, emoji, & ‚Äòd‚Äôescription
                 (format "\n** fd_%s: %s %s \n%s" nom emoji desc emoji)))
#+end_src

#+begin_src emacs-lisp
;; Get all unicode emojis to appear within Emacs
;; See also: https://emacs.stackexchange.com/questions/5689/force-a-single-font-for-all-unicode-glyphs?rq=1
;; (unless noninteractive (set-fontset-font t nil "Apple Color Emoji"))
#+end_src

#+begin_src org :tangle "~/.emacs.d/yankpad.org" :noweb yes :exports none
<<my-emoji-templates()>>
#+end_src
##
*** ¬† =my_‚ãØ= Templates to obtain User Information
:PROPERTIES:
:CUSTOM_ID: my-Templates-to-obtain-User-Information
:END:

Let's add templates for links to common user information ^_^

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** my_name: User's name
`user-full-name`

,** my_email: User's email address
`user-mail-address`

,** my_github: User's Github repoistory link
https://github.com/alhassy/

,** my_emacsdrepo: User's version controlled Emacs init file
https://github.com/alhassy/emacs.d

,** my_blog: User's blog website
https://alhassy.github.io/

,** my_webpage: User's organisation website
http://www.cas.mcmaster.ca/~alhassm/

,** my_twitter: User's Twitter profile
https://twitter.com/musa314

,** my_masters_thesis
A Mechanisation of Internal Galois Connections In Order Theory Formalised Without Meets
https://macsphere.mcmaster.ca/bitstream/11375/17276/2/thesis.pdf
#+end_src

It may be useful to also have Org-link variants of these ‚Ä¶

*** Templates from other places in my init
:PROPERTIES:
:CUSTOM_ID: Activate-templates-from-other-places-in-my-init
:END:

In this setup, I have some templates appear elsewhere, tagged with =:noweb-ref
templates-from-other-places-in-my-init=. They are presented in natural
positions, but can only occur to the machine after template expansion is setup.
Using org-mode, we are able to /present/ code in any order and /tangle/ it to
the order the compilers need it to be!

Let's activate all such templates, now after template expansion has been setup.
#+begin_src org :tangle no
,#+begin_src org :noweb yes :tangle "~/.emacs.d/yankpad.org" :comments none
<<templates-from-other-places-in-my-init>>
,#+end_src
#+end_src

You can press kbd:C-c_C-v_C-v, doc:org-babel-expand-src-block, to see what this
block expands into...
#+begin_details Expansion
# This is also live.
#+begin_src org :noweb yes :tangle "~/.emacs.d/yankpad.org" :comments none
<<templates-from-other-places-in-my-init>>
#+end_src
#+end_details

Note: Since I've insisted that Org blocks are space sensative, any whitespace
before the ~<<‚ãØ>>~ will propogate to the resulting extracted code.

#+begin_box Warning! :background-color red
This section had
#+begin_src org :tangle no
:PROPERTIES:
:CUSTOM_ID: Templates-from-other-places-in-my-init
:END:
#+end_src
Which, as of Org 9.4, led to the entire section being tangled: This is what the
above incantation requested, but I thought it only worked on src blocks, having
the specified ~:noweb-ref~, not on ~:CUSTOM_ID:~ incidentally having the same
name.
#+end_box

** Prettify inline source code
:PROPERTIES:
:CUSTOM_ID: Prettify-inline-source-code
:END:

#+begin_src emacs-lisp
;; Show ‚Äú src_emacs-lisp[:exports results]{ ùí≥ } ‚Äù as ‚Äú ‚Ñ∞ùìÅùíæùìàùìÖÔ¥æ ùí≥ Ô¥ø ‚Äù.
;;
(font-lock-add-keywords 'org-mode
  '(("\\(src_emacs-lisp\\[.*]{\\)\\([^}]*\\)\\(}\\)"
  (1 '(face (:inherit (bold) :foreground "gray65") display "‚Ñ∞ùìÅùíæùìàùìÖÔ¥æ"))
  (2 '(face (:foreground "blue")))
  (3 '(face (:inherit (bold) :foreground "gray65") display "Ô¥ø"))
    )))
;;
;; Let's do this for all my languages:
;; Show ‚Äú src_LANGUAGE[‚Ä¶]{ ‚ãØ } ‚Äù as ‚Äú Ô¥æ ‚ãØ Ô¥ø ‚Äù.
(cl-loop for lang in my/programming-languages
         do (font-lock-add-keywords 'org-mode
               `(( ,(format "\\(src_%s\\[.*]{\\)\\([^}]*\\)\\(}\\)" lang)
                  (1 '(face (:inherit (bold) :foreground "gray65") display "Ô¥æ"))
                  (2 '(face (:foreground "blue")))
                  (3 '(face (:inherit (bold) :foreground "gray65") display "Ô¥ø"))
                  ))))

;;
(defun my/toggle-line-fontification ()
  "Toggle the fontification of the current line"
  (interactive)
  (defvar my/toggle-fontify/current-line -1)
  (defvar my/toggle-fontify/on? nil)
  (add-to-list 'font-lock-extra-managed-props 'display)
  (let ((start (line-beginning-position)) (end (line-end-position)))
    (cond
     ;; Are we toggling the current line?
     ((= (line-number-at-pos) my/toggle-fontify/current-line)
      (if my/toggle-fontify/on?
          (font-lock-fontify-region start end)
        (font-lock-unfontify-region start end))
      (setq my/toggle-fontify/on? (not my/toggle-fontify/on?)))
     ;; Nope, we've moved on to another line.
     (:otherwise
      (setq my/toggle-fontify/current-line (line-number-at-pos)
            my/toggle-fontify/on? :yes_please_fontify)
      (font-lock-unfontify-region  start end)))))

  ;; TODO FIXME; maybe ignore: Wasted too much time here already.
;; (add-hook 'post-command-hook #'my/toggle-line-fontification nil t)
;; (font-lock-add-keywords nil '((my/toggle-line-fontification)) t)
#+end_src

** Unfold Org Headings when I perform a search

#+begin_src emacs-lisp
(setq org-fold-core-style 'overlays)
#+end_src

** The ‚Äú‚à∂Disabled‚à∂‚Äù tag ---Stolen from AlBasmala.el, and improved

tldr: Add ~:Disabled:~ to a heading to render its contents in a ~<details>~ HTML
element. If a heading has a ~:COLOR~ property, then that is used for the colour of
the element, defaulting to ~pink~.

#+begin_src emacs-lisp
(defmacro org-deftag (name args docstring &rest body)
  "Re-render an Org section in any way you like, by tagging the section with NAME.

That is to say, we essentially treat tags as functions that act on Org headings:
We redefine Org sections for the same purposes as Org special blocks.

The ‚Äúarguments‚Äù to the function-tag can be declared as Org properties, then
the function can access them using the `o-properties' keyword as in
   (-let [(&plist :file :date :color) o-properties]
       (insert \"%s: %s\" file date))

Anyhow:
ARGS are the sequence of items seperated by underscores after the NAME of the new tag.
BODY is a form that may anaphorically mention:
- O-BACKEND: The backend we are exporting to, such as `latex' or `html'.
- O-HEADING: The string denoting the title of the tagged section heading.
- O-PROPERTIES: A plist of the Org properties at point.

DOCSTRING is mandatory; everything should be documented for future maintainability.

The result of this anaphoric macro is a symbolic function name `org-deftag/NAME',
which is added to `org-export-before-parsing-hook'.

----------------------------------------------------------------------

Below is the motivating reason for inventing this macro. It is used:

     ,** Interesting, but low-priority, content   :details_red:
     Blah blah blah blah blah blah blah blah blah blah blah.
     Blah blah blah blah blah blah blah blah blah blah blah.

Here is the actual implementation:

(org-deftag details (color)
   \"HTML export a heading as if it were a <details> block; COLOR is an optional
   argument indicating the background colour of the resulting block.\"
   (insert \"\n#+html:\"
           (format \"<details style=\\\"background-color: %s\\\">\" color)
           \"<summary>\" (s-replace-regexp \"^\** \" \"\" o-heading) \"</summary>\")
   (org-next-visible-heading 1)
   (insert \"#+html: </details>\"))

"
  (let ((func-name (intern (format "org-deftag/%s" name))))
    `(progn
       (cl-defun ,func-name (o-backend)
         ,docstring
         (outline-show-all)
         (org-map-entries
          (lambda ()
            (-let [(&alist ,@ (mapcar #'symbol-name args)) (map-apply (lambda (k v) (cons (downcase k) v)) (org-entry-properties (point)))]
              ;; MA: Maybe get rid of o-heading and o-properties and let people operate on raw Org secitons
              ;; as they do with org-agenda. That might provide a more unified approach.
              (let ((o-properties (map-into (map-apply (lambda (k v) (cons (intern (concat ":" (downcase k))) v)) (org-entry-properties (point))) 'plist))
                    (o-heading (progn (kill-line) (car kill-ring))))
                (if (not (s-contains? (format ":%s" (quote ,name)) o-heading 'ignoring-case))
                    (insert o-heading)
                  (setq o-heading (s-replace-regexp (format ":%s[^:]*:" (quote ,name)) "" o-heading))
                  ,@body)
                ;; Otherwise we impede on the auto-inserted ‚Äú* footer :ignore:‚Äù
                (insert "\n"))))))
       (add-hook 'org-export-before-parsing-hook (quote ,func-name))
       )))



       (-let [(&plist :file) (map-into (map-apply (lambda (k v) (cons (intern (concat ":" (downcase k))) v)) (org-entry-properties (point))) 'plist)]
         file
         )


       ;; MA: This is new stuff.
       (put 'org-deflink 'lisp-indent-function 'defun)
       (put 'org-deftag 'lisp-indent-function 'defun)

       ;; Example use
       (org-deftag identity ()
         "Do nothing to Org headings"
         (insert o-heading)) ;; Wait, I think this strips tags?

       (org-deftag disabled (color)
         "Render the body of a heading in a <details> element, titled ‚ÄúDisabled‚Äù.

The heading remains in view, and so appears in the TOC."
         (insert "\n") (insert  o-heading) (insert "\n")
         (insert "\n#+html:"
                 (format "<div> <details class=\"float-child\" style=\"background-color: %s\">"
                         (or color "pink"))
                 "<summary> <strong> <font face=\"Courier\" size=\"3\" color=\"green\">"
                 "Details Ô¥æThis is disabled, I'm not actively using it.Ô¥ø"
                 "</font> </strong> </summary>")
         ;; Something to consider: (org-set-property "UNNUMBERED" "nil")
         (org-next-visible-heading 1)
         (insert "#+html: </details> </div>"))
#+end_src

** Jumping to extreme semantic units
:PROPERTIES:
:CUSTOM_ID: Jumping-to-extreme-semantic-units
:END:
[[https://github.com/DamienCassou/beginend][Sometimes it's unreasonable]] for ~M-<~ to take us to the actual start of a buffer;
instead it'd be preferable to go to the first ‚Äúsemantic unit‚Äù in the buffer. For
example, when directory editing with ~dired~ we should jump to the first file,
with version control with ~magit~ we should jump to the first section, when
composing mail we should jump to the first body line, and in the agenda we
should jump to the first entry.
#+BEGIN_SRC emacs-lisp
;; M-< and M-> jump to first and final semantic units.
;; If pressed twice, they go to physical first and last positions.
(use-package beginend
  :config (beginend-global-mode))
#+END_SRC
** Folding within a subtree
:PROPERTIES:
:CUSTOM_ID: Folding-within-a-subtree
:END:

#+begin_src emacs-lisp
(bind-key "C-c C-h"
          (defun my/org-fold-current-subtree-anywhere-in-it ()
            (interactive)
            (save-excursion (save-restriction
                              (org-narrow-to-subtree)
                              (org-shifttab)
                              (widen))))
          org-mode-map)
#+END_SRC

** Draw pretty unicode tables in org-mode
:PROPERTIES:
:CUSTOM_ID: Draw-pretty-unicode-tables-in-org-mode
:END:
This turns the ‚Äú---‚Äù and other ASCII for tables into ‚Äòsmooth‚Äô lines ^_^

|---+---|
| a | b |
|---+---|
| 1 | 2 |
|---+---|
|   |   |
|---+---|

#+begin_src emacs-lisp
(quelpa '(org-pretty-table
         :repo "Fuco1/org-pretty-table"
         :fetcher github))

(add-hook 'org-mode-hook 'org-pretty-table-mode)
#+END_SRC

Being an ‚Äòon the fly replacement mechanism‚Äô, we get that ‚ÄúC-u 80 -‚Äù also results
in one smooth horizontal rule and vertical sequences of ‚Äò|‚Äô results in a smooth
vertical line.


NOTE. This is comparable to ~org-modern-mode~'s pretty table rendering.

** Drag Stuff                                                      :Disabled:
:PROPERTIES:
:CUSTOM_ID: Drag-Stuff
:header-args: :tangle no
:END:
#+begin_src emacs-lisp
;; Move current word ‚Üê/‚Üí, or current line ‚Üë/‚Üì.
;; Todo: Compare with org-metaup and org-metadown...
(use-package drag-stuff

  :config (cl-loop for (key . action) in '(("<M-down>" . drag-stuff-down)
                                      ("<M-up>" . drag-stuff-up)
                                      ("<M-right>" . drag-stuff-right)
                                      ("<M-left>" . drag-stuff-left))
                do (bind-key key action org-mode-map))
      (drag-stuff-global-mode 1))
#+end_src

Ruins Org-mode's M-‚Üë/‚Üì for moving entire sections around.

** Buffer default mode is org-mode
:PROPERTIES:
:CUSTOM_ID: Buffer-defaults
:END:
- I‚Äôd much rather have my new buffers in org-mode than fundamental-mode:
#+begin_src emacs-lisp
(setq-default major-mode 'org-mode)
#+end_src

** Use Org Mode links in other modes: Links can be opened and edited like in Org Mode.
:PROPERTIES:
:CUSTOM_ID: Use-Org-Mode-links-in-other-modes-Links-can-be-opened-and-edited-like-in-Org-Mode
:END:
#+begin_src emacs-lisp
;; E.g., in ELisp mode, the following is clickable and looks nice: [[info:man][Read the docs!]]
;;
;; In particular, when I tangle my init.org into a Lisp file, init.el, it has Org links
;; back to the original source section in Org, which I can then click to jump to, quickly.
;;
(use-package orglink
  :config
  (global-orglink-mode)
  ;; Only enable this in Emacs Lisp mode, for now.
  (setq orglink-activate-in-modes '(emacs-lisp-mode)))
#+end_src

** ox-pandoc
:PROPERTIES:
:CUSTOM_ID: Easy-tasks
:END:

# ox-pandoc is "another exporter that translates Org-mode file to various other formats via Pandoc".
# (shell-command "brew install pandoc")
# (use-package ox-pandoc)

* Staying Sane
:PROPERTIES:
:CUSTOM_ID: Staying-Safe
:END:

See [[https://jeremykun.com/2020/01/14/the-communicative-value-of-using-git-well/][The Communicative Value of Using Git Well]]

Note: Emacs has built-in version control, e.g., kbd:C-x_v_l to see the change
log of the repository containing the current file.

** Undo-tree: Very Local Version Control
:PROPERTIES:
:CUSTOM_ID: Undo-tree-Very-Local-Version-Control
:END:
 doc:undo-tree-visualize, kbd:C-x_u, gives a /visual/ representation of the
 current buffer's edit history.
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
  <<undo-tree-setup>>
#+END_SRC

( We're just showing the ~<<undo-tree-setup>>~ from earlier since this is a good
place for such a setup. More importantly, we are /not/ copy-pasting the setup: /It
is written only once; in a single source of truth!/ )

#+begin_src emacs-lisp
;; By default C-z is suspend-frame, i.e., minimise, which I seldom use.
(global-set-key (kbd "C-z")
  (lambda () (interactive)
   (undo-tree-mode) ;; Ensure the mode is on
   (undo-tree-visualize)))
#+end_src

** Automatic Backups
:PROPERTIES:
:CUSTOM_ID: Automatic-Backups
:END:

By default, Emacs saves backup files ---those ending in =~=--- in the current
directory, thereby cluttering it up. Let's place them in ~~/.emacs.d/backups~, in
case we need to look for a backup; moreover, let's keep old versions since
there's disk space to go around ---what am I going to do with 500gigs when nearly
all my ‚Äòsoftware‚Äô is textfiles interpreted within Emacs üòº

#+BEGIN_SRC emacs-lisp
;; New location for backups.
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Silently delete execess backup versions
(setq delete-old-versions t)

;; Only keep the last 1000 backups of a file.
(setq kept-old-versions 1000)

;; Even version controlled files get to be backed up.
(setq vc-make-backup-files t)

;; Use version numbers for backup files.
(setq version-control t)
#+END_SRC

Why backups? Sometimes I may forget to submit a file, or edit, to my
version control system, and it'd be nice to be able to see a local
automatic backup. Whenever ‚ÄòI need space,‚Äô then I simply empty
the backup directory, if ever. That the backups are numbered is so sweet ^_^

Like package installations, my backups are not kept in any version control
system, like git; only locally.

Finally, let's not create ~.#~ files nor bother confirming killing processes.
#+begin_src emacs-lisp
(setq confirm-kill-processes nil
      create-lockfiles nil)
#+end_src

*** What changed? ---Walking through backups
:PROPERTIES:
:CUSTOM_ID: What-changed
:END:

Let's use an elementary diff system for backups: ~backup-walker~ essentially makes
all our backups behave as if they were (implicitly) version controlled.

#+BEGIN_SRC emacs-lisp
(use-package backup-walker
  :commands backup-walker-start)
#+END_SRC

In a buffer that corresponds to a file, invoke doc:backup-walker-start to see a
visual diff of changes /between/ versions; then ~n~ and ~p~ to move between diffs.  By
default, you see the changes ‚Äòbackwards‚Äô: Red means delete these things to get
to the older version; i.e., the red ‚Äò-‚Äô are newer items.

There is also doc:diff-backup for comparing a file with its backup.

# To create backups explicitly use save-buffer (C-x C-s) with prefix arguments.
#
#          =diff-backup= compares a file with its backup or vice versa.
# But there is no function to restore backup files.

*** Save ‚âà Backup
:PROPERTIES:
:CUSTOM_ID: Save-Backup
:END:

Emacs only makes a backup the very first time a buffer is saved; I'd prefer
Emacs makes backups everytime I save! ---If I saved, that means I'm at an
important checkpoint, so please check what I have so far as a backup!
#+BEGIN_SRC emacs-lisp
;; Make Emacs backup everytime I save

(defun my/force-backup-of-buffer ()
  "Lie to Emacs, telling it the curent buffer has yet to be backed up."
  (setq buffer-backed-up nil))

(add-hook 'before-save-hook  'my/force-backup-of-buffer)

;; [Default settings]
;; Autosave when idle for 30sec or 300 input events performed
(setq auto-save-timeout 30
      auto-save-interval 300)
#+END_SRC
# See the name of the latest backup, which is appeneded by a number for each save ;-)
# (file-newest-backup "~/.emacs.d/init.org")

It is intestesting to note that the above snippet could be modified to [[https://stackoverflow.com/a/6918217/3550444][make our
own backup system]], were Emacs lacked one, by having our function simply save
copies of our file ---on each save--- where the filename is augmented with a
timestamp.

** delete-by-moving-to-trash t
:PROPERTIES:
:CUSTOM_ID: delete-by-moving-to-trash-t
:END:
#+begin_src emacs-lisp
;; Move to OS‚Äô trash can when deleting stuff
;; instead of deleting things outright!
(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash/")
#+end_src
** ¬† =magit= ---Emacs' porcelain interface to git
:PROPERTIES:
:CUSTOM_ID: magit-Emacs'-porcelain-interface-to-gitq
:END:

*** Intro                                                            :ignore:

Let's setup an Emacs ‚Äòporcelain‚Äô interface to git ---it makes working with
version control tremendously convenient.
# Moreover, I add a little pop-up so that I don't forget to commit often!

(Personal reminder: If using 2FA [two factor authentication], then when you do
git operations, such as ~git push~, [[https://webkul.com/blog/github-push-with-two-factor-authentication/][you must use your PAT]] [personal access token]
/instead/ of your password! Also: Install [[https://github.com/sindresorhus/refined-github][refined-github: Browser extension that
simplifies the GitHub interface and adds useful features]]!)

#+BEGIN_SRC emacs-lisp
;; Bottom of Emacs will show what branch you're on
;; and whether the local file is modified or not.
(use-package magit
  :bind (("C-c M-g" . magit-file-dispatch))
  :custom ;; Do not ask about this variable when cloning.
    (magit-clone-set-remote.pushDefault t))
#+END_SRC
# :config (global-set-key (kbd "C-x g") 'magit-status)

Why use ~magit~ as the interface to the git version control system?  In a ~magit~
buffer nearly everything can be acted upon: Press =return=, or =space=, to see
details and =tab= to see children items, usually.

+ kbd:C-x_g, doc:magit-status, gives you a nice buffer with an overview
  of the Git repo that you're buffer is currently visiting.
+ kbd:C-c_M-g, doc:magit-file-dispatch, lets you invoke Git actions on the
  current file directly; e.g., following up with [[kbd:b]]lame, [[kbd:l]]og, [[kbd:d]]iff,
  [[kbd:s]]tage, or [[kbd:c]]ommit the current file.

  For ease, above, we have also bound this to kbd:C-c_g ---reminiscent of kbd:C-x_g :smile:

  #+begin_src emacs-lisp
;; When we invoke magit-status, show green/red the altered lines, with extra
;; green/red on the subparts of a line that got alerted.
(system-packages-ensure "git-delta")
(use-package magit-delta
  :hook (magit-mode . magit-delta-mode))

;; Don't forget to copy/paste the delta config into the global ~/.gitconfig file.
;; Copy/paste this: https://github.com/dandavison/delta#get-started
  #+end_src

+ Blame, doc:magit-blame, is super nice: The buffer gets annotations for each chunk
  of text, regarding who authoured it, when, and their commit title.
  Then [[kbd:q]] to quit the blame.

  Likewise, doc:magit-log-buffer-file is super neat!

#+begin_details Super Simple ‚Äòmagit‚Äô Mini-tutorial
link-here:Super-Simple-‚Äòmagit‚Äô-Mini-tutorial
Below is my personal quick guide to working with magit ---for a full tutorial
see [[http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html.html][jr0cket's blog]].

+ ~dired~ :: See the contents of a particular directory.

+ ~magit-init~ :: Put a project under version control.
  The mini-buffer will prompt you for the top level folder version.
  A ~.git~ folder will be created there.

+ ~magit-status~ , ~C-x g~ :: See status in another buffer.
   Press ~?~ to see options, including:
  - g :: Refresh the status buffer.
     # The status buffer may be refereshed using ~g~, and all magit buffers by ~G~.
  - TAB ::  See collapsed items, such as what text has been changed.
  - ~q~ :: Quit magit, or go to previous magit screen.
  - ~s~ :: Stage, i.e., add, a file to version control.
         Add all untracked files by selecting the /Untracked files/ title.

    [[https://softwareengineering.stackexchange.com/a/119807/185815][The staging area is akin to a pet store; commiting is taking the pet home.]]

  - ~k~ :: Kill, i.e., delete a file locally.
  - ~K~ :: This' ~(magit-file-untrack)~ which does ~git rm --cached~.
  - ~i~ :: Add a file to the project ~.gitignore~ file. Nice stuff =)
  - ~u~ :: Unstage a specfif staged change highlighed by cursor.
           ~C-u s~ stages everything --tracked or not.
  - ~c~ :: Commit a change.
    * A new buffer for the commit message appears, you write it then
      commit with ~C-c C-c~ or otherwise cancel with ~C-c C-k~.
      These commands are mentioned to you in the minibuffer when you go to commit.
    * You can provide a commit to /each/ altered chunk of text!
      This is super neat, you make a series of local such commits rather
      than one nebulous global commit for the file. The ~magit~ interface
      makes this far more accessible than a standard terminal approach!
    * You can look at the unstaged changes, select a /region/, using ~C-SPC~ as usual,
      and commit only that if you want!
    * When looking over a commit, ~M-p/n~ to efficiently go to previous or next altered sections.
    * Amend a commit by pressing ~a~ on ~HEAD~.

  - ~d~ :: Show differences, another ~d~ or another option.
    - This is magit! Each hunk can be acted upon; e.g., ~s~ or ~c~ or ~k~ ;-)
  - ~v~ :: Revert a commit.
  - ~x~ :: Undo last commit. Tantamount to ~git reset HEAD~~ when cursor is on most recent
           commit; otherwise resets to whatever commit is under the cursor.
  - ~l~ :: Show the log, another ~l~ for current branch; other options will be displayed.
    - Here ~space~ shows details in another buffer while cursour remains in current
      buffer and, moreover, continuing to press ~space~ scrolls through the other buffer!
      Neato.
  - ~P~ :: Push.
  - ~F~ :: Pull.
  - ~:~ :: Execute a raw git command; e.g., enter ~whatchanged~.

Notice that every time you press one of these commands, a ‚Äòpop-up‚Äô of realted
git options appears! Thus not only is there no need to memorise many of them,
but this approach makes /discovering/ other commands easier.

# Use ~M-x magit-list-repositories RET~ to list local repositories:
#+end_details

#+begin_details [Disabled] Homemade ‚Äòuncomitted changes‚Äô Notification
Let's always notify ourselves of a file that has [[https://tpapp.github.io/post/check-uncommitted/][uncommited changes]]
---we might have had to step away from the computer and forgotten to commit.
#+begin_src emacs-lisp :tangle no
(require 'magit-git)

(defun my/magit-check-file-and-popup ()
  "If the file is version controlled with git
  and has uncommitted changes, open the magit status popup."
  (let ((file (buffer-file-name)))
    (when (and file (magit-anything-modified-p t file))
      (message "This file has uncommited changes!")
      (when nil ;; Became annyoying after some time.
      (split-window-below)
      (other-window 1)
      (magit-status)))))

;; I usually have local variables, so I want the message to show
;; after the locals have been loaded.
(add-hook 'find-file-hook
  '(lambda ()
      (add-hook 'hack-local-variables-hook 'my/magit-check-file-and-popup)))
#+end_src
:Lets_try_this_out:
#+BEGIN_EXAMPLE emacs-lisp
(progn (eshell-command "echo change-here >> ~/dotfiles/.emacs")
       (find-file "~/dotfiles/.emacs"))
#+END_EXAMPLE
:End:
# In doubt, execute ~C-h e~ to jump to the ~*Messages*~ buffer.
#+end_details

*** Credentials: I am who I am
:PROPERTIES:
:CUSTOM_ID: Credentials-I-am-who-I-am
:END:
First, let's setup our git credentials.
#+BEGIN_SRC emacs-lisp
;; Only set these creds up if there is no Git email set up ---ie at work I have an email set up, so don't
;; override it with my personal creds.
;;
;; See here for a short & useful tutorial:
;; https://alvinalexander.com/git/git-show-change-username-email-address
(when (equal "" (shell-command-to-string "git config user.email "))
  (shell-command (format "git config --global user.name \"%s\"" user-full-name))
  (shell-command (format "git config --global user.email \"%s\"" user-mail-address)))
#+END_SRC

If we ever need to use Git in the terminal, it should be done with Emacs as the
underlying editor
#+BEGIN_SRC emacs-lisp
;; We want to reuse an existing Emacs process from the command line
;; E.g.,  emacsclient --eval '(+ 1 2)'    # ‚áí 3
(server-start)

;; Or use it whenever we are editing a git message from the terminal
(shell-command "git config --global core.editor 'emacsclient -t -a=\\\"\\\"'")
#+END_SRC
This will start a daemon if there is not already one running ---The ~-a~ option---
and opens a new Emacs frame on the current terminal ---The ~-t~ option.

*** Encouraging useful commit messages
:PROPERTIES:
:CUSTOM_ID: Encouraging-useful-commit-messages
:END:
Let's try our best to have a [[https://chris.beams.io/posts/git-commit/][useful & consistent commit log]]:
#+begin_src emacs-lisp
(defun my/git-commit-reminder ()
  (insert "\n\n# The commit subject line ought to finish the phrase:
# ‚ÄúIf applied, this commit will ‚ü™your subject line here‚ü´.‚Äù ")
  (beginning-of-buffer))

(add-hook 'git-commit-setup-hook 'my/git-commit-reminder)
#+end_src

Super neat stuff!

*** Maybe clone ... everything?
:PROPERTIES:
:CUSTOM_ID: Maybe-clone-everything
:END:

Below are the git repos I'd like to clone ---along with a function to do so
quickly.
#+begin_src emacs-lisp
;; Clone git repo from clipboard
(cl-defun maybe-clone (remote &optional local)
  "Clone a REMOTE repository [from clipboard] if the LOCAL directory does not exist.

If called interactively, clone URL in clipboard into ~/Downloads then open in dired.

Yields ‚Äòrepo-already-exists‚Äô when no cloning transpires, otherwise yields ‚Äòcloned-repo‚Äô.

LOCAL is optional and defaults to the base name; e.g.,
if REMOTE is https://github.com/X/Y then LOCAL becomes ‚àº/Y."
  (interactive "P")

  (when (interactive-p)
    (setq remote (substring-no-properties (current-kill 0)))
    (cl-assert (string-match-p "^\\(http\\|https\\|ssh\\)://" remote) nil "No URL in clipboard"))

  (unless local
    (setq local (concat "~/" (if (interactive-p) "Downloads/" "") (file-name-base remote))))

  ;; (require 'magit-repos) ;; Gets us the magit-repository-directories variable.
  ;; (add-to-list 'magit-repository-directories `(,local . 0))

  (if (file-directory-p local)
      'repo-already-exists
    (shell-command (concat "git clone " remote " " local))
    (dired local)
    'cloned-repo))


(maybe-clone "https://github.com/alhassy/emacs.d" "~/.emacs.d")
(maybe-clone "https://github.com/alhassy/alhassy.github.io" "~/blog")
(maybe-clone "https://github.com/alhassy/holy-books")
#+end_src

#+begin_details Many more repos to clone
#+begin_src emacs-lisp

(maybe-clone "https://github.com/alhassy/melpa")
(maybe-clone "https://github.com/alhassy/org-special-block-extras")


;; (maybe-clone "https://github.com/alhassy/next-700-module-systems-proposal.git" "~/thesis-proposal")
;; (maybe-clone "https://github.com/JacquesCarette/MathScheme")
;; (maybe-clone "https://github.com/alhassy/gentle-intro-to-reflection" "~/reflection/")
;; (maybe-clone "https://github.com/alhassy/org-agda-mode")
;; (maybe-clone "https://github.com/JacquesCarette/TheoriesAndDataStructures")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/RATH/RATH-Agda"     "~/RATH-Agda")
;; (maybe-clone "https://github.com/alhassy/MyUnicodeSymbols") ;; Deleted?

(maybe-clone "https://github.com/alhassy/islam")
(maybe-clone "https://github.com/alhassy/CheatSheet")
(maybe-clone "https://github.com/alhassy/ElispCheatSheet")
;; (maybe-clone "https://github.com/alhassy/CatsCheatSheet")
;; (maybe-clone "https://github.com/alhassy/OCamlCheatSheet")
;; (maybe-clone "https://github.com/alhassy/AgdaCheatSheet")
(maybe-clone "https://github.com/alhassy/RubyCheatSheet")
;; (maybe-clone "https://github.com/alhassy/PrologCheatSheet")
;; (maybe-clone "https://github.com/alhassy/FSharpCheatSheet")


;; (maybe-clone "https://gitlab.cas.mcmaster.ca/armstmp/cs3mi3.git" "~/3mi3")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/alhassm/CAS781" "~/cas781") ;; cat adventures
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/carette/cs3fp3.git" "~/3fp3")
;; (maybe-clone "https://github.com/alhassy/interactive-way-to-c")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/assignment-distribution.git" "~/3ea3/assignment-distribution")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/notes.git" "~/3ea3/notes")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/assignment-development.git" "~/3ea3/assignment-development")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/kandeeps.git" "~/3ea3/sujan")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/horsmane.git" "~/3ea3/emily")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/anderj12.git" "~/3ea3/jacob")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/alhassm/3EA3.git" "~/3ea3/_2018")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/2DM3/LectureNotes.git" "~/2dm3")
#+end_src
#+end_details

This doc:maybe-clone utility has genuinely
made it easier for me to learn about new projects and codebases from Github:
I type it in with the repo's address, then kbd:C-x_C-e ---doc:eval-last-sexp---
and then I can view it in my beloved Emacs ~(‚îÄ‚Äø‚Äø‚îÄ)~.

Moreover, this handy tool makes it so that you can
list your Git repositories with doc:magit-list-repositories:
It marks modified repos as ‚Äúred:dirty‚Äù.

It may be useful to know that ~(magit-anything-modified-p t file)~ can be used to
check if ~file~ has been modified (doc:magit-anything-modified-p), whereas
~(magit-status repo)~ checks the status of a repository (doc:magit-status).
# (magit-anything-modified-p t "~/ElispCheatSheet/CheatSheet.org")
# (magit-status "~/ElispCheatSheet")

*** Gotta love that time machine
:PROPERTIES:
:CUSTOM_ID: Gotta-love-that-time-machine
:END:

Finally, one of the main points for using version control is to have access to
historic versions of a file. The following utility allows us to
kbd:M-x_git-timemachine on a file and use kbd:p/n/g/q to look at previous, next,
goto arbitrary historic versions, or quit.
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine )
#+END_SRC
If we want to roll back to a previous version, we just doc:write-file or
kbd:C-x_C-s as usual! The power of text!

--------------------------------------------------------------------------------

doc:vc-annotate is also very useful to go through history and work out when
things went wrong.

*** Jump to a (ma)git repository with ~C-u C-x g~                  :Disabled:
:PROPERTIES:
:CUSTOM_ID: Jump-to-a-ma-git-repository-with-C-u-C-x-g
:header-args: :tangle no
:END:

#+begin_src emacs-lisp
;; Jump to a (ma)git repository with C-u C-x g.
;;
;; To get a selection of repositories (that have been visited at least once),
;; call with ‚ÄúC-u M-x magit-status‚Äù or ‚ÄúC-u C-x g‚Äù; use ‚ÄúC-u C-u C-x g‚Äù to
;; manually enter a path to a repository.
;;
;; We use projectile's record of known projects, and keep only projects with
;; .git directory.
(with-eval-after-load 'projectile
  (setq magit-repository-directories
        (thread-last (projectile-relevant-known-projects)
          (--filter (unless (file-remote-p it)
                      (file-directory-p (concat it "/.git/"))))
          (--map (list (substring it 0 -1) 0)))))

;; Follow-up utility
(defun my/update-repos ()
  "Update (git checkout main & pull) recently visited repositories."
  (interactive)
  (cl-loop for (repo _depth) in magit-repository-directories
        ;; Is it ‚Äúmain‚Äù or ‚Äúmaster‚Äù
        for trunk = (s-trim (shell-command-to-string (format "cd %s; git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'" repo)))
        do (message (format "ü§ñ %s ‚à∑ Checking out & pulling main" repo))
           (shell-command (format "cd %s; git checkout %s; git pull" repo trunk)))
  (message "ü•≥ Happy coding!"))
#+end_src

** Pretty Magit Commit Leaders
:PROPERTIES:
:CUSTOM_ID: Pretty-Magit-Commit-Leaders
:END:
‚ü® Following [[http://www.modernemacs.com/post/pretty-magit/][Pretty Magit - Integrating commit leaders | Modern Emacs]] ‚®æ‚®æ Code
comes from there as well.  Notable alteration: Helm compleition shows
description of leaders. ‚ü©

Add faces to Magit to achieve icon and colored commit leaders. I also integrate
Helm to prompt a leader when committing so there's no need to remember or type
out completely every leader we choose.
- /It's not just aesthetics. It's about visual clarity./
- [[https://www.reddit.com/r/emacs/comments/6jegis/comment/djeo89w/?utm_source=share&utm_medium=web2x&context=3][Here]] is an alternate approach: Add icons based on words mentioned in commit titles ---no leaders required.

#+begin_details "Boring details ~ See linked article instead"
#+begin_src emacs-lisp
(cl-defmacro pretty-magit (WORD ICON PROPS &optional (description "") NO-PROMPT?)
  "Replace sanitized WORD with ICON, PROPS and by default add to prompts."
  `(prog1
     (add-to-list 'pretty-magit-alist
                  (list (rx bow (group ,WORD (eval (if ,NO-PROMPT? "" ":"))))
                        ,ICON ',PROPS))
     (unless ,NO-PROMPT?
       (add-to-list 'pretty-magit-prompt (cons (concat ,WORD ": ") ,description)))))

(setq pretty-magit-alist nil)
(setq pretty-magit-prompt nil)
#+end_src
#+end_details

My personal choices for leaders are:
#+begin_src emacs-lisp
(pretty-magit "Add"      ?‚ûï (:foreground "#375E97" :height 1.2) "‚úÖ Create a capability e.g. feature, test, dependency.")
(pretty-magit "Delete"   ?‚ùå (:foreground "#375E97" :height 1.2) "‚ùå Remove a capability e.g. feature, test, dependency.")
(pretty-magit "Fix"      ?üî® (:foreground "#FB6542" :height 1.2) "üêõ Fix an issue e.g. bug, typo, accident, misstatement.")
(pretty-magit "Clean"    ?üßπ (:foreground "#FFBB00" :height 1.2) "‚úÇ Refactor code; reformat say by altering whitespace; refactor performance.")
(pretty-magit "Document" ?üìö (:foreground "#3F681C" :height 1.2) "‚Ñπ Refactor of documentation, e.g. help files.")
(pretty-magit "Feature"  ?‚õ≤ (:foreground "slate gray" :height 1.2) "‚õ≥ üáÆüá∂üá®üá¶ A milestone commit - flagpost")
(pretty-magit "Generate"  ?üî≠ (:foreground "slate gray" :height 1.2) "Export PDF/HTML or tangle raw code from a literate program") ;; Generating artefacts
(pretty-magit "master"   ?Ó§á (:box t :height 1.2) "" t)
(pretty-magit "origin"   ?üêô (:box t :height 1.2) "" t)
;; Commit leader examples: https://news.ycombinator.com/item?id=13889155.
;;
;; Cut ~ Remove a capability e.g. feature, test, dependency.
;; Bump ~ Increase the version of something e.g. dependency.
;; Make ~ Change the build process, or tooling, or infra.
;; Start ~ Begin doing something; e.g. create a feature flag.
;; Stop ~ End doing something; e.g. remove a feature flag.
#+end_src

#+begin_details "Boring details ~ See linked article instead"
#+begin_src emacs-lisp
(defun add-magit-faces ()
  "Add face properties and compose symbols for buffer from pretty-magit."
  (interactive)
  (with-silent-modifications
    (--each pretty-magit-alist
      (-let (((rgx icon props) it))
        (save-excursion
          (goto-char (point-min))
          (while (search-forward-regexp rgx nil t)
            (compose-region
             (match-beginning 1) (match-end 1) icon)
            (when props
              (add-face-text-property
               (match-beginning 1) (match-end 1) props))))))))

(advice-add 'magit-status :after 'add-magit-faces)
(advice-add 'magit-refresh-buffer :after 'add-magit-faces)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq use-magit-commit-prompt-p nil)
(defun use-magit-commit-prompt (&rest args)
  (setq use-magit-commit-prompt-p t))

(defun magit-commit-prompt ()
  "Magit prompt and insert commit header with faces."
  (interactive)
  (when use-magit-commit-prompt-p
    (setq use-magit-commit-prompt-p nil)
    (thread-last (--map (format "%s %s" (car it) (cdr it)) pretty-magit-prompt)
      (completing-read "Insert commit leader ‚à∑ ")
      ;; My ‚ÄúGenerate:‚Äù commit type has one use case, for now; so let's insert it filled-in.
      (funcall (lambda (it) (if (s-starts-with? "Generate:" it) it (car (s-split " " it)))))
      (insert)
      (end-of-line))
    (add-magit-faces)))


(remove-hook 'git-commit-setup-hook 'with-editor-usage-message)
(add-hook 'git-commit-setup-hook 'magit-commit-prompt)
(advice-add 'magit-commit :after 'use-magit-commit-prompt)
#+end_src
#+end_details

** Highlighting TODO-s & Showing them in Magit
:PROPERTIES:
:CUSTOM_ID: Highlighting-TODO-s-Showing-them-in-Magit
:END:

Sometimes it's nice to flag a chunk of text by its author, such as ‚Äò [[color:#dc8cc3][MA]] ‚Äô for
‚ÄòM‚Äôusa ‚ÄòA‚Äôl-hassy, or ‚Äò [[color:#d0bf8f][HACK]] ‚Äô for text that needs to be improved.  Such flags
stand out from other text by being coloured and bold.

#+BEGIN_SRC emacs-lisp
;; NOTE that the highlighting works even in comments.
(use-package hl-todo
  ;; I want todo-words highlighted in prose, not just in code fragements.
  :hook (org-mode . hl-todo-mode)
  :config
    ;; Adding new keywords
    (cl-loop for kw in '("TEST" "MA" "WK" "JC")
             do (add-to-list 'hl-todo-keyword-faces (cons kw "#dc8cc3")))
    ;; Enable it everywhere.
    (global-hl-todo-mode))
#+END_SRC

We've added few to the default flag keywords so that in total we have the
following flags ---where any sequence of at least 3 [[color:#cc9393][XXX]] are considered flags.
#+BEGIN_SRC emacs-lisp :results replace raw value :exports results :eval no-export :tangle no
(cl-loop for (k . f) in hl-todo-keyword-faces
      collect (format "[[color:%s][%s]]" f k))
#+END_SRC

#+RESULTS:
([[color:#dc8cc3][JC]] [[color:#dc8cc3][WK]] [[color:#dc8cc3][MA]] [[color:#dc8cc3][TEST]] [[color:#d0bf8f][HOLD]] [[color:#cc9393][TODO]] [[color:#dca3a3][NEXT]] [[color:#dc8cc3][THEM]] [[color:#7cb8bb][PROG]] [[color:#7cb8bb][OKAY]] [[color:#5f7f5f][DONT]] [[color:#8c5353][FAIL]] [[color:#afd8af][DONE]] [[color:#d0bf8f][NOTE]] [[color:#d0bf8f][KLUDGE]] [[color:#d0bf8f][HACK]] [[color:#d0bf8f][TEMP]] [[color:#cc9393][FIXME]] [[color:#cc9393][XXX+]])

:Alternate_approach_using_font_lock:
#+begin_src emacs-lisp
(defun add-watchwords () "Add TODO: words to font-lock keywords."
  (font-lock-add-keywords nil
                          '(("\\(\\<TODO\\|\\<FIXME\\|\\<HACK\\|@.+\\):" 1
                             font-lock-warning-face t))))

(add-hook 'prog-mode-hook #'add-watchwords)

#+end_src
:End:

Lest these get buried in mountains of text, let's have them [[https://github.com/alphapapa/magit-todos][become mentioned]] in
a magit status buffer ---which uses the keywords from ~hl-todo~.
#+BEGIN_SRC emacs-lisp
;; MA: The todo keywords work in code too!
(use-package magit-todos
  :after magit
  :after hl-todo
  ;; :hook (org-mode . magit-todos-mode)
  :config
  ;; For some reason cannot use :custom with this package.
  (custom-set-variables
    '(magit-todos-keywords (list "TODO" "FIXME" "MA" "WK" "JC")))
  ;; Ignore TODOs mentioned in exported HTML files; they're duplicated from org src.
  (setq magit-todos-exclude-globs '("*.html"))
  (magit-todos-mode))
#+END_SRC

+ Note that such [[color:#cc9393][TODO]] keywords are not propagated from sections that are
  *[[purple:COMMENT]]*-ed out in org-mode.
+ Ensure you exclude generated files, such as the Emacs backups directory, from
  being consulted. Using ~magit~, press [[kbd:i]] to mark items to be ignored.
+ This feature also works outside of git repos.

Open a Magit status buffer, or run doc:magit-todos-list to show a dedicated
to-do list buffer. You can then peek at items with space, or jump to them with
enter.

#+begin_box
Seeing the [[color:#cc9393][TODO]] list with each commit is an incentive to actually tackle the
items there (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà
#+end_box

# Add these to the version control hydra.
# #+BEGIN_SRC emacs-lisp
# (defhydra hydra-version-control (global-map "C-x v")
#   ("t" helm-magit-todos "Show TODOs lists for this repo."))
# #+END_SRC
#

** Silently show me when a line was modified and by whom           :Disabled:
:PROPERTIES:
:CUSTOM_ID: Silently-show-me-when-a-line-was-modified-and-by-whom
:header-args: :tangle no
:END:
 Quickly & /automatically/ glimpse who, why, and when a line or code block was
 changed, using [[https://github.com/Artawower/blamer.el][blamer.el]]. Jump back through history to gain further insights
 as to how and why the code evolved with kbd:C-x_g_l_l (doc:magit-log-head) or
 doc:git-timemachine.

#+begin_src emacs-lisp
(unless noninteractive
  (use-package blamer
    :quelpa (blamer :fetcher github :repo "artawower/blamer.el")
    :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70)
    (blamer-max-commit-message-length 80) ;; Show me a lot of the commit title
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                      :background nil
                      :height 140
                      :italic t)))
    :config
    (global-blamer-mode 1)))
#+end_src

This is /so nice!/. I've enabled it once and then it just ‚Äúworks in the
background, silently‚Äù.

--------------------------------------------------------------------------------

When reading a line and wondering ‚Äúwho changed/wrote this and why‚Äù, blamer.el
answers that seamlessly ---almost as if a transient comment üòÅ

+ The ‚Äúwhy‚Äù is answered by commit messages; which may lead to improved messages:
  /‚ÄúHey, I was just browsing through the code, and landed on this commit, but the
  message does not tell me why the change was/ /introduced. Would you please write
  more detailed commit messages.‚Äù/
+ The ‚Äúwhen‚Äù gives a useful context in time about the change.  For example, when
  looking for a regression/recent-bug, we can immediately see /‚ÄúDid this line
  even change in the past week? No? That must not be it then‚Äù/ and we move on.

If we want to see commit messages alongside /all/ code, then we can invoke
doc:magit-blame-addition or doc:vc-annotate. If we want to ‚Äúwalk-along changes‚Äù
then we use doc:git-timemachine.
** Git gutter: Jumping between hunks                               :Disabled:
:PROPERTIES:
:CUSTOM_ID: What's-changed-who's-to-blame
:END:

Let's have, in a fringe, an indicator for altered regions in a version
controlled file.  The symbols ‚Äú+, =‚Äù appear in a fringe by default for
alterations ---we may change these if we like.
# Moreover, let's stage-&-commit straight from a working buffer.
#+begin_src emacs-lisp :tangle no
;; Hunk navigation and commiting.
(use-package git-gutter :config (global-git-gutter-mode))
;; Diff updates happen in real time according when user is idle.
#+END_SRC
# There's a fork, [[https://github.com/nonsequitur/git-gutter-plus][git-gutter+]], which provides additional features but was slow for me on large, 10k, files.

Let's set a hydra so we can press ~C-x v n n p n~ to move the next two
altered hunks, move back one, then move to the next. This saves me having
to supply the prefix ~C-x v~ each time I navigate among my alterations.
At any point we may also press ~u ùï©~ to denote ~C-u ‚ü™prefix‚ü´ ùï©~.
#+begin_src emacs-lisp :tangle no
(defhydra hydra-version-control (global-map "C-x v")
  "Version control"
  ;; Syntax: (extension method description)
  ("n" git-gutter:next-hunk      "Next hunk")
  ("p" git-gutter:previous-hunk  "Previous hunk")
  ("d" git-gutter:popup-hunk     "Show hunk diff")
  ("r" git-gutter:revert-hunk    "Revert hunk\n")
  ("c" git-gutter:stage-hunk     "Stage hunk")
  ("s" git-gutter:statistic      "How many added & deleted lines"))
#+END_SRC

Committing with ~C-x v c~ let's us use ~C-c C-k~ to cancel and ~C-c C-c~ to
submit the given message; ~C-c C-a~ to amend the previous commit.

Alternatively, we may use [[https://github.com/dgutov/diff-hl][diff-hl]]:
#+begin_src emacs-lisp :tangle no
;; Colour fringe to indicate alterations.
;; (use-package diff-hl)
;; (global-diff-hl-mode)
#+END_SRC

#+begin_src emacs-lisp :tangle no
;; Popup for who's to blame for alterations.
(use-package git-messenger
  :custom ;; Always show who authored the commit and when.
          (git-messenger:show-detail t)
          ;; Message menu let's us use magit diff to see the commit change.
          (git-messenger:use-magit-popup t))

;; View current file in browser on github.
;; More generic is ‚Äúbrowse-at-remote‚Äù.
(use-package github-browse-file )

;; Add these to the version control hydra.
;;
(defhydra hydra-version-control (global-map "C-x v")
  ("b" git-messenger:popup-message "Who's to blame?")
  ;; C-u C-x b ‚ï± u b ‚à∑ Also show who authored the change and when.
  ("g" github-browse-file-blame "Show file in browser in github")
  ("s" magit-status "Git status of current buffer"))
#+END_SRC

Perhaps ~C-x v b~ will motivate smaller, frequent, commits.

** URLs to git changes                                             :Disabled:
:PROPERTIES:
:header-args: :tangle no
:END:

Obtaining URL links to the current location of a file
---URLs are added to the kill ring.
Usefully, if [[https://gitlab.com/pidu/git-timemachine][git-timemachine-mode]] is active, the generated link
points to the version of the file being visited.
#+begin_src emacs-lisp :tangle no
(use-package git-link )

(defhydra hydra-version-control (global-map "C-x v")
  ("l" git-link "Git URL for current location"))
#+END_SRC

Read [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Version-Control.html#Version-Control][here]] for more about version control in general.

** Version Control with SVN ---Using Magit!                        :Disabled:
:PROPERTIES:
:header-args: :tangle no
:END:

| /Disabled: I seldom work with SVN anymore./ |

Let's use git as an interface to subversion repositories so that we can continue
to use =magit= as our version control interface.  The utility to do so is called
=git svn= ---note =git ùí≥= on a MacOS is the same as =git-ùí≥= on other systems.

#+begin_src emacs-lisp  :tangle no
(use-package magit-svn
  :hook (magit-mode . magit-svn-mode))
#+end_src

Here's an example. The following command checksout an SVN repo; afterwhich we may open a file
there and do =M-x magit-status= to get the expected porcelain git interface  ^_^
#+begin_src emacs-lisp :tangle no
(async-shell-command "mkdir ~/2fa3; git svn clone --username alhassm https://websvn.mcmaster.ca/csse2fa3/2019-2020_Term2 ~/2fa3/")
#+end_src

In the magit buffer, we may now use the ~N~ key which wraps the =git svn=
subcommands =fetch, rebase, dcommit, branch, tag=. For example:

1. Make changes to a file.
2. ‚ÄòStage‚Äô them with ~s~ and ‚Äòcommit‚Äô them with ~c~.
3. ‚ÄòPush‚Äô changes with ~N c~.

We get to pretend we're using ~git~ even though the underlying mechanism is ~svn~!
# Indeed, in a terminal ~git svn log~ will show an ~svn~ log with single pushed commits.

For move on =git svn=, see [[https://gist.github.com/rickyah/7bc2de953ce42ba07116][A simple guide to git-svn]] or [[https://www.viget.com/articles/effectively-using-git-with-subversion/][Effectively using Git with
  Subversion]].

(If I need to work with svn repos often enough, I'd extend my ~maybe-clone~
  utility above to account for them.)

** Github /within/ Emacs                                           :Disabled:
:PROPERTIES:
:CUSTOM_ID: Github-within-Emacs
:header-args: :tangle no
:END:

We can work with Github/Gitlab/etc from the comfort of Emacs Magit using the [[https://github.com/magit/forge][forge]] package.
+ In particular, it adds two new ‚Äútopics‚Äù to the Magit status page: =Issues= and =Pull Requests=.
  - We can tab on these to see their ‚Äúposts‚Äù ---the contributions to the conversations and /new/ commits.
  - [[https://magit.vc/manual/forge/Editing-Topics-and-Posts.html][Here]] is a list of actions that can be done on topics and posts.

#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

1. Make a file =~/.authinfo= whose top-most line is =machine api.github.com login ‚ü™ùëºùë∫ùë¨ùëπùëµùë®ùë¥ùë¨‚ü´^forge password ‚ü™ùëªùë∂ùë≤ùë¨ùëµ‚ü´= where ‚ü™‚ãØ‚ü´
   should be replaced by your Github username and a token ---which can be [[https://github.com/settings/tokens][created from this page]] with [[https://magit.vc/manual/forge/Token-Creation.html][permissions]] for
   ~repo, user, read:org~ checked-off.
   - For more detailed information, see [[https://magit.vc/manual/ghub/Creating-and-Storing-a-Token.html][this Forge manual page]].

2. Now open a Magit status buffer for a repository and run ~M-x forge-pull~, after which you should be able to see all issues and pull requests.
   - Alternatively, press ~N~ to see the forge menu.
   - Press ~N f f~ to pull latest information from the repository.
     + Note how pulling data from a forge‚Äôs API works the same way as pulling Git data does; you do it explicitly when
       you want to see the work done by others.
     + We can also ‚Äúc‚Äùreate a new ‚Äúp‚Äùull request or a new ‚Äúi‚Äùssue with ~N c p~ or ~N c i~, respectively.
     + [[https://www.youtube.com/watch?v=fFuf3hExF5w&ab_channel=ZaisteProgramming][~5 min video]]

To *review a pull request* press tab on ~Pull Requests~ then press ~b y~ to checkout that branch locally.

** COMMENT Browse remote files
:PROPERTIES:
:CUSTOM_ID: Browse-remote-files
:END:

  Sometimes you want to see the current file in Github; e.g., you select a
  region and press ~M-x browse-at-remote-kill~ to get the URL for that region in
  Github then you can send that URL to your peers when referencing something.
  - Or just ~M-x browse-at-remote~ to see it in Github.
  - [[https://github.com/rmuslimov/browse-at-remote][browse-at-remote: Browse target page on github/bitbucket from emacs buffers]].

#+begin_src emacs-lisp
;; Usage: [Optionally select a region then] M-x browse-at-remote[-kill]
(use-package browse-at-remote   :defer nil)
#+end_src
** COMMENT Elementary Version Control
:PROPERTIES:
:CUSTOM_ID: Elementary-Version-Control
:END:

[[http://www.linfo.org/hard_link.html][Soft links]] are pointers to other filenames, whereas hardlinks
are pointers to memory location of a given filename!
Soft links are preferable since they defer to the orginal filename
and can work across servers.

We can declare them as follows,
#+BEGIN_EXAMPLE shell
ln -s source_file myfile
#+END_EXAMPLE

If ~repo~ refers to a directory under version control
--or Dropbox-- we move our init file and emacs directory to it,
then make soft links to these locations so that whenever ~~/.emacs~
is accessed it will refer to ~repo/.emacs~ and likewise for ~.emacs.d~ :-)

On a new machine, copy-paste any existing emacs configs we want
to the ~repo~ folder then ~rm -rf ~~/.emacs*~ and then make the soft
links only.

#+BEGIN_EXAMPLE shell
repo=~/Dropbox     ## or my git repository: ~/dotfiles

cd ~

mv .emacs $repo/
ln -s $repo/.emacs .emacs

mv .emacs.elc $repo/
ln -s $repo/.emacs.elc .emacs.elc

mv .emacs.d/ $repo/
ln -s $repo/.emacs.d/ .emacs.d
#+END_EXAMPLE
Note the extra ~/~ after ~.emacs.d~!

You may need to unlink soft links if you already have them;
e.g., ~unlink .emacs.d~.

To make another softlink to a file, say in a blogging directory,
we ~cd~ to the location of interest then execute, say:
~ln -s $repo/.emacs.d/init.org init.org~

While we're at it, let's make this super-duper file (and another) easily
accessible --since we'll be altering it often--:
#+BEGIN_EXAMPLE shell
cd ~

ln -s dotfiles/.emacs.d/init.org init.org
ln -s alhassy.github.io/content/AlBasmala.org AlBasmala.org
#+END_EXAMPLE

Below I'll equip us with an Emacs ‚Äòporcelain‚Äô interface to git
--it makes working with version control tremendously convenient.
Moreover, I add a little pop-up so that I don't forget to commit often!

Finally, since I've symlinked my ~.emacs~:
#+begin_src emacs-lisp :tangle no
;; Don't ask for confirmation when opening symlinked files.
(setq vc-follow-symlinks t)
#+end_src
* Cosmetics
:PROPERTIES:
:CUSTOM_ID: Cosmetics
:header-args: :tangle init.el
:END:

Upon startup, we want to be greeted with a useful, yet unobtrusive, message
briefly detailing major system details. Moreover, the bottom-most area of the
screen should display battery life, data, & time. Likewise, we may have a casual
file explorer ---primarily to show-off to newcomers, since great functionality
is found with ~M-x dired~ ---doc:dired.

#+BEGIN_SRC emacs-lisp  :tangle init.el
;; Get org-headers to look pretty! E.g., * ‚Üí ‚äô, ** ‚Ü¶ ‚óØ, *** ‚Ü¶ ‚òÖ
;; https://github.com/emacsorphanage/org-bullets
(use-package org-bullets
  :defer nil
  :hook (org-mode . org-bullets-mode))
#+END_SRC

** Startup message: Emacs & Org versions
:PROPERTIES:
:CUSTOM_ID: Startup-message-Emacs-Org-versions
:END:

Let's always welcome ourselves when Emacs begins with a helpful message.  For
example, which user account is running and what are the version numbers of our
primary tools.

#+begin_src emacs-lisp
;; Silence the usual message: Get more info using the about page via C-h C-a.
(setq inhibit-startup-message t)

(defun display-startup-echo-area-message ()
  "The message that is shown after ‚Äòuser-init-file‚Äô is loaded."
  (message
      (concat "Welcome "      user-full-name
              "! Emacs "      emacs-version
              "; Org-mode "   org-version
              "; System "     (symbol-name system-type)
              "/"             (system-name)
              "; Time "       (emacs-init-time))))
#+end_src
Now my startup message is,
#+begin_example
Welcome Musa Al-hassy! Emacs 27.1; Org-mode 9.4.4; System darwin/Musas-MacBook-Air.local; Time 13.331914 seconds
#+end_example
:Manually_Computing_Init_Time:
#+BEGIN_SRC emacs-lisp :tangle no
(format "; Time %.3fs"
        (float-time (time-subtract (current-time) before-init-time)))
#+END_SRC
:End:

Let's change the Emacs frame to mention the name of the buffer in focus,
as well as a nice ‚Äòmotto‚Äô:
#+begin_src emacs-lisp
;; Keep self motivated!
(setq frame-title-format '("" "%b - Living The Dream (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà"))
#+end_src
** My to-do list: The initial buffer when Emacs opens up
:PROPERTIES:
:CUSTOM_ID: My-to-do-list-The-initial-buffer-when-Emacs-opens-up
:END:

I almost always have Emacs open; I don't need a dashboard, but would like to see
my to-do list and my init file, side-by-side.
#+BEGIN_SRC emacs-lisp
;; I have symlinks for various things, just follow them, do not ask me.
(setq vc-follow-symlinks t)

;; After my settings have been loaded, e.g., fancy priorities
;; and cosmetics, then open my notes files.
(add-hook 'emacs-startup-hook
          (lambda ()
            (load "~/my-life.el")
            (find-file "~/my-life.org")))
#+END_SRC

There is the neat-looking [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] package that provides an extensbile
yet minimalist splash screen showing recent files, projects, and bookmarks.

** A sleek, informative, & fancy mode line
:PROPERTIES:
:CUSTOM_ID: A-sleek-informative-and-fancy-mode-line
:END:

The ‚Äòmodeline‚Äô is a part near the bottom of Emacs that gives information about
the current buffer, such as its file-type/‚Äòmajor-mode‚Äô and enabled
extensions/‚Äòminor-modes‚Äô.  Let's use the [[https://github.com/seagle0128/doom-modeline][doom-modeline]], which is a /sleek &
minimalistic, yet fancy/ setup with the following notable perks:

+ Gives each buffer a nice icon in the modeline (denoting its major mode; e.g.,
  Lisp/JavaScript/Org/etc each get a cool icon).

+ Name of file becomes red when unsaved/modified.

+ Nice version control icon, with branch name.

+ Name of file is of the shape is shown as ‚Äúproject/file.ext‚Äù, when a project
 is detected using ~projectile.el~.

+ Flycheck error reporting is ugly by default, and one would consider using
  flycheck-status-emojis to make things look better in a simple modeline, but
  Doom-modeline gives a nice status indicators for Flycheck.

+ Shows ‚Äú+2‚Äù when the text scale is two above usual.

For fine-grained control on what/how things appear, there is
doc:doom-modeline-def-modeline and doc:doom-modeline-set-modeline.

NOTE: We need to run =M-x= doc:nerd-icons-install-fonts for doom-modeline to use pretty icons ---then restart Emacs.
#+begin_src emacs-lisp :tangle init.el
;; The modeline looks really nice with doom-themes, e.g., doom-solarised-light.
(use-package doom-modeline
  :defer nil
  :config (doom-modeline-mode))

  ;; Use minimal height so icons still fit; modeline gets slightly larger when
  ;; buffer is modified since the "save icon" shows up.  Let's disable the icon.
  ;; Let's also essentially disable the hud bar, a sort of progress-bar on where we are in the buffer.
  (setq doom-modeline-height 21)
  (setq doom-modeline-buffer-state-icon nil)
  (setq doom-modeline-hud t)
  (setq doom-modeline-bar-width 1)

  ;; Show 3 Flycheck numbers: ‚Äúred-error / yellow-warning / green-info‚Äù, which
  ;; we can click to see a listing.
  ;; If not for doom-modeline, we'd need to use flycheck-status-emoji.el.
  (setq doom-modeline-checker-simple-format nil)

  ;; Don't display the buffer encoding, E.g., ‚ÄúUTF-8‚Äù.
  (setq doom-modeline-buffer-encoding nil)

  ;; Inactive buffers' modeline is greyed out.
  ;; (let ((it "Source Code Pro Light" ))
  ;;   (set-face-attribute 'mode-line nil :family it :height 100)
  ;;   (set-face-attribute 'mode-line-inactive nil :family it :height 100))

  ;; A quick hacky way to add stuff to doom-modeline is to add to the mode-line-process list.
  ;; E.g.:  (add-to-list 'mode-line-process '(:eval (format "%s" (count-words (point-min) (point-max)))))
  ;; We likely want to add this locally, to hooks on major modes.
#+end_src

:Disabled__spaceline_modeline:

[[https://github.com/TheBB/spaceline][Spaceline]]

# I may not use the spacemacs [[https://www.emacswiki.org/emacs/StarterKits][starter kit]], since I find spacemacs to ‚Äúhide things‚Äù
# from me ---whereas Emacs ‚Äúencourages‚Äù me to learn more---, however it is a
# configuration and I enjoy reading Emacs configs in order to improve my own
# setup. From Spacemacs I've adopted Helm for list completion, its sleek light &
# dark themes, and its modified powerline setup.

#+begin_src emacs-lisp :tangle no
;; When using helm & info & default, mode line looks prettier.
(use-package spaceline
  :custom (spaceline-buffer-encoding-abbrev-p nil)
          ;; Use an arrow to seperate modeline information
          (powerline-default-separator 'arrow)
          ;; Show ‚Äúline-number : column-number‚Äù in modeline.
          (spaceline-line-column-p t)
          ;; Use two colours to indicate whether a buffer is modified or not.
          (spaceline-highlight-face-func 'spaceline-highlight-face-modified)
  :config (custom-set-faces '(spaceline-unmodified ((t (:foreground "black" :background "gold")))))
          (custom-set-faces '(spaceline-modified   ((t (:foreground "black" :background "cyan")))))
          (require 'spaceline-config)
          (spaceline-helm-mode)
          (spaceline-info-mode)
          (spaceline-emacs-theme))

(spaceline-toggle-buffer-size-off) ;; Not interested in how large a buffer is.
(spaceline-toggle-input-method-off) ;; Usually a ‚ÄúŒ†‚Äù symbol in the modeline, since I use Unicode input with Agda, denoting the current language environment, buffer coding system, and current input method.
(spaceline-toggle-buffer-encoding-abbrev-off) ;; buffer-encoding-abbrev: the line ending convention used in the current buffer (unix, dos or mac).
(spaceline-toggle-hud-off) ;; A tiny ‚Äúprogress bar‚Äù; shows the currently visible part of the buffer.
(spaceline-toggle-helm-buffer-id-off) ;; I don't need to see ‚ÄúHelm M-x‚Äù whenever I press ‚ÄúM-x‚Äù or other Helm-powered commands.
#+end_src

Other separators ---of modeline information--- that I've considered include
~'brace~ instead of an arrow, and ~'contour, 'chamfer, 'wave, 'zigzag~ which look
like browser tabs that are curved, boxed, wavy, or in the style of driftwood.
:End:

*** Menu to Toggle Minor Modes: A quick way to see all of my modes, and which are enabled
:PROPERTIES:
:CUSTOM_ID: Menu-to-Toggle-Minor-Modes-A-quick-way-to-see-all-of-my-modes-and-which-are-enabled
:END:

Enabled minor modes clutter up the modeline with their names, albeit some have
useful status information shown. We can either selectively pick which
names/status are shown using diminish.el, possibly forgetting which minor modes
are enabled or we can use minions.el to ‚Äúgather up‚Äù all enabled minor modes, and
recently enabled ones, under a single menu which doom-modeline shows as a simple
configurations gear icon. ‚öô. :gear:

#+begin_src emacs-lisp
  (setq doom-modeline-minor-modes t)
  (use-package minions

    :init (minions-mode 1))
#+end_src

*** Nice battery icon alongside with percentage, in doom-modeline
:PROPERTIES:
:CUSTOM_ID: Nice-battery-icon-alongside-with-percentage-in-doom-modeline
:END:
#+begin_src emacs-lisp  :tangle init.el
;; If not for doom-modeline, we'd need to use fancy-battery-mode.el.
(display-battery-mode +1)
#+end_src

#+begin_details [Posterity / Disabled] Fancy Battery Setup
Let's have it also show remaining battery life, coloured green if charging and
coloured yellow otherwise.  It is important to note that this package is no
longer maintained. It works on my machine.
#+BEGIN_SRC emacs-lisp :tangle no
;; Let's use a fancy indicator ‚Ä¶
(use-package fancy-battery
  :custom (fancy-battery-show-percentage  t)
          (battery-update-interval       15)
  :config (fancy-battery-mode))
#+END_SRC
#+end_details

*** Time & date
:PROPERTIES:
:CUSTOM_ID: Time-date
:END:
Let‚Äôs display the current time, with updates every second.

#+begin_src emacs-lisp  :tangle init.el
;; Show date and time as well.

;; [Simple Approach]
;; (setq display-time-day-and-date t)
;; (display-time)

;; [More Controlled Approach: Set date&time format]
;; a ‚âà weekday; b ‚âà month; d ‚âà numeric day, R ‚âà 24hr:minute.
(setq display-time-format "%a %b %d ‚ï± %r") ;; E.g.,:  Fri Mar 04 ‚ï± 03:42:08 pm
(setq display-time-interval 1) ;; Please update the time every second.
(display-time-mode)
#+end_src

But doc:display-time-mode shows me a bit more info that I actually don't care
for; so let's disable those.
#+begin_src emacs-lisp  :tangle init.el
;; I don't need the system load average in the modeline.
(setq display-time-default-load-average nil)
(setq display-time-load-average nil)
#+end_src

*** No Line, nor Column, Numbers  ---and no buffer percentage
Likewise, let's have the modeline display column numbers, but not line numbers.
Instead, let's have line numbers on the side of the buffer; moreover let's have
a uniform width for displaying line numbers, rather than having the width grow
as necessary.
#+BEGIN_SRC emacs-lisp  :tangle init.el
;; ;; Do not show me line numbers, nor column numbers, in the modeline
(column-number-mode -1)
(line-number-mode   -1)

;; Likewise, no need to show me ‚ÄúTop‚à£Mid‚à£Bot‚Äù in the modeline.
(setq-default mode-line-percent-position nil)
#+END_SRC

Line numbers are a /conventionally expected/ part of a user interface, but I've
realised that I seldom /need to see/ them. I can still jump to a line number
provided by a compilation error with kbd:M-g_g; and toggle line numbers on when
I'm pair programming with doc:display-line-numbers-mode.
- In Emacs, there are /buffer/ which exist and contain textual data, but to
  actually see them one requires a /window/. In the same vein, there are line
  numbers but I don't need to always see them.
- If I need an indication of ‚Äòprogress‚Äô, the modeline contains a percentage of
  how far I am in a buffer.
#+BEGIN_SRC emacs-lisp  :tangle init.el
;; (setq display-line-numbers-width-start t)
;; (global-display-line-numbers-mode      t)
#+END_SRC
*** Buffer names are necessarily injective :No_longer_needed_due_to_doom:Disabled:
:PROPERTIES:
:CUSTOM_ID: Buffer-names-are-necessarily-injective
:header-args: :tangle no
:END:

By default when multiple files sharing the same name are opened, say for
comparison from different directories, their buffers are named uniquely by
having the format ‚Äú‚ü®file-name‚ü© <ùìÉ>‚Äù, for numbers ùìÉ. It'd be more helpful
to have the buffer names reflect their location.
#+BEGIN_SRC emacs-lisp
;; Note that ‚Äòuniquify‚Äô is builtin.
(require 'uniquify)
(setq uniquify-separator "/"               ;; The separator in buffer names.
      uniquify-buffer-name-style 'forward) ;; names/in/this/style
#+END_SRC

            Note that this does not affect cloning buffers, kbd:C-x_4_c.

( A function /f/ is /injective/ precisely when it's /distinction-preserving/; i.e.,
  /x ‚â† y ‚â° f x ‚â† f y/. We can tell whether two things are the same or not, by
  ‚Äòzooming in‚Äô on their particular property ‚Äòf‚Äô, which may be easier to compare.
  E.g., object IDs, hashcodes, unique keys in database tables. )

( Why am I bringing this up? I like math and seldom get to use it; so why not! )

** Exquisite Fonts and Themes
:PROPERTIES:
:CUSTOM_ID: Exquisite-Fonts-and-Themes
:END:

Emacs' default theme leaves much to be desired: It does not look sleek and
shiny, which usually leaves first-timers with a poor, shallow, impression of the
system. Below we install a few themes that make Emacs look exquisite.  We cycle
between the chosen themes with kbd:C-c_t, doc:my/toggle-theme.

#+begin_details ‚Äúmy/toggle-theme‚Äù Implementation
+ ~M-x load-theme RET TAB~ shows all themes, including built-in ones,
  that may be loaded.
+ Loading multiple themes results in their pallets mixed.
  - ~M-x disable-theme~ to remove a theme from the current pallet.

--------------------------------------------------------------------------------

#+begin_src emacs-lisp :tangle init.el
;; Treat all themes as safe; no query before use.
(setf custom-safe-themes t)
#+end_src

+ The [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][Doom Themes]] also look rather appealing.
+ A showcase of many themes can be found [[https://emacsthemes.com/][here]].

--------------------------------------------------------------------------------

#+BEGIN_SRC emacs-lisp :tangle init.el
;; Infinite list of my commonly used themes.
(setq my/themes
      (cl-loop for (package . theme-variants-I-like) in
               ;; I like theme doom-flatwhite <3 It feels ‚Äúwarm‚Äù.
               ;; (I found out thanks to C-u C-c t!)
               '((doom-themes doom-flatwhite doom-snazzy doom-monokai-ristretto doom-laserwave doom-solarized-light doom-vibrant)
                 (solarized-theme solarized-gruvbox-dark solarized-gruvbox-light)
                 (stimmung-themes stimmung-themes-light stimmung-themes-dark)
                 (shanty-themes shanty-themes-light)
                 (apropospriate-theme apropospriate-light) ;; /super/ nice! Super ‚Äúclean‚Äù, like writing on paper
                 (tao-theme tao-yang) ;; nice light theme.
                 (leuven-theme leuven-dark leuven) ;; Nice minimal variant
                 (material-theme material-light)
                 (moe-theme moe-light)
                 (organic-green-theme organic-green)
                 (tango-plus-theme tango-plus)
                 ;; I like all 3 variants.
                 (minimal-theme minimal minimal-black minimal-light)
                 (espresso-theme espresso)
                 (emacs dichromacy)
                 (modus-themes modus-operandi-tinted))
               do (package-install package)
               append theme-variants-I-like))

(setcdr (last my/themes) my/themes)

#+END_SRC

kbd:C-c_t to toggle between the personal themes.
#+BEGIN_SRC emacs-lisp :tangle init.el
(cl-defun my/load-theme (&optional (new-theme (completing-read "Theme: " (custom-available-themes))))
  "Disable all themes and load the given one ---read from user when called interactively."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes)
  (load-theme new-theme)
  (message "Theme %s" new-theme))

(cl-defun my/toggle-theme (&optional (new-theme (pop my/themes)))
  "Disable all themes and load NEW-THEME, which defaults from ‚Äòmy/themes‚Äô.

When a universal prefix is given, ‚ÄúC-u C-c t‚Äù, we load a random
theme from all possible themes.  Nice way to learn about more
themes (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà"
  (interactive)
  (-let [theme (if current-prefix-arg
                   (nth (random (length (custom-available-themes)))
                        (custom-available-themes))
                 new-theme)]
    (my/load-theme theme)))

(global-set-key "\C-c\ t" 'my/toggle-theme)

(my/toggle-theme)
#+END_SRC

Apparently, there's already a package that accomplishes these goals and more:
[[https://github.com/myTerminal/theme-looper][theme-looper]]. I may switch to it, but for now my simple function above is
slightly informative, to me at least, about how themes work and it does what I
want.

...Actually, the above learning adventure has made it easy to provide a similar setup
for fonts üòÅ
#+end_details

Likewise, kbd:C-c_F, doc:my/toggle-font, to quickly change fonts (according to
mood üò∏). [I already use kbd:C-c_f, doc:my/org-mode-format, for the more likely
operation of formatting text.]
#+begin_details ‚Äúmy/toggle-font‚Äù Implementation

#+begin_src emacs-lisp :tangle init.el
(unless nil ;; my/work-machine?

  ;; Infinite list of my commonly used fonts
  (setq my/fonts
        '(;; NOPE: Breaks Gerrit! "Roboto Mono Light 14" ;; Sleek
          "Input Mono 14"
          "Source Code Pro Light 14" ;; thin, similar to Inconsolata Light
          "Papyrus 14"
          "Bradley Hand Light 12"
          ;; "Chalkduster 14" ;; Laggy!
          "Courier Light 12"
          "Noteworthy 9"
          "Savoye LET 14"
          "Fantasque Sans Mono 16"
          ))
  (setcdr (last my/fonts) my/fonts)

  ;; Let's ensure they're on our system
  ;; brew search "/font-/"   # List all fonts

  (shell-command "brew tap homebrew/cask-fonts")
  (system-packages-ensure "svn") ;; Required for the following font installs
  ;; No thanks! (system-packages-ensure "font-roboto-mono") ;; Makes Gerrit in Chrome look like Gibberish!
  (system-packages-ensure "font-input")
  (system-packages-ensure "font-source-code-pro")
  (system-packages-ensure "font-fira-mono")
  (system-packages-ensure "font-mononoki")
  (system-packages-ensure "font-monoid")
  (system-packages-ensure "font-menlo-for-powerline")
  (system-packages-ensure "font-fantasque-sans-mono")

;; Use ‚ÄúM-x set-face-font RET default RET‚Äù, or...
;; (set-face-font 'default "Source Code Pro Light14")

;; See ~2232 fonts
;; (append (fontset-list) (x-list-fonts "*" nil))

  (cl-defun my/toggle-font (&optional (new-font (pop my/fonts)))
  "Load NEW-FONT, which defaults from ‚Äòmy/fonts‚Äô.

When a universal prefix is given, ‚ÄúC-u C-c F‚Äù, we load a random
font from all possible themes.  Nice way to learn about more
fonts (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà"
  (interactive)
  (let* ((all-fonts (append (fontset-list) (x-list-fonts "*" nil)))
         (font (if current-prefix-arg
                   (nth (random (length all-fonts)) all-fonts)
                 new-font)))
    (set-face-font 'default font)
    (message "Font: %s" font)))

  (global-set-key "\C-c\ F" 'my/toggle-font)

  ;; Default font; the ‚Äúignore-‚ãØ‚Äù is for users who may not have the font.
  (ignore-errors (my/toggle-font "Fantasque Sans Mono 12"))
  (ignore-errors (my/toggle-font "Source Code Pro Light 14")))
#+end_src

#+end_details

In any Org file, type ~elisp:menu-set-font~; then you can click on this link to
get a nice font selection menu ---this can be useful for your own ‚Äòpersonal startup buffer‚Äô.

# Finally, for fun, let's colour all source blocks, in Org mode, by the background colour pink.
# (set-face-attribute 'org-block nil :background "pink")
# MA: This does not work well with dark themes; should use a theme-based setting.

Let's use the following theme and font, upon startup.
#+begin_src emacs-lisp :tangle init.el
(unless noninteractive
  ;; Breaks Gerrit: (my/toggle-font "Roboto Mono Light 14")
  (my/toggle-theme 'solarized-gruvbox-light))
#+end_src

** Never lose the cursor
:PROPERTIES:
:CUSTOM_ID: Never-lose-the-cursor
:END:

Let's have the entire line containing the cursour be slightly highlighted.
#+BEGIN_SRC emacs-lisp
;; Make it very easy to see the line with the cursor.
(global-hl-line-mode t)
#+END_SRC

Moreover, we reduce the mental strain of locating the cursour when navigation happens:
When we switch windows or scroll, for example, we get a wave of light near the cursor.
#+begin_src emacs-lisp
(use-package beacon
  :defer nil
  :config (setq beacon-color "#666600")
  :hook   ((org-mode text-mode) . beacon-mode))
#+end_src

** Dimming Unused Windows
:PROPERTIES:
:CUSTOM_ID: Dimming-Unused-Windows
:END:

Let's dim windows, and even the whole Emacs frame, when not in use.
#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :defer nil
  :config (dimmer-mode))
#+END_SRC

A more ‚Äòfine-grained‚Äô [[https://github.com/larstvei/Focus][tool]] dims all text except the ‚Äòparagraph‚Äô you're working
on. It's nifty, but not for me.

** Flashing when something goes wrong
:PROPERTIES:
:CUSTOM_ID: Flashing-when-something-goes-wrong
:END:

Enable flashing mode-line on errors. E.g., ~C-g~, or calling an unbound key
sequence, or misspelling a word.
#+BEGIN_SRC emacs-lisp
;; (setq visible-bell 1) ;; On MacOS, this shows a caution symbol ^_^

;; The doom themes package comes with a function to make the mode line flash on error.
(use-package doom-themes   :defer nil)
(require 'doom-themes-ext-visual-bell)
(doom-themes-visual-bell-config)
#+END_SRC

--------------------------------------------------------------------------------

+A blinking cursor rushes me to type; let's slow down.+ Recently I'm thinking that
a blinking cursours prompts me to continue upwards and onwards.
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 1)
#+END_SRC

** Hiding Scrollbar, tool bar, and menu
:PROPERTIES:
:CUSTOM_ID: Hiding-Scrollbar-tool-bar-and-menu
:END:

As a laptop user, screen space is important, so let's remove rarely used visual
items.
#+BEGIN_SRC emacs-lisp :tangle init.el
(unless noninteractive
  (tool-bar-mode   -1)    ;; No large icons please
  (scroll-bar-mode -1))   ;; No visual indicator please
  ;; (menu-bar-mode   -1) ;; The Mac OS top pane has menu options
#+END_SRC

** Highlight & complete parenthesis pair when cursor is near ;-)
:PROPERTIES:
:CUSTOM_ID: Highlight-complete-parenthesis-pair-when-cursor-is-near
:END:

Highlight matching ‚Äòparenthesis‚Äô when near one of them.
#+begin_src emacs-lisp :tangle init.el
(setq show-paren-delay  0)
(setq show-paren-style 'mixed)
(show-paren-mode)
#+end_src

Colour parens, and other delimiters, depending on their depth.
Very useful for parens heavy languages like Lisp.
#+begin_src emacs-lisp :tangle init.el
(use-package rainbow-delimiters
  :disabled
  :hook ((org-mode prog-mode text-mode) . rainbow-delimiters-mode))
#+end_src

For example:
#+begin_src emacs-lisp :tangle no
(blue (purple (forest (green (yellow (blue))))))
#+end_src

There is a powerful package called ‚Äòsmartparens‚Äô for working with pair-able
characters, but I've found it to be too much for my uses. Instead I'll utilise
the lightweight package ~electric~, which Emacs provides out of the box.
#+BEGIN_SRC emacs-lisp :tangle init.el
(electric-pair-mode 1)
#+END_SRC
It supports, by default, ACSII pairs ~{}, [], ()~ and Unicode ~‚Äò‚Äô, ‚Äú‚Äù, ‚ü™‚ü´, ‚ü®‚ü©~.

When writing Lisp, it is annoyong to have ‚Äò<‚Äô and ‚Äò>‚Äô be completed
/and/ considered as pairs.  Let's disassociate them from both notions.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; The ‚Äò<‚Äô and ‚Äò>‚Äô are not ‚Äòparenthesis‚Äô, so give them no compleition.
(setq electric-pair-inhibit-predicate
      (lambda (c)
        (or (member c '(?< ?> ?~)) (electric-pair-default-inhibit c))))

;; Treat ‚Äò<‚Äô and ‚Äò>‚Äô as if they were words, instead of ‚Äòparenthesis‚Äô.
(modify-syntax-entry ?< "w<")
(modify-syntax-entry ?> "w>")
#+END_SRC

:Rainbow_delims:
#+BEGIN_SRC emacs-lisp :tangle no
;; Act as usual unless a ‚Äò<‚Äô or ‚Äò>‚Äô is encountered.
;; ( char-at is really ‚Äúcharacter at poisition‚Äù; C-h o! )
(setq rainbow-delimiters-pick-face-function
      (lambda (depth match loc)
        (unless (member (char-after loc) '(?< ?>))
          (rainbow-delimiters-default-pick-face depth match loc))))
#+END_SRC
:End:

*Adding Org-emphasise markers for pair completion ---Disabled.*

Let's add the org-emphasises markers: If we select a word then press =*=, it
becomes bold; likewise for ~/~ for emphasise.
#+BEGIN_SRC emacs-lisp :tangle no
(setq electric-pair-pairs
         '((?~ . ?~)
           (?* . ?*)
           (?/ . ?/)))

;; Let's also, for example, avoid obtaining double ‚Äò~‚Äô and ‚Äò/‚Äô when searching for a file.

;; Disable pairs when entering minibuffer
(add-hook 'minibuffer-setup-hook (lambda () (electric-pair-mode 0)))

;; Renable pairs when existing minibuffer
(add-hook 'minibuffer-exit-hook (lambda () (electric-pair-mode 1)))
#+END_SRC

I use ‚Äò~‚Äô and ‚Äò/‚Äô too much during file navigation, and ‚Äò*‚Äô when marking numerous
Org headers, for which the ‚Äòcompleted closing pair‚Äô must tiresomely be deleted.
** Proportional fonts for Headlines
:PROPERTIES:
:CUSTOM_ID: Proportional-fonts-for-Headlines
:END:

Let's have headings stick out a bit.
+ The larger headings are cute and reminicint of word processors, but having
  headings coloured is enough ---the larger size is too much.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-document-title nil :height 2.0)
;; (set-face-attribute 'org-level-1 nil :height 1.0)
;; Remaining org-level-ùíæ have default height 1.0, for ùíæ : 1..8.
;;
;; E.g., reset org-level-1 to default.
;; (custom-set-faces '(org-level-1 nil))
#+END_SRC

Remember you can always use Emacs' Custom utility to get Lisp incantations ;-)
---See notes on Custom above.

** Making Block Delimiters Less Intrusive
:PROPERTIES:
:CUSTOM_ID: Making-Block-Delimiters-Less-Intrusive
:END:

Let us render Org-mode's ~#+begin_src~ and ~#+end_src~ less obtrusively by,
e.g., having the former render as a pencil marker ~‚úé~ and the latter as a
tombstone ~‚ñ°~ ---reminiscent of Halmos' QED end-of-proof marker.
# His setup also accounts for quotes.

#+begin_details Rasmus‚Äô Incantation
This is from [[https://pank.eu/blog/pretty-babel-src-blocks.html#coderef-symbol][Rasmus Roulund]].
#+begin_src emacs-lisp
  (defvar-local rasmus/org-at-src-begin -1
    "Variable that holds whether last position was a ")

  (defvar rasmus/ob-header-symbol ?‚ò∞
    "Symbol used for babel headers")

  (defun rasmus/org-prettify-src--update ()
    (let ((case-fold-search t)
          (re "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*")
          found)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward re nil t)
          (goto-char (match-end 0))
          (let ((args (org-trim
                       (buffer-substring-no-properties (point)
                                                       (line-end-position)))))
            (when (org-string-nw-p args)
              (let ((new-cell (cons args rasmus/ob-header-symbol)))
                (cl-pushnew new-cell prettify-symbols-alist :test #'equal)
                (cl-pushnew new-cell found :test #'equal)))))
        (setq prettify-symbols-alist
              (cl-set-difference prettify-symbols-alist
                                 (cl-set-difference
                                  (cl-remove-if-not
                                   (lambda (elm)
                                     (eq (cdr elm) rasmus/ob-header-symbol))
                                   prettify-symbols-alist)
                                  found :test #'equal)))
        ;; Clean up old font-lock-keywords.
        (font-lock-remove-keywords nil prettify-symbols--keywords)
        (setq prettify-symbols--keywords (prettify-symbols--make-keywords))
        (font-lock-add-keywords nil prettify-symbols--keywords)
        (while (re-search-forward re nil t)
          (font-lock-flush (line-beginning-position) (line-end-position))))))

  (defun rasmus/org-prettify-src ()
    "Hide src options via `prettify-symbols-mode'.

  `prettify-symbols-mode' is used because it has uncollpasing. It's
  may not be efficient."
    (let* ((case-fold-search t)
           (at-src-block (save-excursion
                           (beginning-of-line)
                           (looking-at "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*"))))
      ;; Test if we moved out of a block.
      (when (or (and rasmus/org-at-src-begin
                     (not at-src-block))
                ;; File was just opened.
                (eq rasmus/org-at-src-begin -1))
        (rasmus/org-prettify-src--update))
      ;; Remove composition if at line; doesn't work properly.
      ;; (when at-src-block
      ;;   (with-silent-modifications
      ;;     (remove-text-properties (match-end 0)
      ;;                             (1+ (line-end-position))
      ;;                             '(composition))))
      (setq rasmus/org-at-src-begin at-src-block)))

  (defun rasmus/org-prettify-symbols ()
    (mapc (apply-partially 'add-to-list 'prettify-symbols-alist)
          (cl-reduce 'append
                     (mapcar (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                             `(("#+begin_src" . ?‚úé) ;; ‚û§ üñù ‚ûü ‚û§ ‚úé
                               ("#+end_src"   . ?‚ñ°) ;; ‚èπ
                               ("#+header:" . ,rasmus/ob-header-symbol)
                               ("#+begin_quote" . ?¬ª)
                               ("#+end_quote" . ?¬´)))))
    (turn-on-prettify-symbols-mode)
    (add-hook 'post-command-hook 'rasmus/org-prettify-src t t))


;; Last up¬≠dated: 2019-06-09
#+end_src
#+end_details

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'rasmus/org-prettify-symbols)
(org-mode-restart)
#+END_SRC

His development relies on built-in prettify-symbols-mode, which
disguises strings in a buffer for the sake of readability or
aesthetics.  Following the example in the documentation, ~C-h f
prettify-symbols-mode~, we can quickly approximate his efforts for
~example~ blocks as follows, however a main issue is that source blocks
have busybodied headers which his setup disguises as ‚Äò‚â°‚Äô.
#+begin_src emacs-lisp
(global-prettify-symbols-mode)

(defvar my/prettify-alist nil
  "Musa's personal prettifications.")

(cl-loop for pair in '(;; Example of how pairs like this to beautify org block delimiters
                       ("#+begin_example" . (?‚Ñ∞ (Br . Bl) ?‚áí)) ;; ‚Ñ∞‚áí
                       ("#+end_example"   . ?‚áê)                 ;; ‚áê
                       ;; Actuall beautifications
                       ("==" . ?‚âà) ("===" . ?‚âà) ;; ("=" . ?‚âî) ;; Programming specific prettifications
                       ("i32" . ?‚Ñ§) ("u32" . ?‚Ñï) ("f64" . ?‚Ñù) ;; Rust specific
                       ("bool" . ?ùîπ)
                       ;; ("\"\"\"\n" . ?‚Äú) ("\"\"\"" . ?‚Äù)
                       ("\"\"\"" . ?‚Äú)
                       ("fn" . ?Œª)
                       ("<=" . ?‚â§) (">=" . ?‚â•)
                       ("->" . ?‚Üí) ("-->". ?‚ü∂) ;; threading operators
                       ("[ ]" . ?‚ñ°) ("[X]" . ?‚òë) ("[-]" . ?‚óê)) ;; Org checkbox symbols
         do (push pair my/prettify-alist))

;; Replace all Org [metadata]keywords with the ‚Äú‚ñ∑‚Äù symbol; e.g., ‚Äú#+title: Hello‚Äù looks like ‚Äú‚ñ∑ Hello‚Äù.
(cl-loop for keyword in '(title author email date description options property startup export_file_name html_head fileimage filetags)
         do (push (cons (format "#+%s:" keyword) ?‚ñ∑) my/prettify-alist))

(cl-loop for hk in '(text-mode-hook prog-mode-hook org-mode-hook)
      do (add-hook hk (lambda ()
                        (setq prettify-symbols-alist
                              (append my/prettify-alist prettify-symbols-alist)))))


(add-hook 'org-mode-hook (lambda () (push '("# " . (?üé∂ (Br . Bl) ?\ )) prettify-symbols-alist)))
#+end_src

For more on prettify-symbols-mode, read the informative [[https://tony-zorman.com/posts/pretty-latex.html][Prettifying LaTeX Buffers]].

#+RESULTS:

:Did_it_work:
#+begin_example lisp
(<= (+ 1 1) (--> 2))

1 =
2 ==
3 ===
#+end_example
:End:

See [[http://www.modernemacs.com/post/prettify-mode/][‚ÄúMathematical Notation in Emacs‚Äù]] for how such prettifications can
make verbose (Python) scripts much more readable by employing more
economical disguises.

A nice sanity:
#+BEGIN_SRC emacs-lisp
;; Un-disguise a symbol when cursour is inside it or at the right-edge of it.
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+END_SRC

** Hiding Emphasise Markers, Inlining Images, and LaTeX-as-PNG
:PROPERTIES:
:CUSTOM_ID: Hiding-Emphasise-Markers-Inlining-Images-and-LaTeX-as-PNG
:END:

:yay_it_worked:

$e^x = \sum_{n = 0}^\infty \frac{x^n}{n!}$

~awkward~ or $not$

:end:

Let's make some things prettier than they appear by default.
#+BEGIN_SRC emacs-lisp
;; org-mode math is now highlighted ;-)
(setq org-highlight-latex-and-related '(latex))

;; Extra space between text and underline line
(setq x-underline-at-descent-line t)

;; Hide the *,=,/ markers
(setq org-hide-emphasis-markers t)

;; Let‚Äôs limit the width of images inlined in org buffers to 400px.
(setq org-image-actual-width 400)

;; Visually, I prefer to hide the markers of macros, so let‚Äôs do that:
;;  {{{go(here)}}} is shown in Emacs as go(here)
(setq org-hide-macro-markers t)

;; On HTML exports, Org-mode tries to include a validation link for the exported HTML. Let‚Äôs disable that since I never use it.
;; (setq org-html-validation-link nil)

;; Musa: This is super annoying, in practice.
(setq org-pretty-entities nil) ;; Also makes subscripts (x_{sub script}) and superscripts (x^{super script}) appear in org in a WYSIWYG fashion.
;; to have \alpha, \to and others display as utf8
;; http://orgmode.org/manual/Special-symbols.html
;;
;; Be default, any consectuive string after ‚Äú_‚Äù or ‚Äú^‚Äù will be shown in WYSIWYG fashion; the following requires ‚Äú^{‚ãØ}‚Äù instead.
;; (setq org-use-sub-superscripts (quote {}))
#+END_SRC
Org pretty entities seems rather impressive ---=M-x org-entities-help= to see all
possibilities, or add your own. I'm already using the Agda input method, so I
wont use Org's ---Agda's gives me a tiny menu narrowing possibilities as I type.
However, it does make subscripts (x_{sub script}) and superscripts (x^{super script}) appear in Org in a WYSIWYG fashion.

--------------------------------------------------------------------------------

Automatically display emphasis markers and links when the cursor is on them.
(c.f. ~fragtog~ below)
#+begin_src emacs-lisp
(use-package org-appear
  :disabled t
  :hook (org-mode . org-appear-mode)
  :init (setq org-appear-autoemphasis  t
              org-appear-autolinks nil
              org-appear-autosubmarkers nil))
#+end_src

--------------------------------------------------------------------------------

The following is now disabled (yet again, as of Dec/31/2020) ---it makes my system slower than I'd like.
#+BEGIN_SRC emacs-lisp :tangle no
;; Show inline images when loading a new Org file.
(setq org-startup-with-inline-images t)

;; Whenever a src block is run, redisplay images so they're up-to-date.
;; Very useful when using ‚Äòob-latex-as-png‚Äô, below.
(add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images)

;; Automatically convert LaTeX fragments to inline images.
(setq org-startup-with-latex-preview t)
#+END_SRC

--------------------------------------------------------------------------------

# latex-preview-in-org

Org mode supports inline image previews of LaTeX fragments; e.g., $e^{i \cdot
\pi} - 1 = 0$ or $\substack{ùîπ \\ ‚Üì \\ ùíú}$.  These can be toggled with
kbd:C-c_C-x_C-l.  [[https://github.com/io12/org-fragtog][Org-fragtog]] automates this, so fragment previews are disabled
for editing when your cursor steps onto them, and re-enabled when the cursor
leaves.

 #+BEGIN_SRC emacs-lisp
;; Automatically toggle LaTeX previews when cursour enters/leaves them
(use-package org-fragtog
  :disabled t
  :hook (org-mode . org-fragtog-mode))
 #+END_SRC

doc:org-latex-preview, kbd:C-c_C-x_C-l, renders ~$e^{i \pi} + 1 = 0$~ into a
really nice inline image: $e^{i \pi} + 1 = 0$. It also works for LaTeX
environments ---for personal environments, just ~(add-to-list
'org-latex-packages-alist "LaTeX definitions here")~.

#+begin_src emacs-lisp
;; Make previews a bit larger
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

;; I use a lot of Unicode, so let's always include a unicode header.
(maybe-clone "https://armkeh.github.io/unicode-sty/")
(setq org-format-latex-header
      (concat org-format-latex-header
              "\n\\usepackage{\\string~\"/unicode-sty/unicode\"}"))
;;
;; Now this looks nice too!
;; $\substack{ùîπ \\ ‚Üì \\ ùíú}$ and $\mathbb{B}$.

;; Always support unicode upon LaTeX export
;; No need to explicitly import armkeh's unicode-sty in each org file.
(add-to-list 'org-latex-packages-alist
  "\n\\usepackage{\\string~\"/unicode-sty/unicode\"}")
#+end_src

This approach does not work well for forming diagrams; I've tried to make tikzcd
work this way and failed.  Using ~ob-latex-as-png~ as a substitute.
# work this way and failed.  Using [doc : org-babel-execute:latex-as-png][ob-latex-as-png] as a substitute.
:calc:
#+begin_src emacs-lisp :tangle no
;; \step should be local to \begin{calc}‚ãØ\end{calc}!
(add-to-list 'org-latex-packages-alist
"\\def\\BEGINstep{ \\{ }
\\def\\ENDstep{ \\} }
\\newcommand{\\step}[2][=]{ \\\\ #1 \\;\\; & \\qquad \\color{maroon}{\\BEGINstep \\text{ #2 } \\ENDstep} \\\\ & }
\\newenvironment{calc}{\\begin{align*} & }{\\end{align*}}")

; (pop org-latex-packages-alist)

;; See also org-format-latex-header
#+end_src
:End:

# LaTeX Rendering: Support ‚Äúlatex-as-png‚Äù src blocks, which show LaTeX as PNGs
#    LaTeX-Rendering-Support-latex-as-png-src-blocks-which-show-LaTeX-as-PNGs

 #+BEGIN_SRC emacs-lisp
;; Support ‚Äúlatex-as-png‚Äù src blocks, which show LaTeX as PNGs
(use-package ob-latex-as-png :disabled t)
 #+END_SRC

--------------------------------------------------------------------------------

Use ~ref:my-stuff~ to refer to an Org entity with ~#+name: my-stuff~; which must
have a ~#+caption: ‚ãØ~ as well. Example entities include tables and source
blocks; as well as figure blocks. For equation blocks, you must use a
~\label{‚ãØ}~ directly.

 #+begin_src emacs-lisp
;; Use the ‚Äú#+name‚Äù the user provides, instead of generating label identifiers.
(setq org-latex-prefer-user-labels t)
 #+end_src

** Show off-screen heading at the top of the window
:PROPERTIES:
:CUSTOM_ID: Show-off-screen-heading-at-the-top-of-the-window
:END:

In case we forgot which heading we're under, let's keep
the current heading stuck at the top of the window.
#+BEGIN_SRC emacs-lisp
 (use-package org-sticky-header
  :defer nil
  :hook (org-mode . org-sticky-header-mode)
  :config
  (setq-default
   org-sticky-header-full-path 'full
   ;; Child and parent headings are seperated by a /.
   org-sticky-header-outline-path-separator " / "))
#+END_SRC
** Powerful Directory Editing with ~dired :Disabled:~
:PROPERTIES:
:CUSTOM_ID: Powerful-Directory-Editing-with-dired
:header-args: :tangle no
:END:

‚ü® ~C-x C-v~ to open a file or directory in dired, using the current buffer. ‚ü©

As mentioned earlier, ~dired~ is Emacs' built-in directory editor; it's opened
with ~C-x d~.  /Dired let's us treat directories as textual objects!/ In dired,
press ~h~ to see the many actions available. Here's a few...

#+begin_details Super Terse ‚Äòdired‚Äô Tutorial

+ ~(~ toggles hiding entry details, such as modification date and ownership
+ ~s~ sort entries; modeline will display ‚ÄúDired by date‚Äù or ‚ÄúDired by name‚Äù.
+ ~o~ to open entry in anOther window; or ~RET~ to open in place.
+ ~+~ to create a new directory; or ~M-x make-directory~.
+ ~/~ to filter entries; with ~which-key~, possible completions pop-up.
  - E.g., ~/ f~ shows only files or ~/ . png~ to obtain all entries with extension
    ~png~.
  - ~/ i g~ to hide git-ignored items ^_^
  - ~/ /~ to remove all filters.
+ ~TAB~ to navigate between different groupings of entries.
  - ~RET~ on a drawer heading toggles folding it ^_^
#+end_details

The [[https://github.com/Fuco1/dired-hacks#dired-hacks-utils][dired-hacks]] family of packages lets us, say, get a dired buffer out of a shell
incantation that lists files, or use dired to open files with external tools.
Below we use three of its packages.

Pressing ~i~ inserts a directory's children under it, indented, in the current
buffer. Useful to see what's there.
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :defer nil
  :bind (:map dired-mode-map
              ("i" . dired-subtree-toggle)))
#+END_SRC

When directory ~ùí≥~ has only one child ~ùí¥~, then in dired, instead of ~ùí≥~, show me ~ùí≥/ùí¥~
with ~ùí≥~ greyed out.
#+BEGIN_SRC emacs-lisp
(use-package dired-collapse
  :defer nil
  :hook (dired-mode . dired-collapse-mode))
#+END_SRC

Begin dired with certain entries grouped together, according to some filtering
requirement; and with ‚Äúgarbage‚Äù files not shown ---i.e., those ending in
~.aux, .out~, etc.
#+BEGIN_SRC emacs-lisp
(use-package dired-filter
  :defer nil
  :hook (dired-mode . (lambda () (dired-filter-group-mode)
                                 (dired-filter-by-garbage)))
  :custom
    (dired-garbage-files-regexp
      "\\(?:\\.\\(?:aux\\|bak\\|dvi\\|log\\|orig\\|rej\\|toc\\|out\\)\\)\\'")
    (dired-filter-group-saved-groups
      '(("default"
         ("Org"    (extension "org"))
         ("Executables" (exexutable))
         ("Directories" (directory))
         ("PDF"    (extension "pdf"))
         ("LaTeX"  (extension "tex" "bib"))
         ("Images" (extension "png"))
         ("Code"   (extension "hs" "agda" "lagda"))
         ("Archives"(extension "zip" "rar" "gz" "bz2" "tar"))))))
#+END_SRC

#+begin_details [Disabled] Neotree: Traditional Directory Tree Navigation
link-here:Neotree-Traditional-Directory-Tree-Navigation

We open a nifty file manager upon startup.
#+BEGIN_SRC emacs-lisp :tangle no
;; Sidebar for project file navigation
(use-package neotree

  :disabled
  :config (global-set-key "\C-x\ d" 'neotree-toggle)
          (setq neo-theme 'icons)) ;; Uses all-the-icons from ¬ß Booting Up

;; Open it up upon startup.
;; (neotree-toggle)
#+END_SRC
By default ~C-x d~ invokes ~dired~, but I prefer ~neotree~ for file
management.

  ‚ü® Edit: As a naive user, this is what I thought; yet a year later,
                  I've almost never used neotree. ‚ü©

Useful navigational commands include
+ ~U~ to go up a directory.
+ ~C-c C-c~ to change directory focus; ~C-C c~ to type the directory out.
+ ~?~ or ~h~ to get help and ~q~ to quit.

As always, to go to the neotree pane when it's the only other window,
execute ~C-x o~.

I /rarely/ make use of this feature; company mode & Helm together quickly provide
an automatic replacement for nearly all of my uses.

+ Reminiscent of GUI file managers is [[https://github.com/ralesi/ranger.el#features][ranger]]; e.g., it has multi-column
  display of parent directories along with a file preview mechanism.
#+end_details

** Persistent Scratch Buffer
:PROPERTIES:
:CUSTOM_ID: Persistent-Scratch-Buffer
:END:

The ~*scratch*~ buffer is a nice playground for temporary data or experiments.

However, by default its contents are not saved --which may be an issue if we
have not relocated our playthings to their appropriate files. Whence let's save
& restore the scratch buffer by default.
#+BEGIN_SRC emacs-lisp
(use-package persistent-scratch

  ;; In this mode, the usual save key saves to the underlying persistent file.
  :bind (:map persistent-scratch-mode-map
              ("C-x C-s" . persistent-scratch-save)))
#+END_SRC

We might accidentally close this buffer, so we could utilise the following.
#+BEGIN_SRC emacs-lisp
(defun scratch ()
   "Recreate the scratch buffer, loading any persistent state."
   (interactive)
   (switch-to-buffer-other-window (get-buffer-create "*scratch*"))
   (condition-case nil (persistent-scratch-restore) (insert initial-scratch-message))
   (org-mode)
   (persistent-scratch-mode)
   (persistent-scratch-autosave-mode 1))

;; This doubles as a quick way to avoid the common formula: C-x b RET *scratch*

;; Upon startup, close the default scratch buffer and open one as specfied above
(ignore-errors (kill-buffer "*scratch*") (scratch))
#+END_SRC

I use Org-mode often, so that's how I want things to appear.
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message (concat
  "#+title: Persistent Scratch Buffer"
  "\n#\n# Welcome! This‚Äô a place for trying things out."
  "\n#\n# ‚ü® ‚ÄòC-x C-s‚Äô here saves to ~/.emacs.d/.persistent-scratch ‚ü© \n\n"))
#+END_SRC

** Tabs                                                            :Disabled:
:PROPERTIES:
:CUSTOM_ID: Tabs
:header-args: :tangle no
:END:

I really like my Helm-supported ~C-x b~, but the visial appeal of a [[https://github.com/manateelazycat/awesome-tab][tab bar]] for Emacs
is interesting. Let's try it out and see how long this lasts ---it may be like Neotree:
Something cute to show to others, but not as fast as the keyboard.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package awesome-tab
  :disabled t
  :quelpa (awesome-tab :fetcher git :url "https://github.com/manateelazycat/awesome-tab.git")
  :config (awesome-tab-mode t))

;; Show me /all/ the tabs at once, in one group.
(defun awesome-tab-buffer-groups ()
  (list (awesome-tab-get-group-name (current-buffer))))
#+END_SRC

It's been less than three days and I've found this utility to be unhelpful, to me anyhow.

An alternative is [[https://github.com/ema2159/centaur-tabs][centaur-tabs.]]

** Window resizing using the golden ratio                          :Disabled:
:PROPERTIES:
:CUSTOM_ID: Window-resizing-using-the-golden-ratio
:header-args: :tangle no
:END:

Let's load the following package, which automatically resizes windows so that
the window containing the cursor is the largest, according to the golden ratio.
Consequently, the window we're working with is nice and large yet the other windows
are still readable.

#+begin_src emacs-lisp :tangle no
(use-package golden-ratio
  :disabled t
  :init (golden-ratio-mode 1))
#+end_src

After some time this got a bit annoying and I'm no longer  using this.

An alternative, also disabled:
#+begin_src emacs-lisp :tangle no
;; An automatic window-resizing mechanism.
;; A ‚Äúcalmer‚Äù alternative to golden-ratio.
;; https://github.com/cyrus-and/zoom
(use-package zoom :config (zoom-mode t))
#+end_src

** Org-Emphasise for Parts of Words                                :Disabled:
:PROPERTIES:
:CUSTOM_ID: Org-Emphasise-for-Parts-of-Words
:header-args: :tangle no
:END:

From [[https://stackoverflow.com/a/24540651/3550444][stackoverflow]], the following incantation allows us to have
parts of works emphasied with org-mode; e.g.,
/half/ed, ~half~ed, and right in the m*idd*le! Super cool stuff!
#+BEGIN_SRC emacs-lisp :tangle no
(setcar org-emphasis-regexp-components " \t('\"{[:alpha:]")
(setcar (nthcdr 1 org-emphasis-regexp-components) "[:alpha:]- \t.,:!?;'\")}\\")
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
#+END_SRC

I've disabled this feature since multiple occurrences
of an emphasise marker are sometimes treated as one
lengthy phrase being emphasised.

** Preview link under cursor                                       :Disabled:
:PROPERTIES:
:CUSTOM_ID: Preview-link-under-cursor
:header-args: :tangle no
:END:
When cursor sits on a URL/Image/File link, try to preview it in a tooltip.
- Useful to quickly preview files and images.
- See also: https://github.com/jcs-elpa/preview-it

#+begin_src emacs-lisp
(quelpa '(preview-it :repo "jcs-elpa/preview-it" :fetcher github))
;; (global-preview-it-mode)
#+end_src

This also works nicely when I'm looking to open a file; e.g., ~C-x C-f
~/.emacs.d/.as TAB~ to preview my ~.aspell.en.pws~ (Emacs personal dictionary) file
in a tooltip.
# (Sadly, the preview closes my ~M-x~ session when previewing an org file.)
# Not entirely true; but it's happened with some org files.

Likewise, I'd like to preview line when executing the doc:goto-line / kbd:M-g_M-g command.
#+begin_src emacs-lisp
(quelpa '(goto-line-preview :repo "jcs-elpa/goto-line-preview" :fetcher github))
(global-set-key [remap goto-line] 'goto-line-preview)
#+end_src

** Replace phrases with nice SVG labels :Disabled:Causes_Org_rendering_issues:
:PROPERTIES:
:CUSTOM_ID: Replace-phrases-with-nice-SVG-labels
:header-args: :tangle no
:END:

:TODO_What_kind_of_Org_rendering_issues_are_caused:
Some org headings are not fontified, and Org links are not fontified; e.g.,

  üìÜ [[https://calendar.google.com/calendar/u/0/r][Calendar]] ‚úâÔ∏è

+ I have to copy-paste it to get it to fontify.
+ Likewise, Org headings need to be modified (e.g. pressing `t` to make them todo) to get them fontified.
:End:

[[ https://github.com/rougier/svg-tag-mode][SVG tags mode]] let's us replase arbitrary regular expressions with beautiful SVG
images that can be /clicked/ to produce an action, and may have a tooltip to
provide contextual information. Essentially an alternative to the built-in
doc:font-lock-mode, which performs arbitrary syntax highlighting.
- For more power, use the ~svg-lib~ package.
- The docs have nice examples. [[https://github.com/rougier/svg-tag-mode/blob/main/examples/example-2.el][Here]] are more useful examples.

# Below I setup a function, doc : my/svg-tag-declare-badge to /declaratively/ produce SVG badges.

#+begin_src emacs-lisp
(use-package svg-tag-mode
    :defer nil
  :hook (org-mode prog-mode)
  ;; :config (global-svg-tag-mode) ;; Nope: Breaks xwidget-webkit-browse-url, issue#28.
  :config
  (cl-defun my/svg-tag-declare-badge (template face &optional tooltip-message-upon-hover)
    ;; Example faces: 'org-level-1 'org-todo 'font-lock-doc-face
    "Given a TEMPLATE of the shape \"ùëø‚ùôùíÄ\", make SVG badge whose tag is ùëø and label is ùíÄ.

     When `svg-tags-mode' is enabled, every occurence of  \"\\(ùëø\\)\\(ùíÄ\\)\"
     is replaced by an SVG image essentially displaying ‚Äú[ùëø‚à£ùíÄ]‚Äù using the given FACE.
     This badge can be clicked to show all instances in the buffer.
     You can see the badges documentation / intentions / help-message when you hover over it;
     to see TOOLTIP-MESSAGE-UPON-HOVER.

     Both ùëø and ùíÄ are regeular expressions; ‚Äú‚ùô‚Äù serves as the SVG tag-label delimiter
     ---i.e., it saves as from writing \"\\(ùëø\\)\\(ùíÄ\\)\". Moreover, the SVG is only active
     when regexp \"\\(ùëø\\)\\(ùíÄ\\)\" matches an instance."

    ;; Append tooltip message with a notice on what happens upon click.
    (--> "Click on me to all see occurrences of this badge, in the current buffer!"
         (if tooltip-message-upon-hover (concat tooltip-message-upon-hover "\n\n" it) it)
         (setq tooltip-message-upon-hover it))

    (-let [(tag label) (s-split "‚ùô" template)]
      (-let [click-to-show-all-buffer-occurrences `(lambda () (interactive) (occur (concat ,tag ,label)))]
       ;; Make an SVG for the tag.
       (push
        (cons (format "\\(%s\\)%s" tag label) `((lambda (tag) (svg-tag-make (s-chop-suffix ":" (s-chop-prefixes '("[" "<" "/*")  tag))    :face (quote ,face) :inverse t :margin 0 :crop-right t :crop-left nil))
                                                ,click-to-show-all-buffer-occurrences
                                                ,tooltip-message-upon-hover))
        svg-tag-tags)
       ;; Make an SVG for the label.
       (push
        (cons (format "%s\\(%s\\)" tag label) `((lambda (label) (svg-tag-make (s-chop-suffixes '("]" ">" "*/") label) :face (quote ,face) :crop-left t))
                                                ,click-to-show-all-buffer-occurrences
                                                ,tooltip-message-upon-hover))
        svg-tag-tags))))

  ;; Let's start off empty; then declare badges below.
  (setq svg-tag-tags nil)

  ;; Using caps so that these stick-out somewhat even when svg-tags-mode is not present.
  (my/svg-tag-declare-badge "TODO:‚ùô.*" 'org-todo "This is something I would like to do, in the future.")
  (my/svg-tag-declare-badge "SILLY:‚ùô.*" 'error "I‚Äôm experimenting; don't forget to clean-up when you‚Äôre done!")
  (my/svg-tag-declare-badge "HACK:‚ùô.*" 'error "This works, but it‚Äôs far from ideal. Plan to clean this in the future.")
  (my/svg-tag-declare-badge "FIXME:‚ùô.*" 'org-todo "This is busted! Plan to fix this in the future.")
  (my/svg-tag-declare-badge "NOTE:‚ùô.*" 'org-done "Something to be aware of; to keep in mind.")

  ;; [In]Active Time stamps --- M-x org-time-stamp
  (my/svg-tag-declare-badge "\\[2022-.* ‚ùô.*]" 'org-done "This is an inactive time stamp. It does not trigger the parent entry to appear in the agenda.")
  (my/svg-tag-declare-badge "<2022-.* ‚ùô.*>" 'org-todo "This is an active time stamp. It causes the parent Org entry to appear in the agenda.")

  ;; JavaScript Lint Rules: \* eslint (.*) */
  (my/svg-tag-declare-badge "/\\* eslint ‚ùô.* \\*/" 'org-done "It looks like you‚Äô deviating from common conventions: Tread cautiously!")

  ;; TODO: Make SVG tags for other interesting ‚Äú2-part‚Äù pieces of textual information
  )

;; If everything is setup, the following examples should look like SVGs.
;; NOTE: Do something
;; TODO: fix me later
;; HACK: hiya
;; FIXME: this thing is busted üé≠
;; SILLY: start
;; SILLY: end
;; [2022-04-20 Sun 16:30]
;; <2022-04-20 Sun 16:30>
;; /* eslint eqeqeq: 0, curly: 2 */

;; NOTE: Toggle svg-tags-mode; useful when experimenting with new tags.
;; (progn (svg-tag-mode-off) (svg-tag-mode-on))

;; NOTE: (my/toggle-line-fontification) works fine with svg-tag-mode :-)
#+end_src

** Now C-c C-x C-v shows remote images inline, neato!
#+begin_src emacs-lisp :tangle init.el
  (quelpa '(org-remoteimg :fetcher github :repo "gaoDean/org-remoteimg"))
  (require 'org-remoteimg)
  (setq url-cache-directory "~/emacs.d/.cache/")
  (setq org-display-remote-inline-images 'cache)
#+end_src

Example:
[[https://www.javacodegeeks.com/wp-content/uploads/2017/09/lexer-parser-center.png][lexing vs parsing]]


[[https://miro.medium.com/v2/resize:fit:4800/1*bpG6TxN-nS6enHkp-KIZgg.jpeg][1% better everyday, push-ups!]]

** Ibuffer: C-x C-b shows colour-coded buffers, grouped according to their git repos
:PROPERTIES:
:CUSTOM_ID: Ibuffer
:END:
#+begin_src emacs-lisp :tangle no
;; Let's use an improved buffer list.
(use-package ibuffer ;; This is built-into Emacs.
  :bind ("C-x C-b" . ibuffer))
;; It uses similar commands as does dired; e.g.,
;; / . org
;; This filters (‚Äú/‚Äù) the list with extensions (‚Äú.‚Äù) being ‚Äúorg‚Äù.

(use-package ibuffer-vc
  :hook (ibuffer . (lambda ()
                     (ibuffer-vc-set-filter-groups-by-vc-root)
                     (unless (eq ibuffer-sorting-mode 'alphabetic)
                       (ibuffer-do-sort-by-alphabetic))))
  :custom
  (ibuffer-formats '((mark modified read-only " "
                           (name 18 18 :left :elide) " "
                           (size 9 -1 :right) " "
                           (mode 16 16 :left :elide) " "
                           (vc-status 16 16 :left) " "
                      (vc-relative-file)))))
 #+end_src
+ [[http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html][Tips for using Emacs Ibuffer]]
+ (~10 minute video) [[https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/][Using Emacs - 34 - ibuffer and emmet - C'est la Z]]
+ (~10 minute video) [[https://www.youtube.com/watch?v=6KN_oSLFf-k&ab_channel=ProtesilaosStavrou][Emacs: introduction to IBUFFER - YouTube]]

** [better than ibuffer!] [[https://github.com/alphapapa/bufler.el][A butler for your buffers. Group buffers into workspaces with programmable rules, and easily switch to and manipulate them.]]
:PROPERTIES:
:CUSTOM_ID: https-github-com-alphapapa-bufler-el-A-butler-for-your-buffers-Group-buffers-into-workspaces-with-programmable-rules-and-easily-switch-to-and-manipulate-them
:END:
#+begin_src emacs-lisp
(use-package bufler
  :config (bind-key "C-x C-b" #'bufler-list))
;; I still prefer ‚ÄúC-x b‚Äù to be ‚Äúhelm-mini‚Äù, since when looking for a buffer it also shows me recently visited files.
#+end_src
** all-the-icons
:PROPERTIES:
:CUSTOM_ID: all-the-icons
:END:

#+begin_src emacs-lisp :tangle init.el
(use-package all-the-icons
    :config (all-the-icons-install-fonts 'install-without-asking))
#+end_src
* Lisp Programming
:PROPERTIES:
:CUSTOM_ID: Lisp-Programming
:END:

** C-x C-e ‚à∑ REPL-driven development for ELisp
:PROPERTIES:
:CUSTOM_ID: C-x-C-e-REPL-driven-development-for-NodeJS
:END:

| /Evaluate code and see the results inline ---A feedback loop that is faster than ever!/ |

Within Emacs, kbd:C-x_C-e evaluates a Lisp expression /anywhere/; e.g.,
at the end of ~(message-box "hello world")~ press ~C-x C-e~ to see a greeting.
# Likewise, evaluating a variable shows you its value: user-full-name.

- We ran some code /without/ explicitly running an interpreter/repl/compiler!

- This is known as ‚ÄúREPL driven development‚Äù (RDD):
  There is a running REPL server for your language, implicitly in the
  background, and your editor (say with ~C-x C-e~) will send it a line (or a
  selected region) of code for evaluation; we then see the result as an
  overlay in our current buffer.

  + You /choose/ which code gets (re)evaluated.

- A quick introduction to RDD can be viewed at
  https://alhassy.com/repl-driven-development, including setup for other
  languages.

*** ELisp                                                            :ignore:
:PROPERTIES:
:CUSTOM_ID: ELisp
:END:

By default, Emacs Lisp's kbd:C-x_C-e shows results only in the minibuffer; near
the bottom of the screen. Let's also have evaluation results displayed as inline
overlays ---at the location that the user, us, is actually looking/working;
rather than forcing their eyes to shift up&down when writing&evaluating.

+ kbd:C-u_C-x_C-e inserts the evaluation result at point; kbd:C-u_0_C-x_C-e does
  so /without truncating/ lengthy output.
+ Read this [[https://karthinks.com/software/an-elisp-editing-tip/][Sweet & short blog/GIFs]] on practical uses of kbd:C-x_C-e when working with Lisp.

#+begin_src emacs-lisp
;; Evaluation Result OverlayS for Emacs Lisp
(use-package eros :init (eros-mode t))
#+end_src

# In particular, this gives us the Lisp function
# `eros--eval-overlay', which evaluates its argument X
# and produces an overlay of the result at position P.
# E.g., (eros--eval-overlay "hola" (point-min))
# Shows a momentary overlay at the first line.

*** COMMENT JavaScript                                             :Disabled:
:PROPERTIES:
:CUSTOM_ID: JavaScript
:END:

In any JS file, I just press ~C-x C-e~ and the JS interpreter is brought up with the evaluation results shown:

For instance,
#+begin_src js :tangle no
// On each line and press C-x C-j
let a = "hello"
let b = "world"
(a + ' ' + b).toUpperCase()
// The final line should show: HELLO WORLD
#+end_src

**** COMMENT Preserving the context
:PROPERTIES:
:CUSTOM_ID: Preserving-the-context
:END:

When testing an application, you might notice a bug in a particular context
---i.e., a particular configuration in the app.

1. The classic approach is to kill the app; i.e., stop the server that is, well,
   serving the app.
2. Solve the problem.
3. Try to get back to the configuration, context, you were in beforehand and
   check that the problem has been resolved.

A better approach is to ignore the bookkeeping steps, 1&3, and just do step 2.
For that, there are numerous packages:
- [[https://github.com/mishoo/livenode/][livenode: Live-code your NodeJS applications]] ‚®æ‚®æ [[https://vimeo.com/60636079][Video demo]] ~11min ‚®æ‚®æ Last
  updated 2013
- [[https://github.com/skeeto/skewer-mode][skewer-mode: Live web development in Emacs]] ‚®æ‚®æ [[https://www.youtube.com/watch?v=4tyTgyzUJqM&ab_channel=Skeeto][Silent video demo]] ~5min ‚®æ‚®æ Last
  updated 2020
- [[https://github.com/swank-js/swank-js][swank-js: Swank backend for Node.JS and in-browser JavaScript]] ‚®æ‚®æ Last updated
  2015

For more RDD alternatives in Emacs, see https://github.com/anonimitoraf/skerrick/issues/8.

** TODO COMMENT RDD

*** get the pkg
#+begin_src emacs-lisp :tangle init.el
(use-package repl-driven-development)
(setq repl-driven-development-echo-duration 10)
#+end_src

*** terminal
#+begin_src emacs-lisp :tangle init.el
;; Sometimes I see a bunch of shell incantations in a README or something and I'd like to execute them right there and then,
;; and not have to bother with copying them over to a terminal and execute there. As such, here's a quick key binding to execute
;; shell commands from anywhere.
;; (repl-driven-development [C-x C-t] "bash"  :prompt "bash-3.2\\$")
(repl-driven-development [C-x C-t] terminal)
#+end_src

*** jshell
#+begin_src emacs-lisp :tangle init.el
;; Set ‚ÄúC¬≠x C¬≠j‚Äù to evaluate Java code in a background REPL.
(repl-driven-development
 [C-x C-j]
 ;; enable assertions, and add everything installed, via `mvn', in scope.
 (format "jshell --class-path %s --enable-preview -R -ea --feedback silent"
         (concat ".:" (shell-command-to-string "find ~/.m2/repository -name \"*.jar\" -type f 2>/dev/null | tr '\n' ':'")))
 :prompt "jshell>"
 :init "\n /set mode EmacsJavaMode normal -command
        \n /set format EmacsJavaMode display \"{pre}added import {name}{post}\" import-added
        \n /set format EmacsJavaMode display \"{pre}re-added import {name}{post}\" import-modified,replaced
        \n /set format EmacsJavaMode result \"{type} {name} = {value}{post}\" added,modified,replaced-primary-ok
        \n /set truncation EmacsJavaMode 40000
        \n /set feedback EmacsJavaMode
        \n System.out.println(\"Enjoy Java with Emacs (ÔΩ°‚óï‚Äø‚óïÔΩ°))\")")
;; TODO [Truncation; Low] https://github.com/xiongtx/eros/blob/master/eros.el#L202
#+end_src
*** mvn
#+begin_src emacs-lisp :tangle init.el
(defun mvn (groupId artifactId)
  "Quickly install a library from Maven Central."
  (async-shell-command (format "mvn org.apache.maven.plugins:maven-dependency-plugin:2.8:get -Dartifact=%s:%s:LATEST:jar:sources" groupId  artifactId)))

(when nil
  ‚®æ‚®æ Example use of `mvn`

  ;; ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ
  ;; First confirm C-x C-j works as intended
  IntStream.range(0, 15).mapToObj(i -> i % 15 == 0 ? "FizzBuzz" : i % 3 == 0 ? "Fizz" : i % 5 == 0 ? "Buzz" : String.valueOf(i)).toList()

  ;; ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ
  (mvn "org.antlr" "antlr4") ;; C-x C-e
  ;; Now re-start the Java C-x C-j repl via a C-x C-e (lame! not ergonomic!)
  ;; Now check that you have access to antrl in your repl by importing it and looking at one of its classes:
  ;; ‚¶É jshell --class-path /Users/musa/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar ‚¶Ñ
  import org.antlr.v4.runtime.*;
  CommonTokenStream.class
  ;; NOTE: This is the runtime, to use the actual tool:
  java -jar /Users/musa/.m2/repository/org/antlr/antlr4/4.13.0/antlr4-4.13.0-complete.jar

  ;; Alternatively,
  ;; $ jshell
  ;; > var x = 5
  ;; > import org.antlr.v4.runtime.*;  // CRASHES since antlr is not in scope
  ;; > /reset --class-path /Users/musa/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar
  ;; > import org.antlr.v4.runtime.*;  // WORKS, yay
  ;; > x // CRASHES, not in scope

  ;; ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ
  import org.apache.commons.lang3.StringUtils;
  StringUtils.class;
  /imports  // JShell command to list all imports, it now contains apache!

  // Guava is the Google core libraries for Java
  import com.google.common.collect.ImmutableMap;

  ImmutableMap.of(1, "A", 2, "B") // ‚áí {1=A, 2=B}

  ;; (mvn "com.google.code.gson" "gson")
  // Then C-x C-e to update the repl definition of C-x C-j to include the updated gson library.
  import com.google.gson.*;
  String json = new Gson().toJson(Map.of("me", List.of(1, 2,3), "you", Map.of("Love", "Lisp", "Hate", "Verbosity")))

  ;; ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ
  ;; TestNG is a testing framework; supporting tests configured by annotations, data-driven testing, parametric tests, etc.
  (mvn "org.testng" "testng")
  import org.testng.*;
  /imports  // Now can see org.testng at the end of the list

  ;; ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ‚®æ
  ;; TODO[Low]: For working with Lombok annotations, use the jshell `/reset --class-path` command to include the lombok compiled file into
  ;; the current Jshell session.
  ;;
  ;; See: https://stackoverflow.com/questions/74084364/how-to-use-lombok-in-jshell
  ;;
  ;; (mvn "org.projectlombok" "lombok")
  ;; import lombok.*;
  ;; @lombok.Data class Test { private String name; }
  ;; new Test().equals(new Test())
  )
#+end_src

*** Adding support for ‚Äú//!use‚Äù & ‚Äú//!omit‚Äù top level repl commands
#+begin_src emacs-lisp
;; Adding support for ‚Äú//!use‚Äù & ‚Äú//!omit‚Äù top level repl commands
(setq repl/jshell/classpath (shell-command-to-string "find ~/.m2/repository -name \"*.jar\" -type f | tr '\n' ':'"))
(advice-add 'repl/jshell
            :around (lambda (repl &rest args)
                      (if (equal nil current-prefix-arg)
                          ;; No prefix supplied
                          (progn
                            (setq rdd---current-input (s-replace-regexp "\n" "" (s-trim-left
                                                                                 (if (region-active-p) (buffer-substring-no-properties  (region-beginning) (region-end))
                                                                                   (substring-no-properties (thing-at-point 'line))))))
                            (if (s-starts-with? "//!use" rdd---current-input)
                                (-let [jar (s-trim (s-chop-prefix "//!use" rdd---current-input))]
                                  (repl/top-level//!use jar))
                              (if (s-starts-with? "//!omit" rdd---current-input)
                                  (-let [jar (s-trim (s-chop-prefix "//!omit" rdd---current-input))]
                                    (repl/top-level//!omit jar))
                                ;; otherwise business as usual
                                (apply repl args))))
                        (pcase current-prefix-arg
                          (-1
                           ;; reset classpath to default, then business as usual.
                           (setq repl/jshell/classpath (shell-command-to-string "find ~/.m2/repository -name \"*.jar\" -type f | tr '\n' ':'"))
                           (apply repl args))
                          (999
                           (message-box "It worked"))
                          ;; otherwise business as usual
                          (t (apply repl args))))))

;; remove all advice
;; (-let [sym 'repl/jshell] (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))

(cl-defun repl/top-level//!omit (str)
  (with-temp-buffer
    (setq repl/jshell/classpath (s-replace-regexp (format ":[^:]*%s[^:]*:" str) ":" repl/jshell/classpath))
    (insert "/env --class-path ")
    (insert repl/jshell/classpath)
    (repl/jshell (point-min) (point-max))))

(cl-defun repl/top-level//!use (str)
  "If the given jar cannot be added successful, the existing classpath remains untouched.

Return to your default classpath by invoking the repl with the -1 prefix.

Example usage:

    //!use ~/path/to/compiled/java/classes
    import com.x.y.z;

Where directory hierarchy com/x/y/z denotes a Java package under the above //!use path.
"
  (with-temp-buffer
    (setq repl/jshell/classpath (concat (s-trim str) ":" repl/jshell/classpath))
    (insert "/env --class-path ")
    (insert repl/jshell/classpath)
    (repl/jshell (point-min) (point-max))))
#+end_src

*** Misc top level cmds

TODO: Make repl load all company class files, that way I have them upon start up.
OR: Provide a command `//!load ~/dir` which recursively loads/imports all java files? <---Probably this!

*** COMMENT Quickly Run Code Snippets
:PROPERTIES:
:CUSTOM_ID: Quickly-Run-Code-Snippets
:END:

Sometimes we want to quickly run some code /without making a dedicated file/ or
with a file but /without remembering the terminal incantation to do so/, enter
~quickrun~. Anywhere, we can select a snippet of code and run TODO. doc.quickrun-region
to execute that snippet after selecting the associated programming language, or
TODO. doc.quickrun-replace-region if we want the results in-line. If our language of
choice does not exist, we can [[https://github.com/emacsorphanage/quickrun#user-defined-command][easily add support for it]].

#+begin_src emacs-lisp
;; In any programming buffer, ‚ÄúM-x quickrun‚Äù to execute that program.
;; Super useful when wanting to quickly test things out, in a playground.
;;
;; E.g., Make a new file named ‚Äúhello.py‚Äù containing ‚Äúprint "hi"‚Äù, then ‚ÄúM-x quickrun‚Äù.
;;
;; Enable ‚Äúquickrun-autorun-mode‚Äù to run code after every save.
(use-package quickrun
  ;; ‚áí ‚ÄúC-c C-r‚Äù to see output, ‚Äúq‚Äù to close output
  ;; ‚áí ‚ÄúC-u C-c C-r‚Äù prompts for a language (Useful when testing snippets different from current programming mode)
  ;; ‚áí In a non-programming buffer, ‚ÄúC-c C-r‚Äù runs selected region.
  :defer nil
  :config (bind-key* "C-c C-r"
                     (lambda (&optional start end)
                       (interactive "r")
                       (if (use-region-p)
                           (quickrun-region start end)
                         (quickrun current-prefix-arg)))))
#+end_src

Example...
#+begin_src emacs-lisp
(system-packages-ensure "rust") ;; Rust Compiler
;; Select the following then press C-c C-r: fn main() { println!("Hello, World!"); }
#+end_src

Actually, let's get a [[https://github.com/brotzeit/rustic#intro][full Rust development environment for Emacs]] (which also
has [[https://github.com/brotzeit/rustic#org-babel][great support for Org-babel]].)
#+begin_src emacs-lisp
(use-package rustic   :defer nil)
;; Open any Rust file, and run ‚ÄúM-x lsp‚Äù which will then prompt you to install
;; rust-analyzer, the rust LSP.
;;
;; LSP for Rust ‚áí Goto definition (M-. / ‚åò-l), code completion with types and
;; docstrings, colourful documentation on hover, ‚ÄúRun [Test] | Debug‚Äù overlays,
;; super nice stuff! Run ‚ÄúM-!‚Äù/[M-x company-show-doc-buffer] if you want the doc in a colourful buffer.
;;
;; Below, hover over ‚ÄúVec‚Äù and see nice, scrollable, colourful docs on vectors.
;;    let v:Vec<_> = vec![1, 2, 3];

;; The offical Rust toolchain installer
(system-packages-ensure "rustup")
(shell-command "rustup update")
#+end_src

:More_on_rust:

Now, C-c C-c C-d on something to get help/description of it.
(setq rustic-racer-rust-src-path "/Users/musa/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/")

# Get Rustup, load it into current terminal session
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source ~/.bash_profile
source ~/.bashrc
type rustup

# Get stuff
rustup update
rustup component add rust-src
cargo +nightly install racer
rustup toolchain install nightly
rustup component add rustc-dev --toolchain=nightly
cargo +nightly install racer

:End:
** ‚åò-e: Edit Everything in a separate buffer
:PROPERTIES:
:CUSTOM_ID: e-Edit-Everything-in-a-separate-buffer
:END:

Edit comment/string/docstring/code block in separate buffer with your favourite
mode.

+ ‚åò-e to toggle ‚Äúe‚Äùditing of thing at point.
+ ‚åò-e will try to edit thing at point, or selection, if possible; otherwise it
  will exit edit session.
  - üî• Avoid escape nightmares by editing strings in a separate buffer.
  - On a string, press ‚åò-e and a new buffer pops up with unescaped content,
    letting you edit raw strings directly.  It then takes care of automatically
    escaping strings for you when you press ‚åò-e, or ~C-c C-c~ ---or discard your
    changes with ~C-c C-k~.
+ ‚åò-e can be used within edit session to create new edit sessions, if possible; then ‚åò-e will ‚Äúpop-off-the-stack‚Äù as expected.
  - (I already use ‚åò-e to toggle editing Org src blocks, and when editing a block ‚åò-e will try to do a recursive edit if possible, or exit the edit session.)
  - (The separedit package also let's me press ‚åò-e to edit variable values when describing them, and to edit text when in the minibuffer.)

From [[https://github.com/twlz0ne/separedit.el][source]]:
#+begin_example org
+----------+         Edit           +-----------+         Edit           +-----------+
|          | ---------------------> |   edit    | ---------------------> |   edit    | ...
|          |  point-at-comment?     |   buffer  |  point-at-comment?     |   buffer  |
|  source  |  point-at-string?      |           |  point-at-string?      |           | ...
|  buffer  |  point-at-codeblock?   | (markdown |  point-at-codeblock?   | (markdown | ...
|          |  point-at-...?         |  orgmode  |  point-at-...?         |  orgmode  |
|          | <--------------------- |   ...)    | <--------------------- |   ...)    | ...
+----------+     Commit changes     +-----------+     Commit changes     +-----------+
#+end_example

[In-general, we can invoke [[https://github.com/Fanael/edit-indirect/blob/e3d86416bcf8ddca951d7d112e57ad30c5f9a081/edit-indirect.el#L124][M-x edit-indirect-region]] to edit any selected piece
of text in its own buffer, then ~C-c C-c~ (or ~‚åò-e~ with my setup) to commit the
edit. Actually, I've altered by ~‚åò-e~ setup to also account for a selected region
üòâ]

#+begin_src emacs-lisp
(use-package separedit   :defer nil)
;;
;; # Example Usage
;;
;; 1. Press ‚åò-e on this line, to edit this entire comment.
;; 2. Press ‚åò-e to exit the edit session.
;;
;; Since my ‚åò-e is context sensitive, to determine whether to continue editing or
;; exit; you can explicitly request an edit with C-c ' and an exit with C-c C-c.
;;
;; ```
;; ;; 3. Press ‚åò-e on this line, to edit this source block!
;; ;; 4. Press ‚åò-e on this line, to edit this inner-most comment!
;; ;; 5. At start of next line, press ‚Äú‚åò-r ‚åò-e‚Äù to edit just the source block
;; ;;
;; (cl-defun index (&rest args)
;;   "6. Press ‚åò-e to edit this string, \"7. and again in these quotes\""
;;   "<p>8. Press ‚åò-e to edit this <strong> HTML </strong> block, in Web-mode </p>")
;;
;; ;; 9. Press C-u ‚åò-e to guess the language of the next string (Rust); then ‚åò-r C-c C-r to quickly run the code.
;; "fn main() { println!(\"{}\", \"hello!\"); }"
;;
;; ;; 10. Select & press ‚ÄúC-u ‚åò-e‚Äù on the following, to edit it in whatever mode you want.
;; ;; select * from table -- Or just press ‚åò-e and have the mode detected.
;;
;; ```

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setup to make the above ‚åò-e behaviour happen.

;; Make ‚Äú‚åò-e‚Äù toggle editing string literals / select region / [Org/markdown] code block / comment block when programming.
(--map (bind-key "s-e" #'separedit it)
       '(prog-mode-map minibuffer-local-map help-mode-map)) ;; TODO: helpful-mode-map

#+end_src

#+begin_src emacs-lisp
;; TODO:Merge these changes upstream

;; I'm focusing on a specific region to edit, so let's not be distracted by anything else.
;; This makes the ‚Äúediting stack‚Äù feel like a stack, with ‚åò-e pushing new editing session buffers,
;; and C-c C-c, or ‚åò-e on non-editable lines, to pop-off the stack.
;; (advice-add #'separedit :after (lambda (&rest _) (delete-other-windows)))
;;
;; NOTE: This actually breaks the stack nature of popping with ‚åò-e; we need to actually save the stack via some list of buffers than push/pop buffers on that variable.

;; I don't want to be bothered for what mode I'm in, when a region is selected using current major mode.
;; I'll use a prefix, ‚ÄúC-u ‚åò-e‚Äù, if I want to select a mode for my current selected text.
(advice-add #'separedit--select-mode :before-until
            (lambda (&rest _)
              (when (and (not current-prefix-arg) (region-active-p)) (pp-to-string major-mode))))

;; Also: When on a string ‚à∑
(advice-add #'separedit--select-mode :before-until
            (lambda (&rest _)
              "When on a string ‚à∑
+ ‚åò-e ‚áí Edit string at point
+ C-u ‚åò-e ‚áí Auto-detect my string's major mode
+ C-u C-u ‚åò-e ‚áí Let me select a major mode"
              (-let [str? (ignore-errors (thing-at-point 'string))]
                (case (car current-prefix-arg)
                  (4 (when str? (pp-to-string (my/detect-prog-mode str?))))
                  (_ nil)))))

;; NOTE: By default, separedit provides colouring for 'strings', "strings", and `strings'
;; This doesn't look very good when I have a single quote within double quotes:
;; In an Emacs Lisp buffer, editing the string "Bob's Work" gives unexpected highlighting.
;; ```
;; (advice-add #'separedit :after
;;             (lambda (&rest _)
;;               (when (s-ends-with? "string-mode" (pp-to-string major-mode))
;;                 (text-mode))))
;; ```
#+end_src

#+begin_src emacs-lisp
;; In the indirect buffer, make ‚åò-e finish editing.
(use-package edit-indirect
  :config (bind-key "s-e"
                    (lambda ()
                      (interactive)
                      (or (ignore-errors (call-interactively #'separedit))
                          (call-interactively #'edit-indirect-commit)))
                    #'edit-indirect-mode-map))

;; I also have ‚Äús-e‚Äù bound to `org-edit-src-exit'.
(advice-add 'org-edit-src-exit :before-until
            (lambda (&rest r)
              (when (ignore-errors (separedit)) t)))
#+end_src

#+begin_src emacs-lisp
;; ‚Üí ‚åò-e on an Org paragraph pops-up an edit session in Org mode.
;; ‚Üí ‚åò-e on a selection in Org mode pops-up an edit session in Org mode.
;; TODO: Consider forming an alist for special blocks to refer to their preferred
;; edit mode, defaulting to Org-mode? Perhaps something to consider /after/
;; addressing the bug below.
;; (advice-unadvice 'org-edit-special) MA: TODO: FIXME: Delete this?
(advice-add 'org-edit-special :around
            (lambda (orginal-function &rest r)
              (cond
               ((region-active-p) (call-interactively #'edit-indirect-region) (org-mode))
               ((equal 'paragraph (car (org-element-at-point)))
                (mark-paragraph) (call-interactively #'edit-indirect-region) (org-mode))
               (t (or (ignore-errors (apply orginal-function r))
                      ;; We try to edit a special block when orginal-function fails.
                      ;; This way src blocks are not confused with the more generic idea of special blocks.
                      (when
                          (my/org-in-any-block-p)
                        ;; Note using org-element-at-point doesn't work well with special blocks when you're somewhere within the block.
                        ;; It only works correctly when you're on the boundary of the special block; which is not ideal.
                        ;; This is why I'm not using: (org-element-property :begin elem).
                        (-let [(start . end) (my/org-in-any-block-p)]
                          (set-mark-command start)
                          (goto-char end) (previous-line 2) (end-of-line) ;; FIXME: Still shows #+end_XXX for some reason.
                          (call-interactively #'edit-indirect-region) (org-mode))))))))
#+end_src

#+begin_src emacs-lisp
;; where...
(defun my/org-in-any-block-p ()
  "Return non-nil if the point is in any Org block.

The Org block can be *any*: src, example, verse, etc., even any
Org Special block.

This function is heavily adapted from `org-between-regexps-p'.

Src: https://scripter.co/splitting-an-org-block-into-two/"
  (save-match-data
    (let ((pos (point))
          (case-fold-search t)
          (block-begin-re "^[[:blank:]]*#\\+begin_\\(?1:.+?\\)\\(?: .*\\)*$")
          (limit-up (save-excursion (outline-previous-heading)))
          (limit-down (save-excursion (outline-next-heading)))
          beg end)
      (save-excursion
        ;; Point is on a block when on BLOCK-BEGIN-RE or if
        ;; BLOCK-BEGIN-RE can be found before it...
        (and (or (org-in-regexp block-begin-re)
                 (re-search-backward block-begin-re limit-up :noerror))
             (setq beg (match-beginning 0))
             ;; ... and BLOCK-END-RE after it...
             (let ((block-end-re (concat "^[[:blank:]]*#\\+end_"
                                         (match-string-no-properties 1)
                                         "\\( .*\\)*$")))
               (goto-char (match-end 0))
               (re-search-forward block-end-re limit-down :noerror))
             (> (setq end (match-end 0)) pos)
             ;; ... without another BLOCK-BEGIN-RE in-between.
             (goto-char (match-beginning 0))
             (not (re-search-backward block-begin-re (1+ beg) :noerror))
             ;; Return value.
             (cons beg end))))))
#+end_src

I'd like to [[https://github.com/andreasjansson/language-detection.el][guess the language]] I'm in, when working with strings.
#+begin_src emacs-lisp
(use-package language-detection   :defer nil)
;; Usage: M-x language-detection-buffer ‚áí Get programming language of current buffer
;; Also, (language-detection-string "select * from t") ;; ‚áí sql

;; TODO: Push this upstream; https://github.com/andreasjansson/language-detection.el/issues/1
(cl-defun my/detect-prog-mode (&optional string)
  "Guess programming mode of the current buffer, or STRING if it is provided.

When called interactively, it enables the mode;
from Lisp it just returns the name of the associated mode.

    ;; Example Lisp usage
    (call-interactively #'my/detect-prog-mode)

`language-detection-buffer' returns a string which is not always the name of the
associated major mode; that's what we aim to do here."
  (interactive)

  (defvar my/detect-prog-mode/special-names
    '((c           . c-mode)
      (cpp         . c++-mode)
      (emacslisp   . emacs-lisp-mode)
      (html        . web-mode) ;; I intentionally want to use this alternative.
      (matlab      . octave-mode)
      (shell       . shell-script-mode)
      (visualbasic . visual-basic-mode)
      (xml         . sgml-mode))
    "Names in this alist map a language to its mode; all other languages ùí≥ have mode ‚Äòùí≥-mode‚Äô afaik.")

  (let* ((lang (if string (language-detection-string string) (language-detection-buffer)))
         (mode (or (cdr (assoc lang my/detect-prog-mode/special-names))
                   (intern (format "%s-mode" lang)))))
    (if (called-interactively-p 'any)
        (progn (call-interactively mode) (message "%s enabled!" mode))
      mode)))
#+end_src

+ ‚åò-e to edit an Org table cell; see [[https://orgmode.org/manual/Built_002din-Table-Editor.html][here]] for built-in table editing commands.
#+begin_src emacs-lisp
(advice-add #'org-edit-special :before-until
            (lambda (&rest r)
              (when (equal 'table-row (car (org-element-at-point)))
                (call-interactively #'org-table-edit-field))))
#+end_src
** ‚åò-r, ‚åò-i, ‚åò-o: Sleek Semantic Selection
:PROPERTIES:
:CUSTOM_ID: Sleek-Semantic-Selection
:END:

Super sleek way to select regions: Anywhere press kbd:‚åò-r to select the current
word, press it again to select sentence, then again for the current paragraph,
then more to get the current section.

#+begin_src emacs-lisp
(use-package expand-region

  :bind (("s-r" . #'er/expand-region)))
#+end_src

You can watch an introductory ~3 minute video to expand-region at [[http://emacsrocks.com/e09.html][Emacs Rocks!]].

That is, /repeated ‚åò+r expands the selection to the next logical segment of text:/
In writing this means ‚ÄúWord, sentence, paragraph‚Äù, and in programming this means
‚Äúidentifier, then incrementally larger scopes‚Äù.

*** Semantic Change
:PROPERTIES:
:CUSTOM_ID: Semantic-Change
:END:

Using kbd:‚åò-i and kbd:‚åò-o we can quickly, for example, delete a string or its
contents; or delete a {}-block or just its contents; or delete a ()-argument
list or just its contents, etc.

 ~change-inner~ gives you vim's ~ci~ command:
- ~change-inner {~ ‚áí Delete all text starting from the first ‚Äò{‚Äô delimiter to the next one; but /keep the delimiters/.
- ~change-outer {~ ‚áí As above, but also delete the delimiters.

#+begin_src emacs-lisp :tangle no
(use-package change-inner

  :bind (("s-i" . #'change-inner)
         ("s-o" . #'change-outer)))
#+end_src

** Documentation
*** Editor Documentation with Contextual Information
:PROPERTIES:
:CUSTOM_ID: Editor-Documentation-with-Contextual-Information
:END:

/Emacs is an extensible self-documenting editor!/

Let's use a helpful Emacs /documentation/ system that cleanly shows a lot of
contextual information ---then let's /extend/ that to work as we want it to:
~C-h o~ to describe the symbol at point.
#+begin_src emacs-lisp
(use-package helpful)

(defun my/describe-symbol (symbol)
  "A ‚ÄúC-h o‚Äù replacement using ‚Äúhelpful‚Äù:
   If there's a thing at point, offer that as default search item.

   If a prefix is provided, i.e., ‚ÄúC-u C-h o‚Äù then the built-in
   ‚Äúdescribe-symbol‚Äù command is used.

   ‚á® Pretty docstrings, with links and highlighting.
   ‚á® Source code of symbol.
   ‚á® Callers of function symbol.
   ‚á® Key bindings for function symbol.
   ‚á® Aliases.
   ‚á® Options to enable tracing, dissable, and forget/unbind the symbol!
  "
  (interactive "p")
  (let* ((thing (symbol-at-point))
         (val (completing-read
               (format "Describe symbol (default %s): " thing)
               (vconcat (list thing) obarray)
               (lambda (vv)
                 (cl-some (lambda (x) (funcall (nth 1 x) vv))
                          describe-symbol-backends))
               t nil nil))
         (it (intern val)))
    (cond
     (current-prefix-arg (funcall #'describe-symbol it))
     ((or (functionp it) (macrop it) (commandp it)) (helpful-callable it))
     (t (helpful-symbol it)))))

;; Keybindings.
(global-set-key (kbd "C-h o") #'my/describe-symbol)
(global-set-key (kbd "C-h k") #'helpful-key)
#+END_SRC

I like [[https://github.com/Wilfred/helpful][helpful]] and wanted it to have the same behaviour as ~C-h o~, which
~helpful-at-point~ does not achieve. The incantation above makes ~C-h o~ use ~helpful~
in that if the cursor is on a symbol, then it is offered to the user as a
default search item for help, otherwise a plain search box for help
appears. Using a universal argument lets us drop to the built-in help command.

*** [[https://github.com/xuchunyang/elisp-demos][Append existing ELisp docstrings with example use and actual output.]]
:PROPERTIES:
:CUSTOM_ID: Let's-make-working-with-Emacs-Lisp-even-better
:END:

If you query ~C-h o mapcar~ you get some nice docs, but it'd be even nice to get
some example usage of that method.

#+begin_src emacs-lisp
(use-package elisp-demos
  :config
  ;; Show demos when I do a `C-h o'.
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
  ;; Show demos in tooltips when I pause to select a completion, in Emacs Lisp mode.
  (advice-add 'describe-function-1 :after #'elisp-demos-advice-describe-function-1))
#+end_src

*** Get CheatSheets and view them easily                           :Disabled:
:PROPERTIES:
:CUSTOM_ID: Get-CheatSheets-and-view-them-easily
:header-args: :tangle no
:END:

#+begin_src emacs-lisp
(defvar my/cheatsheet/cached-topics nil)
(cl-defun my/cheatsheet (&optional topic)
  "Clone Al-hassy's ‚ü®TOPIC‚ü©CheatSheet repository when called from Lisp; visit the pretty HTML page when called interactively.

- Example usage: (my/cheatsheet \"Vue\")
- Example usage: M-x my/cheatsheet RET Vue RET."
  (interactive)
  (if (not topic)
      (browse-url (format "https://alhassy.github.io/%sCheatSheet" (completing-read "Topic: " my/cheatsheet/cached-topics)))
    (push topic my/cheatsheet/cached-topics)
    (maybe-clone (format "https://github.com/alhassy/%sCheatSheet" topic))))
#+end_src

Let's actually get some repos locally, and use: ~M-x my/cheatsheet~ to view the pretty HTML (or PDF) sheets.
#+begin_src emacs-lisp
(mapcar #'my/cheatsheet '("ELisp" "GojuRyu" "Rust")) ; Python Prolog Vue Agda JavaScript
                                              ; Clojure Ruby Oz Coq Cats Haskell FSharp OCaml
#+end_src

*** How do I do something?                                         :Disabled:
:PROPERTIES:
:CUSTOM_ID: How-do-I-do-something
:header-args: :tangle no
:END:

  When programming, sometimes you just gotta Google ‚Äúhow do I do ‚ãØ‚Äù.
  - The usual process is (1) open a browser, (2) make a Google query, (3) look
    at StackOverflow's most upvoted answer for your query, (4) copy-paste the
    code solution/example to your editor; [(5) get distracted by interesting
    things you'd like to read].
  - Better would be to use the [[https://github.com/gleitz/howdoi][howdoi]] tool, which gives instant coding answers
    for common questions via the command line.
  - Below, my /Emacs Lisp/ function doc : howdoi let's me reduce the 4-step process
    to just 2 steps: Write your query /anywhere/ then call ~M-x howdoi~ on it to
    replace the query with the answer. (Or ~C-u M-x howdoi~ to see the full answer
    and a link to it on StackOverflow.)

    | /‚ö° Never open your browser to look for help again ‚ö°/ |

#+begin_src emacs-lisp
(system-packages-ensure "howdoi")

(cl-defun howdoi (&optional show-full-answer)
  "Instantly insert coding answers.

Replace a query with a code solution; replace it with an entire
answer if a prefix is provided.

Example usage:

   On a new line, write a question such as:

      search and replace buffer Emacs Lisp

   Then invoke ‚ÄòM-x howdoi‚Äô anywhere on the line
   to get a code snippet; or ‚ÄòC-u M-x howdoi‚Äô to get a full answer to your query.
"
  (interactive "P")
  (let ((query (s-collapse-whitespace (substring-no-properties (thing-at-point 'line))))
        (flag (if show-full-answer "-a" "")))
    (beginning-of-line)
    (kill-line)
    (insert (shell-command-to-string (format "howdoi %s %s" query flag)))))
#+end_src
*** Elisp live documentation in the mini-buffer
:PROPERTIES:
:CUSTOM_ID: Eldoc-for-Lisp-and-Haskell
:END:

In =emacs-lisp-mode= we can enable =eldoc-mode= ---‚ÄúElisp Live Documentation‚Äù--- to
display information about a function or a variable in the echo area.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :hook (emacs-lisp-mode . turn-on-eldoc-mode))

;; Slightly shorten eldoc display delay.
(setq eldoc-idle-delay 0.4) ;; Default 0.5
#+END_SRC

** Jumping to definitions & references
:PROPERTIES:
:CUSTOM_ID: Jumping-to-definitions-references
:END:

Friendly reminder that ~M-.~ takes you to the definition, and ~M-,~ takes you back
to where you originally where.

Out-of-the-box Emacs has ‚Äòxref‚Äô utilities ~M-.~ and ~C-u M-.~ to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html#Xref][Find Identifier
References]]; however, tags to source definitions need to be generated using the
=etags= program. Nonetheless, the xref utilites are impressive and some just work:
For example, ~M-?~ cleverly finds /all/ references for an identifier in ‚Äònear by‚Äô
files; whereas ~C-u M-. RET my/.*~, for example, uses the given regular expression
to list all identifiers with prefix ~my/~, thereby listing my personally defined
names ^_^

| =C-M-. ùìáùìÆ‚ÑäùìÆùìç= | Find all identifiers whose name matches the given pattern |

Let's get [[https://github.com/jacktasia/dumb-jump][dumb-jump]], where the ‚Äòdumb‚Äô is possibly due to the fact
that it works by brute-force regular-expression lookup of
pre-defined ‚Äòdefinitional template‚Äô rules. It ‚Äújust works‚Äù ^_^
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
    :defer nil
  :bind (("M-g q"     . dumb-jump-quick-look) ;; Show me in a tooltip.
         ("M-g ."     . dumb-jump-go-other-window)
         ("M-g b"     . dumb-jump-back)
         ("M-g p"     . dumb-jump-go-prompt)
         ("M-g a"     . xref-find-apropos)) ;; aka C-M-.
  :config
  ;; If source file is visible, just shift focus to it.
  (setq dumb-jump-use-visible-window t))
#+END_SRC

In Lisp, for binding macros, it lists all possible mentions of the bound
variable ---the first is likely what is desired.  Alternatively, one could just
add the necessary rule to the variable =dumb-jump-find-rules=.  Otherwise, it
works fine even for locally bound definitions.  It works depending on the
extension of a file.
*** An ‚Äúauto read only‚Äù detection mechanism ---when jumping to definitions :Disabled:
:PROPERTIES:
:CUSTOM_ID: An-auto-read-only-detection-mechanism-when-jumping-to-definitions
:header-args: :tangle no
:END:

Files in 3 ≥·µà-party directories should be read-only whenever I open them, when
I'm jumping to definitions (with ~M-.~).

#+begin_src emacs-lisp
;; Usage: Press ‚ÄúM-‚Äù. ‚Äúuse-package‚Äù below and you can accidentally alter the source code!
;; But in this case you likely just wanted to see the 3 ≥·µà-party definition, not alter it.
;; As such, with this advice, the source will not be alterable (unless you toggle read-only mode).
(advice-add #'xref-find-definitions :after
            (lambda (&rest _)
              (when (--map (s-ends-with? it (f-parent buffer-file-name))
                           '("lisp/emacs-lisp" "/lisp" ".emacs.d/elpa/"))
                (read-only-mode))))
#+end_src
** Comments
*** Commenting
:PROPERTIES:
:CUSTOM_ID: Commenting
:END:

Let's get some nifty [[https://github.com/remyferre/comment-dwim-2][commenting]] features ---the link has nice usage gifs.
+ [[kbd:][M-;]]
  repeatedly does (1) comments current line, (2) inserts a comment at the end
  of the current line, and (3) deletes an existing end-of-line comment.

   [[kbd:][C-u_M-;]] indents the current enf-of-line comment with any above it.

   For use with Org-mode, it's best to use doc:org-edit-src-code ---which I've
   bound to [[kbd:][‚åò e]].
   #+begin_src emacs-lisp
(use-package comment-dwim-2
  :bind ("M-;" . comment-dwim-2))

 ;; Not ideal: M-; comments a parent Org heading and not the current line.
 ;; (define-key org-mode-map (kbd "M-;") 'org-comment-dwim-2)
   #+end_src

*** Emphasised Comments: Useful for warnings
:PROPERTIES:
:CUSTOM_ID: Emphasised-Comments
:END:

#+begin_src emacs-lisp
;; In VSCode, with the ‚ÄúBetter Comments‚Äù extension, comments starting with a ‚Äúbang‚Äù are made to stand out, via bold red.
;; Let's do the same thing in Emacs.
;; I did not look around, there might be a package/option for this ü§∑
(add-hook 'prog-mode-hook
          (defun emphasize-comments-starting-with-! ()
            (highlight-lines-matching-regexp ".*\\*.*!.*" 'hi-red-b)
            (highlight-lines-matching-regexp ".*//!.*" 'hi-red-b)
            (highlight-lines-matching-regexp ";;!.*" 'hi-red-b))) ;;! Look it works (ÔΩ°‚óï‚Äø‚óïÔΩ°)

#+end_src

*** Comment-boxes up to the fill-column ---or banner instead?
:PROPERTIES:
:CUSTOM_ID: Comment-boxes-up-to-the-fill-column
:END:

GIF: https://endlessparentheses.com/images/comment-box.gif

#+begin_src emacs-lisp
(defun my/comment-box (b e)
  "Draw a box comment around the region but arrange for the region
to extend to at least the fill column. Place the point after the
comment box.

Source: http://irreal.org/blog/?p=374

To do fancy stuff like removing boxes, centering them, etc
see https://github.com/lewang/rebox2/blob/master/rebox2.el"
  (interactive "r")
  (let ((e (copy-marker e t)))
    (goto-char b)
    (end-of-line)
    (insert-char ?  (- fill-column (current-column)))
    (comment-box b e 1)
    (goto-char e)
    (set-marker e nil)))
#+end_src

A comment box sometimes increases the size of a file more than I'd like, or more than others on my dev team would like.
As such, let's try [[https://github.com/WJCFerguson/banner-comment][banner comments]]:
- GIF: https://github.com/WJCFerguson/banner-comment/blob/35d3315683d3f97605207691b77e9f447af18fe2/demo.png
#+begin_src emacs-lisp
(use-package banner-comment   :defer nil)
#+end_src

Pretty slick!

** Text Folding ---Selectively displaying portions of a program
:PROPERTIES:
:CUSTOM_ID: Text-Folding
:END:

‚ü¶‚Äº TODO: hideshowvis shows ="*hideshowvis*"= literally in src code blocks upon
export; as such we need to hook to exports so as to temporarily disable it. ‚üß
#+begin_src emacs-lisp
(require 'cl-lib)

(defun my/disable-hs-hide-all (orig-fun &rest args)
  "Advise `org-export-dispatch` to disable `hs-hide-all` temporarily."
  ;; Without this, export hangs ‚ÄúHiding all blocks...‚Äù
  (cl-letf (((symbol-function 'hs-hide-all) (lambda (&rest _) nil)))
    ;; Without this, export shows ‚Äú*hideshowvis*‚Äù markers in my exported code blocks.
    (cl-letf (((symbol-function 'hideshowvis-highlight-hs-regions-in-fringe) (lambda (&rest _) nil)))
      (apply orig-fun args))))

(advice-add 'org-export-dispatch :around #'my/disable-hs-hide-all)

#+end_src


Literate programming within Org-mode is not always ideal or possible, so we use
a programming mode directly and then may want to have arbitrary ‚Äòsections‚Äô of
text folded up.  Let's describe how to accomplish this goal. I've tried the
feature-full folding modes [[https://github.com/gregsexton/origami.el][Origami-mode]] and ~yafolding-mode~, but it seems the
/built-in/ TODO. doc.hs-minor-mode is the best: (0) It folds comments, (1) it's the
fastest, and (2) it Just Works·µÄ·¥π out-of-the-box. Coupled with Vimish folding,
for arbitrary region folding; and a helpful hydra, I'm rather happy with my
setup.

On two JavaScript files, I found the following timings (using TODO. doc.elp-instrument-function
and TODO. doc.elp-results):
| Folding function        | ~500 lines | ~2300 lines |
|-------------------------+------------+-------------|
| hs-hide-all             |    0.00277 |    0.004358 |
| origami-close-all-nodes |    0.00304 |    0.025569 |
| yafolding-hide-all      |   7.051795 |   74.252598 |
(TODO: Maybe these timings are due to my config, I should try to reproduce these
with ~emacs -Q~.)

#+begin_box "There's a built-in, less featureful, alternative based on indentation!"
Quickly fold-away code with TODO. doc.set-selective-display; e.g., <kbd:C-u C-x $>
folds away all code indented 4 spaces, whereas <kbd:C-u 8 C-x $> is for 8
spaces, and <kbd:C-x $> disables the folding. This is built into Emacs.

I've incorporated this into my folding hydra, below.
#+end_box

#+begin_box "Vimish fold - Fold regions based on selection, not syntax"
Sometimes we want to fold some random piece of text ---rather than fold accoding
to a programming language's syntactic constructions.

[[https://github.com/mrkkrp/vimish-fold][Vimish-fold]] gives us just that and with many fancy features, from the README:
+ folding of active regions;
+ good visual feedback: it's obvious which part of text is folded with a ‚Äò‚ãÆ‚Äô in the fringe.
+ create folds from regions between ~{{{~ and ~}}}~ automatically (marks are customizable; TODO. doc.vimish-fold-from-marks);
+ persistence by default: when you kill a buffer your folds don't disappear;
+ persistence scales well, you can work on hundreds of files with lots of folds without adverse effects;
+ it does not break indentation;
+ folds can be toggled from folded state to unfolded and back very easily;
+ quick navigation between existing folds;
+ you can use mouse to unfold folds (good for beginners and not only for them).

#+begin_src emacs-lisp
(use-package vimish-fold

  :config (vimish-fold-global-mode 1))
#+end_src
#+end_box

*** TODO Actual Setup                                                :ignore:
:PROPERTIES:
:CUSTOM_ID: Actual-Setup
:END:
--------------------------------------------------------------------------------

TODO: Below I setup hideshow along with [doc : hideshowvis-symbols] [hideshowvis]  which gives us a nice clickable
‚Äú+/-‚Äù marker for foldable blocks as well as an overlay that indicates how many
lines are folded away.  For more on hideshow-mode, see the [[https://writequit.org/denver-emacs/presentations/2017-11-02-hidden-gems.html][Hidden Gem Packages]]
presentation which contains a small self-contained introduction, or [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/hideshow.el#L127][these super useful source comments]]
which discuss hooks and support for special modes ([[https://superuser.com/questions/576447/enable-hideshow-for-more-modes-e-g-ruby][like this one]]).
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :defer nil
  :init
  ;; https://github.com/emacsmirror/emacswiki.org/blob/master/hideshowvis.el
  (quelpa '(hideshowvis :fetcher wiki))

  ;; Press ‚ÄúC-c TAB‚Äù to toggle a block's visibility or ‚ÄúC-c f‚Äù for my folding hydra.
  :bind (("C-c TAB" . hs-toggle-hiding))

  ;; https://github.com/shanecelis/hideshow-org/tree/master
  ;; This extension bring Org-mode tab behaviour to folding, at the block level
  ;; and buffer level ---but not cycling visibility.
  ;; (use-package hideshow-org) ;; Disabled as commented below.

  :hook ((prog-mode . (lambda () (hs-minor-mode +1)
                        (hideshowvis-minor-mode t)
                        (hideshowvis-symbols)
                        ;; This hook along with hs-org mode breaks editing of src blocks in Org files.
                        ;; That's OK, since my folding hydra does a better job for my needs.
                        ;; (hs-org/minor-mode t)
                        (hs-hide-all)))))
#+END_SRC

Along with a hydra for super quick navigation and easily folding, unfolding
blocks! Love this one (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà
#+BEGIN_SRC emacs-lisp
(my/defhydra "C-c f" "Folding text" archive
  :Current
  ("h" hs-hide-block "Hide")
  ("s" hs-show-block "Show")
  ("t" hs-toggle-hiding "Toggle")
  ;; "l" hs-hide-level "Hide blocks n levels below this block"; TODO: Enable folding feature
  :Buffer
  ("H" hs-hide-all "Hide")
  ("S" hs-show-all "Show")
  ("T" my/hs-toggle-buffer "Toggle")
  :Style
  ("i" my/clever-selective-display "Fold along current indentation" :toggle selective-display)
  ("e" auto-set-selective-display-mode  "Explore; walk and see" :toggle t)
  :Region
  ("f" (lambda () (interactive) (vimish-fold-toggle) (vimish-fold (region-beginning) (region-end))) "Fold/Toggle")
  ("d" vimish-fold-delete "Delete fold")
  ("U" vimish-fold-unfold-all "Unfold all")
  ("D" vimish-fold-delete-all "Delete all")
  ("n" vimish-fold-next-fold "Next fold")
  ("p" vimish-fold-previous-fold "Previous fold")
  :...
  ("w" hl-todo-occur "Show WIPs/TODOs" :exit t)
  ("m" lsp-ui-imenu "Menu of TLIs" :exit t) ;; TLI ‚âà Top Level Items
  ;; ("i" imenu-list "iMenu (General)") ;; It seems the above is enough for both prog and otherwise.
  ("r" (progn (hs-minor-mode -1) (hs-minor-mode +1)) "Reset Hideshow")  ;; Remove all folds from the buffer and reset all hideshow-mode. Useful if it messes up!
  ("q" nil "Quit" :color blue))

;; Features from origami/yafolding that maybe I'd like to implement include:
;; narrowing to block or folding everything except block, navigating back and forth between folded blocks.
;; Finally, if we want to cycle the visibility of a block (as in Org-mode), we can use a combination of hs-show-block and hs-hide-level.
#+END_SRC
#+begin_details "Folding Hydra Helpers"
#+BEGIN_SRC emacs-lisp
(defvar my/hs-hide nil "Current state of hideshow for toggling all.")
(defun my/hs-toggle-buffer () "Toggle hideshow all."
       (interactive)
       (setq my/hs-hide (not my/hs-hide))
       (if my/hs-hide
           (hs-hide-all)
         (hs-show-all)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun my/clever-selective-display (&optional level)
"Fold text indented same of more than the cursor.

This function toggles folding according to the level of
indentation at point. It's convenient not having to specify a
number nor move point to the desired column.
"
  (interactive "P")
  (if (eq selective-display (1+ (current-column)))
      (set-selective-display 0)
    (set-selective-display (or level (1+ (current-column))))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
;; Src: https://emacs.stackexchange.com/questions/52588/dynamically-hide-lines-indented-more-than-current-line
(define-minor-mode auto-set-selective-display-mode
  "Automatically apply `set-selective-display' at all times based on current indentation."
  nil "$" nil
  (if auto-set-selective-display-mode
      (add-hook 'post-command-hook #'auto-set-selective-display nil t)
    (remove-hook 'post-command-hook #'auto-set-selective-display t)
    (with-temp-message ""
      (set-selective-display nil))))
;;
(defun auto-set-selective-display ()
  "Apply `set-selective-display' such that current and next line are visible.

Scroll events are excluded in order to prevent wild flickering while navigating."
  (unless (eq last-command #'mwheel-scroll)
    (let*((this-line-indent (current-indentation))
          (next-line-indent (save-excursion (forward-line) (current-indentation))))
      (with-temp-message "" ; Suppress messages.
        (set-selective-display (1+ (max this-line-indent next-line-indent)))))))
#+END_SRC
#+end_details

With expected support for searching.
#+BEGIN_SRC emacs-lisp
;; Open folded nodes if a search stops there.
(add-hook 'helm-swoop-after-goto-line-action-hook #'my/search-hook-function)
(defun my/search-hook-function ()
  (when hs-minor-mode (set-mark-command nil) (hs-show-block) (pop-to-mark-command)))
#+END_SRC

#+begin_details "What if I want my own hideshow overlays, instead of hideshowvis?"
#+BEGIN_SRC emacs-lisp :tangle no
 ;; Add an overlay to display the number of hidden lines üòÅ;; https://github.com/shanecelis/hideshow-org/tree/master
 (setq hs-set-up-overlay
       (defun my-display-code-line-counts (ov)
         (when (eq 'code (overlay-get ov 'hs))
           (overlay-put ov 'display
                        (propertize
                         (format " ... Ô¥æ%dÔ¥ø"
                                 (count-lines (overlay-start ov)
                                              (overlay-end ov)))
                         'face 'font-lock-type-face)))))
#+END_SRC
#+end_details
#+begin_details  "[Disabled / Alternative] origami"

#+BEGIN_SRC emacs-lisp :tangle no
(use-package origami
  ;; In Lisp languages, by default only function definitions are folded.
  ;; :hook ((agda2-mode lisp-mode c-mode) . origami-mode)

  ;; Please open any code with top level items folded away.
  :hook (prog-mode .  (lambda () (interactive)
                       (origami-close-all-nodes (current-buffer))))
  ;; MA: It seems that this is not ideal; it takes a bit longer than I'd like to fold the whole file.

  :config

  ;; For any major-mode that doesn't have explicit support, origami will use the
  ;; indentation of the buffer to determine folds.
  (global-origami-mode)

  ;; With basic support for one of my languages.
  (push '(agda2-mode . (origami-markers-parser "{-" "-}"))
         origami-parser-alist))
#+END_SRC

With expected support for searching.
#+BEGIN_SRC emacs-lisp :tangle no
(defun my/search-hook-function ()
  (when origami-mode (origami-open-node-recursively (current-buffer) (point))))

;; Open folded nodes if a search stops there.
(add-hook 'helm-swoop-after-goto-line-action-hook #'my/search-hook-function)
;;
;; Likewise for incremental search, isearch, users.
;; (add-hook 'isearch-mode-end-hook #'my/search-hook-function)
#+END_SRC

And hydra...
#+BEGIN_SRC emacs-lisp :tangle no
(my/defhydra "C-c f" "Folding text" archive
  :Current
  ("h" origami-close-node-recursively "Hide")
  ("s" origami-open-node-recursively  "Show")
  ("c" origami-recursively-toggle-node "Cycle") ;; Acts like org-mode header collapsing. Cycle a fold between open, recursively open, closed.
  ("f" origami-show-only-node "Focus") ;; Close everything but the folds necessary to see the point. Very useful for concentrating on an area of code.
  ;; ("H" origami-close-all-nodes "Hide All")
  ;; ("S" origami-open-all-nodes "Show All")
  :Navigate
  ("n" origami-next-fold "Next")
  ("p" origami-previous-fold "Previous")
  :...
  ("t" origami-toggle-all-nodes  "Toggle buffer")
  ("m" lsp-ui-imenu "Menu of TLIs" :exit t) ;; TLI ‚âà Top Level Items
  ;; ("i" imenu-list "iMenu (General)") ;; It seems the above is enough for both prog and otherwise.
  ("r" origami-reset)) ;; Remove all folds from the buffer and reset all origami state. Useful if origami messes up!
#+END_SRC

# *Disabled:* I've looked at a few folding modes, and I like this one.
# However, I seldom need it.
#+end_details
#+begin_details "[Disabled / Alternative] yafolding"
I found using yafolding-mode to be way too slow.
#+begin_src emacs-lisp :tangle no
;; ‚ÄúYet Another Folding‚Äù just works: Indented elements are folded away; no setup required.
;; (use-package discover)
(use-package yafolding
    ;; Please open any code with top level items folded away:
    ;; Open the file super quick, but when I'm inactive for 5 seconds,
    ;; then I'm probably doing other stuff so do the folding then.
    ;; :hook prog-mode .  (lambda () (interactive)
   ;; (run-with-idle-timer 5 nil #'yafolding-hide-all))
   ;; MA: It seems that this is not ideal; it takes a bit longer than I'd like to fold the whole file.
  )
(defhydra yafolding-hydra (:color pink :columns 3)
  "Fold code based on indentation levels"
  ;; First row
  ("s" yafolding-show-element "show element")
  ("S" yafolding-show-all "show all")
  ("<right>" (lambda () (interactive)
     (let ((next (car (yafolding-get-overlays (point) (point-max)))) pos)
       (if (not next) (message "No more folded regions")
         (setq pos (overlay-start next))
               (yafolding-hide-element)
               (goto-char pos)
               (yafolding-show-element))))
   "forward element")
  ;; Second row
  ("h" yafolding-hide-element "hide element")
  ("H" yafolding-hide-all "hide all")
  ("<left>" (lambda () (interactive)
     (let ((previous (car (yafolding-get-overlays (point-min) (point)))) pos)
       (if (not previous) (message "No more folded regions")
         (setq pos (overlay-start previous))
               (yafolding-hide-element)
               (goto-char pos)
               (yafolding-show-element))))
        "backward element")
  ;; Third row
  ("SPC" yafolding-toggle-element "toggle element")
  ("T" yafolding-toggle-all "toggle all")
  ("q" nil "quit" :color red)
  ("p" yafolding-hide-parent-element "hide parent")
  ("<up>" (lambda () (interactive) (or (ignore-errors (yafolding-go-parent-element))
    (message "Already at the top level.")))
   "go to parent")
  ("r" (lambda () (interactive) (yafolding-hide-region (region-beginning) (region-end)))
   "hide region"
  ))

  (global-set-key (kbd "s-f") 'yafolding-hydra/body)
#+end_src
#+end_details
*** E2E Test                                                         :ignore:
:PROPERTIES:
:CUSTOM_ID: E2E-Test
:END:

#+begin_details Test
#+begin_src emacs-lisp :tangle init-test.el
(ert-deftest hideshow-is-enabled-and-folds-by-default ()
  :tags '(hideshow)
  ;; Make a temporary scratch.js file with the given contents.
  (let* ((contents "function fierce(name) { \n return `${name}: ROAR` \n }")
         (scratch.js (make-temp-file "scratch" nil ".js" contents)))

    ;; Hideshow is enabled whenever we open a code file
    (find-file scratch.js)
    (should hs-minor-mode)

    ;; Function definition is a hidden block
    (end-of-line)
    (backward-char 2)
    (should (hs-already-hidden-p))

    ;; Indeed, the hidden block starts at the first line break and ends just after the second.
    (-let [ov (hs-already-hidden-p)]
      (-let [(first\n second\n) (-elem-indices "\n" (s-split "" contents))]
        (should (equal (overlay-start ov) first\n)) ;; ‚âà 25
        (should (equal (overlay-end ov) (+ second\n 2))))) ;; ‚âà 52

    (kill-buffer)))
#+end_src
#+end_details

** Aggressive Indentation
:PROPERTIES:
:CUSTOM_ID: Aggressive-Indentation
:END:

With a single space or tab, my code should always remain indented.

[[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]] is a minor mode that keeps your code always indented. It
reindents after every change, making it more reliable than electric-indent-mode.

#+BEGIN_SRC emacs-lisp
;; Always stay indented: Automatically have blocks reindented after every change.
(use-package aggressive-indent :config (global-aggressive-indent-mode t))

;; Use 4 spaces in places of tabs when indenting.
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

This mode requires my Lisp forms to be well-balanced; e.g., having a missing
parenthesis does not indent. For instance, I have a form ~F~ and I write ~(when F~
but have not yet enclosed the final parens, I still want nice indentation. So...

*** ¬†[[https://github.com/jiahaowork/el-fly-indent-mode.el][Indent Emacs Lisp on the fly]] :Disabled:Breaks_C_c_C_v_C_t:
:PROPERTIES:
:CUSTOM_ID: https-github-com-jiahaowork-el-fly-indent-mode-el-Indent-Emacs-Lisp-on-the-fly
:header-args: :tangle no
:END:

#+begin_src emacs-lisp :tangle no
;; This minor mode toggles on along with elisp-mode and indents on the fly when
;; you edit the code. No special key strokes needed.
;; Demo: https://www.youtube.com/watch?v=zrFmfFZfj-A&ab_channel=JiahaoLi
(use-package el-fly-indent-mode
    :defer nil
  :config (add-hook 'emacs-lisp-mode-hook #'el-fly-indent-mode))
#+end_src
*** Indentation Guide
:PROPERTIES:
:CUSTOM_ID: Indentation-Guide
:END:

The following is also ‚ÄúOK‚Äù in Org-mode ;-)
#+begin_src emacs-lisp
;; Add a visual indent guide
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-character ?|)
  (highlight-indent-guides-responsive 'stack))
#+end_src
*** Being Generous with Whitespace                                 :Disabled:
:PROPERTIES:
:CUSTOM_ID: Being-Generous-with-Whitespace
:END:

| Disabled: I'm not actively writing C-like code in Emacs. |

The following minor mode automatically adds spacing around operators.
#+begin_src emacs-lisp :tangle no
(use-package electric-operator
  :hook (c-mode . electric-operator-mode))
#+end_src

I dislike it when users write ~x=y+1~ ---whitespace is free and helpful.  ‚ü® Also,
languages with arbitrary identifiers, like Lisp and Agda, would accept ~x=y+1~ as
an identifier, not an expression! ‚ü©

*** Auto-format on Save                                            :Disabled:
:PROPERTIES:
:CUSTOM_ID: Auto-format-on-Save
:header-args: :tangle no
:END:

| Disabled: I mainly code in ELisp and so don't require this utility. |
# ! :Breaks_HTML_export_of_org_files_with_unicode_or_emojis:

[[https://github.com/lassik/emacs-format-all-the-code/tree/eb2a7fa6da15d23b57921218a36ac67d523e81f1][Auto-format source code in many languages with one command]]

Let's auto-format source code in many languages using the same command for all
languages, instead of learning a different Emacs package and formatting command
for each language.

Just do ~M-x format-all-buffer~ and it will try its best to do the right thing. To
auto-format code on save, use the minor mode format-all-mode. Better yet, we ask
for it to do so ‚Äúon save‚Äù.

- You will need to install external programs to do the formatting. If
  ~format-all-buffer~ can't find the right program, it will try to tell you how to
  install it.
- An alternative Emacs tool is [[https://github.com/radian-software/apheleia][apheleia: üå∑ Run code formatter on buffer
  contents without moving point, using RCS patches and dynamic programming.]]

#+begin_src emacs-lisp
(use-package format-all
    :defer nil
  ;; To enable format on save for most programming language buffers:
  :hook (prog-mode . format-all-mode)
  :config
  ;; Please use the default formatters; I don't care too much.
  (add-hook 'format-all-mode-hook 'format-all-ensure-formatter))
#+end_src

[[https://prettier.io/docs/en/index.html][Prettier]] is an opinionated code formatter for numerous web related languages,
including JS, TS, HTML, CSS, JSON, Vue, Markdown, and YAML.

#+begin_src emacs-lisp
;; For JavaScript prettification: It automatically inserts semicolons, forces newlines, inserts parens, etc.
;; Lots of redundant stuff, but stuff to make it easy to work with others.
(shell-command "npm install --global prettier")
;; Specific package to do only JS prettification: https://github.com/prettier/prettier-emacs
#+end_src

For example, in a NodeJS app make a file ~.prettierrc.json~ whose contents are
#+begin_src json :tangle no
{
    "singleQuote": true,
    "arrowParens": "avoid",
    "printWidth": 120,
    "semi": false,
    "trailingComma": "none"
}
#+end_src
Unfortunately, my current team prefers ~"semi": true~ ---which is understandable
for people not familar with how JavaScript does [[https://www.freecodecamp.org/news/lets-talk-about-semicolons-in-javascript-f1fe08ab4e53/][semicolon insertion]].

( If you're having trouble getting prettier to work on save, consider using this
[[https://github.com/codesuki/add-node-modules-path][package]] which detects your node modules' path. )

Anyhow, with these rules:
- I write =const f = (x) => "x" == x= then on save it becomes =const f = x => 'x' == x;=
- I write =let xs = [1, 2, 3,]= then on save it becomes =let xs = [1, 2, 3];=
- I write =foo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());=
  then nothing happens on save; but if you add one more argument, =, 12=, then it gets reformatted with each arg on one line.

Notice that in the first example above, only minor syntactic changes were made;
nothing altering semantics or quality of code ---for that, we use a /linter/.
In particular, [[https://emacs-lsp.github.io/lsp-mode/page/lsp-eslint/][LSP ESLint]] when activated will show us two errors: It's almost always
better to use ~===~ instead of ~==~ and literals should be on the right side of the equality.
We can use ~M-x lsp-execute-code-action~ to get a list of actions that can be performed to fix this /quality/ problem.

*** Which function are we writing?
:PROPERTIES:
:CUSTOM_ID: Which-function-are-we-writing
:END:
In the modeline, show the name of the function we're currently writing.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'which-function-mode)
(add-hook 'org-mode-hook  #'which-function-mode)
#+END_SRC
In Org-mode, this places the current heading in the modeline.

In Lisp mode, ensure we always have matching parens.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'check-parens)
#+END_SRC

** Semantic and Syntactic Highlighting
*** Coding with a Fruit Salad: Semantic Highlighting
:PROPERTIES:
:CUSTOM_ID: Coding-with-a-Fruit-Salad-Semantic-Highlighting
:END:

What should be highlighted when we write code? Static keywords with fixed uses,
or dynamic user-defined names?

+ /Syntax/ highlighting ‚á® Specific words are highlighted in strong colours so that
  the /structure/ can be easily gleaned.
  - Generally this only includes a language's keywords, such as ~if, loop, begin,
    end, cond~.
  - User defined names generally share one colour; usually black.
  - Hence, an ~if~ block may be seen as one coloured keyword followed by
    a blob of black text.

  /Obvious keywords are highlighted while the rest remains in black!/

+ /Semantic/ highlighting ‚á® Identifiers obtain unique colouring.
  - This makes it much easier to visually spot dependencies with a quick glance.
    + One can *see* how data flows through a function.
  - In dynamic languages, this is a visual form of typing: Different colours are
    for different names.
    + Especially helpful for (library) names that are almost the same.
    + This can be accomplished anywhere in Emacs by pressing ~M-s h .~ on
      a selected phrase.

For Emacs, [[https://github.com/ankurdave/color-identifiers-mode][Color Identifiers Mode]] gives unique highlighting to identifiers.
- It comes with support for a bunch of languages, and one can add support for others.
- It picks colours adaptively to fit the theme; one uses ~M-x color-identifiers:regenerate-colors~ after a theme change.

#+begin_src emacs-lisp
(use-package color-identifiers-mode

  :config (global-color-identifiers-mode))

;; Sometimes just invoke: M-x color-identifiers:refresh
#+END_SRC

When writing a new name, after about ~5 seconds it obtains a colour which is then
propagated immediately to any new occurrences. This timeout before recolouring
is to avoid any lag from multithreading and can be changed by altering the following
line (#64) in the source file, changing the ~5~ to a smaller number.
#+BEGIN_SRC emacs-lisp :tangle no
(run-with-idle-timer 5 t 'color-identifiers:refresh)
#+END_SRC

Here are further reads:
  - [[https://medium.com/@evnbr/coding-in-color-3a6db2743a1e][Coding in color: How to make syntax highlighting more useful]] ---an excellent, terse, read
  - [[https://zwabel.wordpress.com/2009/01/08/c-ide-evolution-from-syntax-highlighting-to-semantic-highlighting/][C++ IDE Evolution: From Syntax Highlighting to Semantic Highlighting]]
    + Names with a similar prefix share a colour, and class-local items share a colour.
  - [[https://wordsandbuttons.online/lexical_differential_highlighting_instead_of_syntax_highlighting.html][Lexical differential highlighting instead of syntax highlighting]]
    + /Ideally, the smaller the lexical difference, the greater the color difference should be./
  - [[https://github.com/jacksonrayhamilton/context-coloring][Colouring by Context]] ---an Emacs package
  - [[http://www.linusakesson.net/programming/syntaxhighlighting/][A case against syntax highlighting]]

*** Highlight Quoted Symbols
:PROPERTIES:
:CUSTOM_ID: highlight-quoted-symbols
:END:

#+begin_src emacs-lisp
(use-package highlight-quoted
  :defer nil
  :config (add-hook 'emacs-lisp-mode-hook 'highlight-quoted-mode))

;; If everything worked fine, then ‚Äú 'b ‚Äù below should be coloured nicely in Emacs Lisp mode.
(when nil
  (-let [x 'somevar]
    (list x 'b "c" :e)))
#+end_src

*** Highlighting Numbers and Escape Characters
:PROPERTIES:
:CUSTOM_ID: Syntax-highlighting-numbers-and-escape-characters
:END:
Lightweight syntax highlighting improvement for numbers and escape sequences (e.g. \n, \t) /within/ quotes.

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode separedit-double-quote-string-mode)) ;; The latter is for when I do ‚åò-e on a quoted string to edit it.

(use-package highlight-escape-sequences
  :hook ((prog-mode . hes-mode)
         (separedit-double-quote-string-mode . hes-mode)) ;; Wont work since this mode has no font-lock-builtin-face
  :config
  ;; Colour the escapes as if they were builtin keywords.
  (put 'hes-escape-backslash-face 'face-alias 'font-lock-builtin-face)
  (put 'hes-escape-sequence-face 'face-alias 'font-lock-builtin-face))

;; If the above two worked fine, then you should see \n and 3 highlighted below
(when nil "Look: 1 and \\ and \n 2" (setq three 3))
#+end_src

*** Highlight /defined/ Lisp symbols
:PROPERTIES:
:CUSTOM_ID: Highlight-defined-Lisp-symbols
:END:

Usually Emacs only highlights macro names, the [[https://github.com/Fanael/highlight-defined][following]] incantation makes it
highlight all defined names ---as long as we're in Lisp mode, whence in org-src
blocks we use ~C-c '~.
#+BEGIN_SRC emacs-lisp
;; Emacs Lisp specific
(use-package highlight-defined :hook emacs-lisp-mode)
#+END_SRC

Super helpful in making my Emacs configuration: If a name is not highlighted,
then I've misspelled it or it doesn't exist! :smile:

** show-me
#+begin_src emacs-lisp :tangle no :results replace
(defun show-me ()
  "Evaluate a Lisp expression and insert its value
   as a comment at the end of the line.

   Useful for documenting values or checking values.
  "
  (interactive)
  (-let [it
         (thread-last (thing-at-point 'line)
           read-from-string
           car
           eval
           (format " ;; ‚áí %s"))]
    (end-of-line)
    (insert it)))
#+END_SRC

** TODO Smartparens

#+begin_src emacs-lisp :tangle no
(use-package smartparens
  :init
  (smartparens-global-mode 1)
  (show-smartparens-global-mode +1)

  :bind (

         ("M-f" . sp-forward-sexp)  ;; Move forward one  expression.
         ("M-b" . sp-backward-sexp) ;; Move backward one expression.

         ;; Going to the start & end of current expr in pair-able character.
         ("M-a" . sp-beginning-of-sexp)
         ("M-e" . sp-end-of-sexp)

         ;; Going forwards deep down & up current expr; treating it as a tree.
         ("M-d" . sp-down-sexp)
         ("M-u" . sp-up-sexp)
         ;; Acending & descending backwards; i.e., leftwards.
         ("M-n" . sp-backward-down-sexp)
         ("M-p" . sp-backward-up-sexp)

         ;; Unwrapping: Removing pair-able characters.
         ("M-w" . sp-unwrap-sexp)
         ("M-m" . sp-backward-unwrap-sexp)

         ;; ‚ÄúSlurping‚Äù: Move closing character forward/backward to include next sexp.
         ;; ‚ÄúBarfing‚Äù: Contract a sexp, or string, by pushing a its last/first item out.
         ;; See below for examples.
         ("M-)" . sp-forward-slurp-sexp)
         ("M-(" . sp-backward-slurp-sexp)
         ("M-]" . sp-forward-barf-sexp)
         ("M-[" . sp-backward-barf-sexp)

         ;; Transpose two bracketed terms; e.g., a b c ‚ü™Here‚ü´ ‚ü∂ a c b ‚ü™Here‚ü´
         ;; Transpose backwards by being on the token;
         ;; transpose forwards by being after the token.
         ("M-t" . sp-transpose-sexp)

         )

  :config
  ;; Enable smartparens everywhere
  (use-package smartparens-config)

  (setq
   ;; smartparens-strict-mode t
   ;; sp-autoinsert-if-followed-by-word t
   ;; sp-autoskip-closing-pair 'always
   sp-hybrid-kill-entire-symbol nil)

  ;; In Elisp & org modes, do not ‚Äòclose‚Äô a back-tick or single quote!
  (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p))
  (sp-local-pair 'emacs-lisp-mode "'" nil :when '(sp-in-string-p))
  (sp-local-pair 'org-mode "`" nil :when '(sp-in-string-p))
  (sp-local-pair 'org-mode "'" nil :when '(sp-in-string-p))
  )
#+END_SRC

*Wrapping*
To enclose a token with a pair-able character, at the start of the expression
press ~C-ESCAPE-SPACE~, select the region, followed by a pair-able character such as ~[, {, ", ', *,~ etc.
To wrap a single token forwards, use ~C-M-SPACE~.

Examples of slurping & barfing --i.e., sexp inclusion and contraction.
#+begin_example
a [x y z] b  ‚ü∂‚ÄúM-) inside [‚ãØ]‚Äù‚ü∂  a [x y z b]
a [x y z] b  ‚ü∂‚ÄúM-) inside [‚ãØ]‚Äù‚ü∂  [a x y z] b
[a x y z b]  ‚ü∂‚ÄúM-] inside [‚ãØ]‚Äù‚ü∂  a [x y z b]
[a x y z b]  ‚ü∂‚ÄúM-] inside [‚ãØ]‚Äù‚ü∂  [a x y z] b
#+end_example
** Column Marker
:PROPERTIES:
:CUSTOM_ID: Column-Marker
:END:

Have a thin line to the right to ensure I don't write ‚Äúoff the page‚Äù.
#+begin_src emacs-lisp :tangle no :tangle no
(use-package fill-column-indicator
  :hook (prog-mode . fci-mode))
;; (setq fill-column 120)
#+END_SRC

** Get nice child frames when looking at completions candidates
:PROPERTIES:
:CUSTOM_ID: Get-nice-child-frames-when-looking-at-completions-candidates-In-particular-when-editing-Lisp-code-the
:END:
In particular, when editing Lisp code, the (company-quickhelp) doc strings
appear in nice frames when I pause on a completion candidate.
#+begin_src emacs-lisp
(use-package company-posframe :hook prog-mode)
#+end_src

** interactive macro-expander

Anywhere in a macro form, press ~C-c e~ to start an (inline) interactive session
where you can see what the expanded form of the macro looks like and you can
move your cursor to other macro forms and expand those as well by pressing
~e~. Then press ~q~ to quit.
#+begin_src emacs-lisp
(use-package macrostep)
(define-key emacs-lisp-mode-map (kbd "C-c e") 'macrostep-expand)
#+end_src

This seems like an excellent way to debug macros.

** Smart jumping to definitions

# By default ~M-.~ only works on definitions that live in files: If you press ~C-x
# C-e~ at the end of ~(setq foo 1)~ then invoke ~M-.~ on ‚Äú foo ‚Äù
#+begin_src emacs-lisp
(use-package elisp-def)
(bind-key*  "M-." #'elisp-def emacs-lisp-mode-map)

;; Example usage:
(when nil
  (let ((foo 1))
    (setq foo 2))) ;; ‚ÄúM-.‚Äù on this ‚Äúfoo‚Äù will now take us to the start of the let-clause.
#+end_src
* Prose
:PROPERTIES:
:CUSTOM_ID: Prose
:END:

Emacs can be setup with a spellchecker and other expected features of a word processing tool
---however these features apply Emacs-wide since nearly everything is
essentially text (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

- Org-mode is a writer's best friend; it's large enough to deserve its own sections.

- See [[https://lucidmanager.org/tags/emacs/][Emacs Writing Studio]] for a series of articles on making/using Emacs for writing.

** Bidirectional Text
#+begin_src emacs-lisp
;; Sometimes I have Arabic in my buffers, however I am an English speaker
;; and so Left-to-Right is most natural to me. As such, even when Arabic
;; is present, or any bidirectional text, just use Left-to-Right.
(setq-default bidi-paragraph-direction 'left-to-right)
#+end_src
** Whitespace
:PROPERTIES:
:CUSTOM_ID: Whitespace
:END:
Let's start off by cleaning-up any accidental trailing whitespace and in other
places upon save.
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

See [[http://ergoemacs.org/emacs/whitespace-mode.html][here]] for making whitespace visible; including spaces, tabs, and newlines

** Formatting Text
:PROPERTIES:
:CUSTOM_ID: Formatting-Text
:END:

The following incantation, doc:my/org-mode-format, makes it so that we can
select some text then press kbd:C-c_f (to get a list of possible character
completions) then press the symbol we want our text to be surrounded with.

#+begin_details
#+begin_src emacs-lisp
(local-set-key (kbd "C-c f") #'my/org-mode-format)
(defun my/org-mode-format (&optional text)
"Surround selected region with the given Org emphasises marker.

E.g., if this command is bound to ‚ÄúC-c f‚Äù then the sequence
‚ÄúC-c f b‚Äù would make the currenly selected text be bold.
Likewise, ‚ÄúC-c f *‚Äù would achieve the same goal.

When you press ‚ÄúC-c f‚Äù, a message is shown with a list of
useful single-character completions.

Note: ‚ÄúC-c f ùìç‚Äù, for an unrecognised marker ùìç, just inserts
the character ùìç before and after the selected text."
  (interactive "P") ;; Works on a region
  ; (message "b,* ‚ü®Bold‚ü©; i,/ ‚ü®Italics‚ü©; u,_ ‚ü®Underline‚ü©; c,~ ‚ü®Monotype‚ü©")
  (message "‚ü®Bold b,*‚ü© ‚ü®Italics i,/‚ü© ‚ü®Underline u,_‚ü© ‚ü®Monotype c,~‚ü©")
  (let ((kind (read-char)))
    ;; Map letters to Org formatting symbols
    (setq kind (or (plist-get '(b ?\*   i ?\/   u ?\_   c ?\~)
                              (intern (string kind)))
                   kind))
    (insert-pair text kind kind)))
#+end_src
#+end_details

** Fill-mode ---Word Wrapping
:PROPERTIES:
:CUSTOM_ID: Fill-mode-Word-Wrapping
:END:

In fill mode, when you type past the end of a line, Emacs automatically starts a new line, cleverly formatting
paragraphs. This is a powerful form of ‚Äúword wrap‚Äù.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80          ;; Let's avoid going over 80 columns
              truncate-lines nil      ;; I never want to scroll horizontally
              indent-tabs-mode nil)   ;; Use spaces instead of tabs
#+END_SRC

Certain variables are sensibly local to a buffer, and so ~setq~ only alters their value for one buffer. Using ~setq-default~
we change a variable's default value, in every buffer.

#+BEGIN_SRC emacs-lisp
;; Wrap long lines when editing text
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

We may press ~M-q~ to cleverly redistribute the line breaks within any paragraph, thereby making it look better. With a
prefix argument, it justifies it as well ---i.e., pads extra white space to make the paragraph appear rectangular.

            Note that ~M-o M-s~ centres a line of text ;-) Fun stuff!

Fill-mode is also known as ‚Äúhard word wrapping‚Äù, which has the counterpart ‚Äúsoft word wrapping‚Äù ‚Ä¶

Visual line mode is built-in and provides support for editing by visual lines: Lines off the screen are visually word
wrapped, but logically remain one line.  Moreover =C-a,e,k= operate on visual lines rather than logical lines.
#+begin_src emacs-lisp
;; Bent arrows at the end and start of long lines.
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(global-visual-line-mode 1)
#+end_src
Visual line mode is useful when I have way too many windows open or when using smaller frames.

** Pretty Lists Markers
:PROPERTIES:
:CUSTOM_ID: Pretty-Lists-Markers
:END:

When writing, it's common to use ~+,-,*~ to enumerate unordered lists
---especially so in Org-mode wherein they denote structured text.  Let's render
them visually as Unicode bullets.

#+begin_src emacs-lisp
;; (x y z) ‚âà (existing-item replacement-item positivity-of-preceding-spaces)
(cl-loop for (x y z) in '(("+" "‚ó¶" *)
                       ("-" "‚Ä¢" *)
                       ("*" "‚ãÜ" +))
      do (font-lock-add-keywords 'org-mode
                                 `((,(format "^ %s\\([%s]\\) " z x)
                                    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) ,y)))))))
#+end_src

** Fix spelling as you type ---thesaurus & dictionary too!
:PROPERTIES:
:CUSTOM_ID: Fix-spelling-as-you-type-thesaurus-dictionary-too
:END:

I would like to check spelling on the fly.
 + ~C-;~ :: Cycle through corrections for word at point.
 + ~M-$~ :: Check and correct spelling of the word at point
 + ~M-x ispell-change-dictionary RET TAB~ :: To see what dictionaries are available.

Install spell-checking application as well as a reliable English
dictionary, [[https://wordnet.princeton.edu/][WordNet]].
   #+begin_src emacs-lisp
(system-packages-ensure "aspell")
(system-packages-ensure "wordnet")
   #+end_src

~flyspell-prog-mode~ enables spell checking for programming by only considering
comments and strings.

#+BEGIN_SRC emacs-lisp
(use-package flyspell

  :hook ((prog-mode . flyspell-prog-mode)
         ((org-mode text-mode) . flyspell-mode)))
#+END_SRC

Enabling fly-spell for text-mode enables it for org and latex modes since they
derive from text-mode.

Flyspell needs a spell checking tool, which is not included in Emacs.  We
install ~aspell~ spell checker using, say, homebrew via ~brew install aspell~.  Note
that Emacs' ~ispell~ is the interface to such a command line spelling utility.
# See available dictionary via ~aspell dicts~.

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name (s-trim (shell-command-to-string "which aspell")))
(setq ispell-dictionary "en_GB") ;; set the default dictionary
#+END_SRC

[Disabled] Allow spelling support for CamlCase words like ‚ÄúEmacsIsCool‚Äù.
#+BEGIN_SRC emacs-lisp :tangle no
(setq  ispell-extra-args '("--sug-mode=ultra"
                            "--run-together"
                            "--run-together-limit=5"
                            "--run-together-min=2"))
#+END_SRC

Let us select a correct spelling merely by clicking on a word
---for the rare days I have a mouse.
#+begin_src emacs-lisp
(eval-after-load "flyspell"
  ' (progn
     (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
     (define-key flyspell-mouse-map [mouse-3] #'undefined)))
#+end_src

Colour incorrect works; default is an underline.
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
(custom-set-faces '(flyspell-incorrect ((t (:inverse-video t)))))
#+END_SRC

Finally, save to user dictionary without asking:
#+BEGIN_SRC emacs-lisp
(setq ispell-silently-savep t)
#+END_SRC

Let's keep track of my personal word set by having it be in my version controlled
.emacs directory. [[http://aspell.net/man-html/Format-of-the-Personal-and-Replacement-Dictionaries.html][Note]] that the default location is ~~/.[i|a]spell.DICT~ for
a specified dictionary ~DICT~.
#+BEGIN_SRC emacs-lisp
(setq ispell-personal-dictionary "~/.emacs.d/.aspell.en.pws")
#+END_SRC

Nowadays, I very rarely write non-literate programs, but if I do
I'd like to check spelling only in comments/strings. E.g.,
#+BEGIN_SRC emacs-lisp
(add-hook          'c-mode-hook 'flyspell-prog-mode)
(add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)
#+END_SRC

Use the thesaurus Emacs frontend [[https://github.com/hpdeifel/synosaurus][Synosaurus]] to avoid unwarranted repetition.
#+begin_src emacs-lisp
(use-package synosaurus
  :defer 100
  :init    (synosaurus-mode)
  :config  (setq synosaurus-choose-method 'popup) ;; 'ido is default.
           (global-set-key (kbd "M-#") 'synosaurus-choose-and-replace))
#+end_src
The thesaurus is powered by the Wordnet ~wn~ tool, which can be invoked without an
internet connection!
#+begin_src emacs-lisp
;; (shell-command "brew cask install xquartz &") ;; Dependency
;; (shell-command "brew install wordnet &")
#+end_src

Let's use Wordnet as a dictionary via the [[https://github.com/gromnitsky/wordnut][wordnut]] package.
#+BEGIN_SRC emacs-lisp
(use-package wordnut
 :defer 100
 :bind ("M-!" . wordnut-lookup-current-word))

;; Use M-& for async shell commands.
#+END_SRC
Use ~M-‚Üë,‚Üì~ to navigate dictionary results, and ~wordnut-search~ for a new search.

An alternative to =wordnut= is to use the lightweight ~define-word~ package; which I
think is not ideal since it provides way less information.

:PowerthesaurusCurrentlyNotWorking:
#+BEGIN_SRC emacs-lisp :tangle no
(load "~/dotfiles/.emacs.d/powerthesaurus.el")
(global-set-key (kbd "M-#") 'powerthesaurus-lookup-word-at-point)

;; Website currently down ... https://github.com/SavchenkoValeriy/emacs-powerthesaurus/issues/6
#+END_SRC
:End:
** Touch Typing                                                    :Disabled:
:PROPERTIES:
:CUSTOM_ID: Touch-Typing
:header-args: :tangle no
:END:

Use this game to help you learn to spell words that you're having trouble with;
e.g., I have a file ~~/Dropbox/spelling.txt~ with words I have trouble spelling,
which I open then run ~M-x typing-of-emacs~ in order to improve spelling said
words.
#+BEGIN_SRC emacs-lisp :tangle no
;; The Typing Of Emacs, a game.
(use-package typing-of-emacs
  :quelpa (typing :fetcher wiki :url "https://www.emacswiki.org/emacs/typing.el"))
#+END_SRC

Practice touch typing using [[https://github.com/hagleitn/speed-type][speed-type]].
#+begin_src emacs-lisp
(use-package speed-type )
#+end_src
Running ~M-x speed-type-region~ on a region of text, or ~M-x speed-type-buffer~ on a
whole buffer, or just ~M-x speed-type-text~ will produce the selected region, buffer,
or random text for practice. The timer begins when the first key is pressed
and stats are shown when the last letter is entered.

Other typing resources include:
+ [[https://www.emacswiki.org/emacs/TypingOfEmacs][Typing of Emacs]] ---an Emacs alternative to speed type, possibly more engaging.
+ [[https://alternativeto.net/software/klavaro/][Klavaro]] ---a GUI based yet language-independent typing tutor.
  - I'm enjoying this tool in getting started with Arabic typing.
+ [[https://typing.io/][Typing.io]] is a tutor for coders: Lessons are based on open source code, such
  some XMonad written in Haskell or Linux written in C.
+ [[https://www.gnu.org/software/gtypist/index.html#downloading][GNU Typist]] ---which is interactive in the terminal, so not ideal in Emacs--,

To assist in language learning, it may be nice to have an Emacs
[[https://github.com/atykhonov/google-translate][interface]] to Google translate ---e.g., invoke ~google-translate-at-point~.
#+BEGIN_SRC emacs-lisp
(use-package google-translate

 :config
   (global-set-key "\C-ct" 'google-translate-at-point))
#+END_SRC

Select the following then ~C-c t~,
#+begin_quote
Hey buddy, what're you up to?
#+end_quote
Then /detect language/ then /Arabic/ to obtain:
#+begin_quote
ŸÖÿ±ÿ≠ÿ®ÿßŸã Ÿäÿß ÿµÿØŸäŸÇŸä ÿå ŸÖÿßÿ∞ÿß ÿ™ŸÅÿπŸÑÿü
#+end_quote
Neato üò≤

** Using a Grammar & Style Checker                                 :Disabled:
:PROPERTIES:
:CUSTOM_ID: Using-a-Grammar-Style-Checker
:header-args: :tangle no
:END:

[ A possibly better alternative is [[https://emacstil.com/til/2022/03/05/setting-up-vale-prose-linter-on-emacs/][Vale]]. ]

Let's install [[https://github.com/mhayashi1120/Emacs-langtool][a grammar and style checker]].
We get the offline tool from the bottom of the [[https://languagetool.org/][LanguageTool]] website, then relocate it
as follows.
#+BEGIN_SRC emacs-lisp
(use-package langtool

 :custom
  (langtool-language-tool-jar
   "~/Applications/LanguageTool-4.5/languagetool-commandline.jar"))
#+END_SRC

Now we can run ~langtool-check~ on the subsequent grammatically incorrect
text ---which is from the LanguageTool website--- which colours errors in red,
when we click on them we get the reason why; then we may invoke
~langtool-correct-buffer~ to quickly use the suggestions to fix each correction,
and finally invoke ~langtool-check-done~ to stop any remaining red colouring.

#+begin_example org
LanguageTool offers spell and grammar checking. Just paste your text here
and click the 'Check Text' button. Click the colored phrases for details
on potential errors. or use this text too see an few of of the problems
that LanguageTool can detecd. What do you thinks of grammar checkers?
Please not that they are not perfect. Style issues get a blue marker:
It's 5 P.M. in the afternoon. The weather was nice on Thursday, 27 June 2017
--uh oh, that's the wrong date ;-)
#+end_example

By looking around the source code, I can do all three stages smoothly (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà
#+BEGIN_SRC emacs-lisp
;; Quickly check, correct, then clean up /region/ with M-^
(eval-after-load 'langtool
(progn
(add-hook 'langtool-error-exists-hook
  (lambda ()
     (langtool-correct-buffer)
     (langtool-check-done)))

(global-set-key "\M-^"
                (lambda ()
                  (interactive)
                  (message "Grammar checking begun ...")
                  (langtool-check)))))
#+END_SRC

The checking command is silent, we added a bit of comforting acknowledgement to the user.

** Lightweight Prose Proofchecking
:PROPERTIES:
:CUSTOM_ID: Lightweight-Prose-Proofchecking
:END:

Let's [[https://github.com/bnbeckwith/writegood-mode][write good]]!

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  ;; Load this whenver I'm composing prose.
  :hook (text-mode org-mode)
  ;; Don't show me the ‚ÄúWg‚Äù marker in the mode line

  :defer 100

  ;; Some additional weasel words.
  :config
  (--map (push it writegood-weasel-words)
         '("some" "simple" "simply" "easy" "often" "easily" "probably"
           "clearly"               ;; Is the premise undeniably true?
           "experience shows"      ;; Whose? What kind? How does it do so?
           "may have"              ;; It may also have not!
           "it turns out that")))  ;; How does it turn out so?
           ;; ‚ÜØ What is the evidence of highighted phrase? ‚ÜØ
#+END_SRC

Inspired by Matt Might's [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][3 shell scripts to improve your writing, or
"My Ph.D. advisor rewrote himself in bash"]], this Emacs interface
emphasises, via underline, the following weaknesses in writing ---so
that I can fix them or decide that they are appropriate for the
scenario.

Sentences that cut out the following problems may become stronger
---by being more terse or precise.

+ Weasel Words ::
  Phrases that sound good without conveying information;
  such as vague precision or subjective phrases.

  E.g., /a number of, surprisingly, very close/.

  It's okay not to have exact details, but rather than ‚ÄúI don't know‚Äù
  explain why not and what the next steps will be.

+ Passive Voice ::
  Phrases wherein interest is in the object experiencing an action,
  rather than the subject that performs the action.

  - Bad: The house /was built by/ my father.
  - Good: My father /built/ this house.

  Likewise, including relevant or explanatory information as in ‚ÄúX
  guarantees Y‚Äù is an improvement over ‚ÄúY is guaranteed‚Äù.

  Sometimes the subject really is irrelevant, such as
  ‚ÄúWe did X‚Äù whereas ‚ÄúX happened‚Äù suffices.

  üëç If the relevant subject is unclear and, also, the text reads
  better in the active, then change a phrase.

+ Duplicated Words :: Occurrences of, say, ‚Äúthe the‚Äù.

   Harder to catch manually, but easier mechanically ;-)

** Placeholder Text ---For Learning & Experimenting
:PROPERTIES:
:CUSTOM_ID: Placeholder-Text-For-Learning-Experimenting
:END:

When learning about Emacs formatting commands, such as zap-to-char ~M-z~
or transpose ~M-t~, it's best to have filler text ---even better when
it's automatically generated instead of typing it out ourselves. The
following will give us a series of commands ~lorem-ipsum-insert-‚ãØ~ for
inserting lists, sentences, paragraphs and using a prefix argument,
with ~C-u~, we can request to generate any number of them.

#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum )
#+END_SRC

‚ÄòLorem‚Äô is not a word itself, but it comes from the Latin ‚ÄòDolorem Ipsum‚Äô
which means ‚Äúpain in and of itself‚Äù.

See this [[https://github.com/alhassy/emacs.d/blob/master/CheatSheet.pdf][Emacs Cheat Sheet]] to try out the textual navigation and formatting
bindings on lorem ipsum, gibberish text.

** Some text to make us smile
:PROPERTIES:
:CUSTOM_ID: Some-text-to-make-us-smile
:END:

The  [[https://github.com/davep/dad-joke.el][dad-joke]] queries [[https://icanhazdadjoke.com][https://icanhazdadjoke.com]] to bring us some funny.
#+begin_src emacs-lisp
(use-package dad-joke

  :config (defun dad-joke () (interactive) (insert (dad-joke-get))))
#+end_src

For example, ~M-x dad-joke~ now inserts:
#+begin_quote org
What are the strongest days of the week? Saturday and Sunday...the rest are
weekdays.
#+end_quote

** Unicode Input via Agda Input
:PROPERTIES:
:CUSTOM_ID: Unicode-Input-via-Agda-Input
:END:
:agda2-include-dirs-Issue:
#+BEGIN_SRC emacs-lisp
;; (load (shell-command-to-string "agda-mode locate"))
;;
;; Seeing: One way to avoid seeing this warning is to make sure that agda2-include-dirs is not bound.
; (makunbound 'agda2-include-dirs)
#+END_SRC
:End:

[[https://mazzo.li/posts/AgdaSort.html][Agda]] is one of my favourite languages, it's like Haskell on steroids.  Let's set
it up for the main sake of its Unicode input ---you may do likewise using TeX
input.  ( [[https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/][The Absolute Minimum Every Software Developer Absolutely, Positively
Must Know About Unicode and Character Sets (No Excuses!)]] )

/Agda input mode makes it extremely easy to use unicode in documents, something I/
/strongly prefer to do. When I can use symbols directly, instead of (for/
/instance) LaTeX commands, it makes my plaintext far more readable./ --- [[https://github.com/armkeh/dotfiles/tree/master/emacs][Armkeh
.emacs config]]

#+begin_src emacs-lisp
(system-packages-ensure "agda")
#+end_src

#+begin_details To use the Agda standard library by default
 #+BEGIN_SRC shell :tangle no
   mkdir -p ~/.agda
   echo /usr/local/lib/agda/standard-library.agda-lib >>~/.agda/libraries
   echo standard-library >>~/.agda/defaults
 #+END_SRC
 Invoke ~brew info agda~ to get these instructions and the version of Agda just
    installed.
#+end_details

#+begin_details Get font support for subscripts, if need be
    - Download and unzip the [[https://fontlibrary.org/en/font/symbola][symbola]] font
    - kbd:CMD_+_SPC ‚áí =font book= ‚áí CMD+O ‚áí select the symbola directory you just
      unzipped

    (Note: In the before time, you could brew install this font.)
#+end_details

Executing ~agda-mode setup~ appends the following text to the ~.emacs~ file.
Let's put it here ourselves.
#+begin_src emacs-lisp
(unless noninteractive
  (load-file (let ((coding-system-for-read 'utf-8))
               (shell-command-to-string "agda-mode locate"))))
#+end_src

I almost always want the ~agda-mode~ input method ---it's like the TeX method, but
better.
#+BEGIN_SRC emacs-lisp


;; TODO: Maybe don't bother installing Agda, and just get agda-input.el
;; from: https://github.com/agda/agda/blob/master/src/data/emacs-mode/agda-input.el
;; then loading that!
(url-copy-file "https://raw.githubusercontent.com/agda/agda/master/src/data/emacs-mode/agda-input.el" "~/.emacs.d/elpa/agda-input.el" :ok-if-already-exists)
(load-file "~/.emacs.d/elpa/agda-input.el")

;; MA: This results in "Package cl is deprecated" !?
(unless noninteractive
  (use-package agda-input
  :ensure nil ;; I have it locally.
  :demand t
  :hook ((text-mode prog-mode) . (lambda () (set-input-method "Agda")))
  :custom (default-input-method "Agda")))
  ;; Now C-\ or M-x toggle-input-method turn it on and offers


;; TODO add a hook that when the input method becomes Agda, just don't bother showing me in the modeline.
;; E.g., "Œ†" when using unicode input with Agda
;; Useful to have in the modeline, say when typing in Arabic.
;; (add-variable-watcher
;;  'current-input-method
;;  (lambda (_ newvalue 'set _)
;;    (setq current-input-method-title
;;          (if (equal newvalue "Agda") nil newvalue))))
#+END_SRC

:agda_Command_line_arguments:
    "+RTS   -H4.5G   -M4.5G   -K256M   -S/tmp/AgdaRTS.log   -A1G   -RTS   -i   ."

Wolfram Kahl has recommended the following settings.

#+begin_src emacs-lisp
;;(setq agda2-program-args (quote ("RTS" "-M4G" "-H4G" "-A128M" "-RTS")))
#+end_src

These arguments specify
| ~+RTS~, ~-RTS~ | Flags between these are arguments to the ~ghc~ runtime |
| ~-M[size]~   | Maximum heap size                                    |
| ~-H[size]~   | Suggested heap size                                  |
| ~-A[size]~   | Allocation area size used by the garbage collector   |

Full documentation for the ~ghc~ runtime argumentscan be found [[https://downloads.haskell.org/~ghc/7.8.4/docs/html/users_guide/runtime-control.html][here]].

Additional arguments that may be useful include
| ~-S[file]~ | Produces information about ‚Äúeach and every garbage collection‚Äù |
|          | - Outputs to ~stderr~ by default                               |

:end:

#+begin_quote
Unicode doesn't intend to cover things that are achievable with markup, so only
a limited subset of the alphabet is available as subscript; but all is available
as superscript, except ‚Äòq‚Äô.

‚Çê‚Çë‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çö·µ£‚Çõ‚Çú·µ§·µ•‚Çì
‚Å∞ ¬π ¬≤ ¬≥ ‚Å¥ ‚Åµ ‚Å∂ ‚Å∑ ‚Å∏ ‚Åπ ‚Å∫ ‚Åª ‚Åº ‚ÅΩ ‚Åæ ‚ÇÄ ‚ÇÅ ‚ÇÇ ‚ÇÉ ‚ÇÑ ‚ÇÖ ‚ÇÜ ‚Çá ‚Çà ‚Çâ ‚Çä ‚Çã ‚Çå ‚Çç ‚Çé
·µÉ ·µá ·∂ú ·µà ·µâ ·∂† ·µç  ∞ ‚Å±  ≤ ·µè À° ·µê ‚Åø ·µí ·µñ  ≥ À¢ ·µó ·µò ·µõ  ∑ À£  ∏ ·∂ª
·¥¨ ·¥Æ ·¥∞ ·¥± ·¥≥ ·¥¥ ·¥µ ·¥∂ ·¥∑ ·¥∏ ·¥π ·¥∫ ·¥º ·¥æ ·¥ø ·µÄ ·µÅ ‚±Ω ·µÇ
·µÖ ·µù ·µû ·µü ·µã ·∂ø ·∂• ·∂≤ ·µ† ·µ° ·µ¶ ·µß ·µ® ·µ© ·µ™

~brew cask install font-symbola~
‚áí Includes fonts for subscripts; e.g., ‚Çê‚Çô‚Çë‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çö‚Çú‚Çõ
#+end_quote

Below are my personal Agda input symbol translations;
e.g., ~\set ‚Üí ùíÆ‚ÑØùìâ~. Note that we could give a symbol new Agda TeX binding
interactively: ~M-x customize-variable agda-input-user-translations~ then
~INS~ then for key sequence type ~set~ then ~INS~ and for string paste ~ùíÆ‚ÑØùìâ~.
#+BEGIN_SRC emacs-lisp
(unless noninteractive (add-to-list 'agda-input-user-translations '("set" "ùíÆ‚ÑØùìâ")))
#+END_SRC
Better yet, as a loop:
#+BEGIN_SRC emacs-lisp
(unless noninteractive
(cl-loop for item
      in '(;; Arabic ornate parenthesis U+FD3E / U+FD3F
          ("(" "Ô¥æ")
          (")" "Ô¥ø")
          ("cmd" "‚åò")
           ;; categorial ;;
           ("alg" "ùíúùìÅ‚Ñä")
           ("split" "‚ñµ")
           ("join" "‚ñø")
           ("adj" "‚ä£")
           (";;" "Ôπî")
           (";;" "‚®æ")
           (";;" "‚àò")
           ;; logic
           ("if" "‚áê")
           ("onlyif" "‚áí")
           ;; lattices ;;
           ("meet" "‚äì")
           ("join" "‚äî")
           ;; tortoise brackets, infix relations
           ("((" "„Äî")
           ("))" "„Äï")
           ;; residuals
           ("syq"  "‚ï≥")
           ("over" "‚ï±")
           ("under" "‚ï≤")
           ;; Z-quantification range notation ;;
           ;; e.g., ‚Äú‚àÄ x ‚ùô R ‚Ä¢ P‚Äù ;;
           ("|"    "‚ùô")
           ("with" "‚ùô")
           ;; Z relational operators
           ("domainrestriction" "‚óÅ")
           ("domr" "‚óÅ")
           ("domainantirestriction" "‚©§")
           ("doma" "‚©§")
           ("rangerestriction" "‚ñ∑")
           ("ranr" "‚ñ∑")
           ("rangeantirestriction" "‚©•")
           ("rana" "‚©•")
           ;; adjunction isomorphism pair ;;
           ("floor"  "‚åä‚åã")
           ("lower"  "‚åä‚åã")
           ("lad"    "‚åä‚åã")
           ("ceil"   "‚åà‚åâ")
           ("raise"  "‚åà‚åâ")
           ("rad"    "‚åà‚åâ")
           ;; Replies
           ("yes"  "‚úî")
           ("no"    "‚ùå")
           ;; Arrows
           ("<=" "‚áê")
        ;; more (key value) pairs here
        )
      do (add-to-list 'agda-input-user-translations item)))
#+END_SRC
Also some silly stuff:
#+begin_src emacs-lisp
(unless noninteractive
;; Add to the list of translations using ‚Äúemot‚Äù and the given, more specfic, name.
;; Whence, \emot shows all possible emotions.
(cl-loop for emot
      in `(;; angry, cry, why-you-no
           ("whyme" "·Éö(‡≤†Áõä‡≤†)·Éö" "„ÉΩ‡ºº‡≤¢_‡≤¢‡ºΩÔæâ‚òÇ" "—â(„Çú„É≠„Çú—â)" "‚ÄøÔ∏µ(‡≤•Ôπè‡≤•)‚ÄøÔ∏µ" "‡≤†_‡≤†" "(‚ï¨ ‡≤†Áõä‡≤†)" "ÔΩ•Ôæü(*‚ù¶œâ‚ù¶)*ÔΩ•Ôæü" "(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª") ;; flip the table
           ;; confused, disapprove, dead, shrug, awkward
           ("what" "„Äå(¬∞„Éò¬∞)" "(‡≤†_‡≤†)" "(‚úñ‚ï≠‚ïÆ‚úñ)" "¬Ø\\_(„ÉÑ)_/¬Ø"  "(¬¥¬∞œâ¬∞`)" "ÔΩ•‚úß_‚úßÔΩ•")
           ;; dance, csi
           ("cool" "‚îè(-_-)‚îì‚îè(-_-)‚îõ‚îó(-_-Ôªø )‚îì"
            ,(s-collapse-whitespace "‚Ä¢_‚Ä¢)
                                      ( ‚Ä¢_‚Ä¢)>‚åê‚ñ†-‚ñ†
                                      (‚åê‚ñ†_‚ñ†)"))
           ;; love, pleased, success, yesss, smile, excited, yay
           ("smile" "‚ô•‚Äø‚ô•" "(‚îÄ‚Äø‚Äø‚îÄ)" "(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà" "·ï¶( ·¥º ⁄° ·¥º )·ï§" "(‡∏á‡≤†_‡≤†)‡∏á" "(ÔΩ°‚óï‚Äø‚óïÔΩ°)" "(‚óï‚Äø‚óï)" "( ÀÉ „ÉÆÀÇ)" "[ ‚áÄ ‚Äø ‚Üº ]" "Ÿ©(‚Åé‚ùõ·¥ó‚ùõ‚Åé)€∂" "·¥µ‚Äô·µê ·µá·µâ·µÉ·µò·µó‚Å±·∂†·µòÀ°" "(‚úø‚ó†‚Äø‚ó†)")
           ;; flower high-5
           ("hug" "‚ô°(‚úøÀá‚ó°Àá)‰∫∫(Àá‚ó°Àá‚úø)‚ô°" "(„Å•ÔΩ°‚óï‚Äø‚óïÔΩ°)„Å•" "(„Å•ÔΩ°‚óï‚Äø‚Äø‚Äø‚Äø‚óïÔΩ°)„Å•"))
      do
      (add-to-list 'agda-input-user-translations emot)
      (add-to-list 'agda-input-user-translations (cons "emot" (cdr emot)))))
#+end_src

# If you change this setting manually, without using the
# customization buffer, you need to call (agda-input-setup) in
# order for the change to take effect.
Finally let's effect such translations.
#+begin_src emacs-lisp
;; activate translations
(unless noninteractive (agda-input-setup))
#+end_src

Note that the effect of [[http://ergoemacs.org/emacs/emacs_n_unicode.html][Emacs unicode input]] could be approximated using
~abbrev-mode~.

:May_need_to_install_stix_font:
;; install STIX font from Ubuntu store!!
;; (set-fontset-font t 'unicode (font-spec :name "STIX") nil 'append)
:End:

** Increase/decrease text size
:PROPERTIES:
:CUSTOM_ID: Increase-decrease-text-size
:END:
The ‚Äòusual‚Äô text zoom keys ~C-¬±~ ‚Ä¶
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+END_SRC

If thou knowst the ELisp, forgive this shadowing of the ~negative-argument~
‚Ä¶ we've still got ~M--~ though.

Curious, this is one of the very first things I did when
began using Emacs; yet, perhaps I would not have done
it if I was simply told the defaults:
+ ~C-x C-=,+~ increases text size
+ ~C-x C--~ decreases test size
+ ~C-x C-0~ restores it to the default size

So, the above snippet seems to save us of the prefix
~C-x~ and we lose on using ‚Äò=‚Äô for text increase and worse we
need the shift-key to get access to the ‚Äò+‚Äô.

I suppose this is just a habit inherited from using other tools. Fortunately, I
did not inherit the need for the /common user access/ bindings ~C-x~ kill, ~C-c~ copy,
~C-v~ paste, nor ~C-z~ undo of other applications. If you're interested, ~M-x
cua-mode~ to enable [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA Bindings]].

** Moving Text Around
:PROPERTIES:
:CUSTOM_ID: Moving-Text-Around
:END:

This extends Org-mode's ~M-‚Üë,‚Üì~ to other modes, such as when coding.
#+BEGIN_SRC emacs-lisp
;; M-‚Üë,‚Üì moves line, or marked region; prefix is how many lines.
(use-package move-text

  :config (move-text-default-bindings))
#+END_SRC

** Enabling CamelCase Aware Editing Operations
:PROPERTIES:
:CUSTOM_ID: Enabling-CamelCase-Aware-Editing-Operations
:END:

[[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Subword-Movement.html][Subword]] movement lets us treat ‚ÄúEmacsIsAwesome‚Äù as three words
‚îÄ‚ÄúEmacs‚Äù, ‚ÄúIs‚Äù, and ‚ÄúAwesome‚Äù‚îÄ which is desirable since such naming
is common among coders. Now, for example, ~M-f~ moves along each subword.

#+begin_src emacs-lisp
(global-subword-mode 1)
#+end_src

** Mouse Editing Support                                           :Disabled:
:PROPERTIES:
:CUSTOM_ID: Mouse-Editing-Support
:header-args: :tangle no
:END:

# :Strange:This_Seems_To_Require_Deprecated_CL:Message_show_at_startup:

Text selected with the mouse is automatically copied to clipboard.
#+begin_src emacs-lisp
(setq mouse-drag-copy-region t)
#+end_src

** Delete Selection Mode
:PROPERTIES:
:CUSTOM_ID: Delete-Selection-Mode
:END:

Delete Selection mode lets you treat an Emacs region much like a typical text
selection outside of Emacs: You can replace the active region.  We can delete
selected text just by hitting the backspace key.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
** ¬† ~M-n,p~: Word-at-Point Navigation ‚ï±‚ï≤ Automatic highlighting current symbol/word :Disabled:
:PROPERTIES:
:CUSTOM_ID: M-n-p-Word-at-Point-Navigation
:header-args: :tangle no
:END:

Let's mimic the ~C-n,p~ constructs from line to word, so that unoccupied ~M-n,p~ now
serve to take us to the next or previous instance of the word under the
cursor. This is less intrusive than searching ~C-s~ or listing all occurrences ~M-s
o~. Moreover, let's automaticly highlight current symbols, words under the cursour, and cycle
quickly between highlkighted locations with
~ahs-forward~ / [[kbd:M-‚Üí]] and
~ahs-backward~ / [[kbd:M-‚Üê]].

#+BEGIN_SRC emacs-lisp
;; Default: M-‚Üí/‚Üê moves to the next/previous instance of the currently highlighted word
;; These are already meaningful commands in Org-mode, so we avoid these key re-bindings in Org-mode; TODO.
(use-package auto-highlight-symbol)
;;   :hook ((text-mode . auto-highlight-symbol-mode)
;;          (prog-mode . auto-highlight-symbol-mode)))
;;
;; This breaks Org Exports; e.g.,
;; C-c C-e h o  ‚áí  Match data clobbered by buffer modification hooks
#+END_SRC

Let's also quickly replace the word at point:
#+BEGIN_SRC emacs-lisp
(defun my/symbol-replace (replacement)
  "Replace all standalone symbols in the buffer matching the one at point."
  (interactive  (list (read-from-minibuffer "Replacement for thing at point: " nil)))
  (save-excursion
    (let ((symbol (or (thing-at-point 'symbol) (error "No symbol at point!"))))
      (beginning-of-buffer)
      ;; (query-replace-regexp symbol replacement)
      (replace-regexp (format "\\b%s\\b" (regexp-quote symbol)) replacement))))
#+END_SRC


(Unfortunately, as it currently is, there is no universal argument support: ~C-u
2 M-p~ does /not/ take you to the second previous instance of a word ---the prefix
is instead ignored. We can quickly form a work-around with doc:defhydra ---which
gives us temoporary modal modes.)

Finally, let's use [[kbd:M-n ‚ï± M-p ‚ï± M-']] to move to the next, previous, and
replace the word at point /but also/ to give us a meanu to repeat any of these
actions.
#+BEGIN_SRC emacs-lisp
(defmacro my/make-navigation-hydra (initial-action)
  `(defhydra word-navigation
    (:body-pre (,initial-action)) "Word-at-point Navigation"
    ("n" ahs-forward "Next instance")
    ("p" smartscan-symbol-go-backward "Previous instance")
    ("r" my/symbol-replace "Replace all occurances")
    ("s" ahs-display-stat "Stats")))

;; (bind-key* str func) ‚âà (global-set-key (kbd str) func)
(bind-key* "M-n" (my/make-navigation-hydra ahs-forward))
(bind-key* "M-p" (my/make-navigation-hydra ahs-backward))
(bind-key* "M-'" (my/make-navigation-hydra my/symbol-replace))
#+END_SRC

An alternative is the [[https://github.com/mickeynp/smart-scan][smart-scan]] library ---which does the same thing, but does
not provide the highlighting occurances at point.
# The default symbol replacement is [[https://github.com/mickeynp/smart-scan/issues/23][over-zealous]] in that it replaces sub-terms
# occurring as parts of larger words. Let's do something about that.
** Letter-based Navigation                                         :Disabled:
:PROPERTIES:
:CUSTOM_ID: Letter-based-Navigation
:header-args: :tangle no
:END:
At a glance of possible positions, across windows,
and a key to jump there is a feature provided to us by [[https://github.com/winterTTr/ace-jump-mode/wiki/AceJump-FAQ][ace-jump]]
---here is an [[https://www.youtube.com/watch?feature=player_embedded&v=UZkpmegySnc#!][emacs-rocks 2-minute video]].

For example, =C-c SPC m= greys our all windows and places a red
letter at the start of any word that begins with /m/, then I may
press a letter to jump to the associated position in the
associated window. Using ~C-u C-c SPC~ and ~C-u C-u C-c SPC~ let
me jump to any character or to any visible line.

‚û© Super simple use case: Fix your eyes on an occurence of a word, then ~C-c SPC~
  to quickly jump to it so as to edit the sentence in which it occurs.
  - It's like ~C-s~ but more lightweight.

#+begin_src emacs-lisp
(use-package ace-jump-mode

  :config (bind-key* "C-c SPC" 'ace-jump-mode))

;; See ace-jump issues to configure for use of home row keys.
#+end_src

There is a newer and somewhat more powerful package, [[https://github.com/abo-abo/avy][avy]], which accompishes the
same goal.  It uses a tree style to jumipng: Locations are given two letter
combinations, one presses one letter to jump to a group of text, then another
letter to jump somewhere in that grouping. I prefer ace-jump since it greys
everthing out, whereas avy surrounds jump locations with a box.
Here is an [[https://www.youtube.com/watch?v=zar4GsOBU0g][emacs-doom 6-minute video]] for avy.

There is also [[https://github.com/tam17aki/ace-isearch][ace-isearch]] for bridinging different navgiational methods ---one
begins incremental search, ~s-f~, then according to a pause and length of input,
one of the navgiational methods, such as isearch or avy or helm-swoop, will be
begun.  I'm okay with using ~C-s~ for helm-swoop and ~C-c SPC~ for ace-jump, and
still have ~s-f~ for incremental search, which I hardly use.

*What is bind-keys**?

Major modes provide specfic use and so their bindings always take precedence
over global bindings ---e.g., the major mode binding may do what the global does
but with extra mode-specfic behaviour, such as indentation. Other times, a major
mode's binding simply uses the same key presses with completely unrelated
behaviour.  If we want to avoid having our global keybindings shadowed by a
major mode, we may use the ~bind-key*~ /macro/ of ~use-package~, or the ~bind-keys*~
/macro/ when there are multiple keys; these are macros, not clauses.  ---These
essentially creates a dedicated minor mode behind the scenes, which saves us the
work of [[https://emacs.stackexchange.com/a/358/10352][doing it ourselves]].

|   | ~(bind-keys* (k‚ÇÅ . f‚ÇÅ) ‚Ä¶ (k‚Çô . f‚Çô))~                           |
| ‚âà | These keybindings override all minor modes that use keys =k·µ¢=. |

Of course we can also use it without the asterisk; e.g.:
#+begin_src emacs-lisp
;; C-x o ‚áí Switch to the other window
;; C-x O ‚áí Switch back to the previous window
(bind-key "C-x O" (lambda () (interactive) (other-window -1)))
#+end_src

** ¬† =C-c e n,p=: Taking a tour of one's edits                     :Disabled:
:PROPERTIES:
:CUSTOM_ID: C-c-e-n-p-Taking-a-tour-of-one's-edits
:header-args: :tangle no
:END:
This package allows us to move around the edit points of a buffer /without/
actually undoing anything. We even obtain a brief description of what happend at
each edit point.  This seems useful for when I get interrupted or lose my train
of thought: Just press [[kbd:C-c e p]] to see what I did recently and where ---the
‚Äúe‚Äù is for ‚Äúe‚Äùdit.

#+BEGIN_SRC emacs-lisp
;; Give me a description of the change made at a particular stop.
(use-package goto-chg

  :custom (glc-default-span 0))

(my/defhydra "C-c e" "Look at them edits!" bus
  :\  ("p" goto-last-change "Goto n·µó ∞ last change")
      ("n" goto-last-change-reverse "Goto more recent change"))
#+END_SRC

Compare this with ~C-x u~, or ~undo-tree-visualise~, wherein undos are actually performed.

Notice, as a hydra, I can use ~C-c e~ followed by any combination of ~p~ and ~n~ to
navigate my recent edits /without/ having to supply the prefix each time.

** visual-regexp
:PROPERTIES:
:CUSTOM_ID: visual-regexp
:END:
#+begin_src emacs-lisp
;; While constructing the regexp in the minibuffer, get live visual feedback for the (group) matches.
;; E.g., try: M-% use-\(.+?\) \(.+\)\b ENTER woah \1 and \2
;;
;; C-u M-%  do to regexp replace, without querying.
(use-package visual-regexp

  :config (define-key global-map (kbd "M-%")
            (lambda (&optional prefix) (interactive "P") (call-interactively (if prefix  #'vr/replace #'vr/query-replace)))))
#+end_src

** LaTeX ‚áê Org-Mode                                                :Disabled:
:PROPERTIES:
:CUSTOM_ID: Org-Mode-PDF-HTML
:header-args: :tangle no
:END:

In this section we consider the Org-mode export for PDFs (LaTeX).
For example, we account for LaTeX citations.

# Installing LaTex
# $ brew install --cask mactex
# $ eval "$(/usr/libexec/path_helper)"
# $ type pdflatex  # => pdflatex is /Library/TeX/texbin/pdflatex
#
# The ~minted~ environment can't appear as an argument to another command; a
# [[https://tex.stackexchange.com/questions/102416/error-when-compiling-a-minted-listings-inside-a-memoir-subfloat][work-around]] is to use a ‚Äòbox‚Äô.  Learn more about LaTeX boxes [[https://latexref.xyz/Boxes.html][here]].


*** Get LaTeX:
:PROPERTIES:
:CUSTOM_ID: Get-LaTeX
:END:

# +begin_src shell
# time brew cask install mactex-no-gui
# +end_src

#+begin_src emacs-lisp
(system-packages-ensure "mactex")
#+end_src

   - This is a redistribution of TeX Live specifically for macOS.
   - We get the 4GB version since it has [[https://tex.stackexchange.com/a/1041/69371][everything]] and so
     do not need to worry about missing style files.
   - This took about 12 minutes on my machine.

   Restart Emacs, enter =$e^{i \cdot \pi} + 1 = 0$= then press kbd:C-c_C-x_C-l to
   have it rendered inline.

   + *Minted:* Get tool for colourful code snippets for LaTeX ---see ‚Äúminted‚Äù in
     the main article.

     #+begin_src emacs-lisp
(system-packages-ensure "pygments")
#+end_src

   + *Not anymore:* Get a neato PDF presentation console: =brew install pdfpc=
     - With =pdfpc myfile.pdf= you get a nice timer and multiple views
       of the current slide and upcoming slides ---with support for multiple monitors.
     - Install ScreenBrush, from the Apple Store, for easily drawing/annotating my
       screen ---e.g., when I'm giving a virtual lecture to my students.
     - An alternative is =brew install mupdf= then =mupdf-gl myfile.pdf= and press
       =f= for fullscreen then =a= for adding/adorning drawings ---it was too
       rough to use live.

     Finally, within Emacs: =M-x pdf-tools-install=

:Possibly_breaking_toc-org:
#+BEGIN_SRC emacs-lisp :tangle no
;; Use 3 headlines of export, which is the default
;; (setq org-export-headline-levels 4)

;; no numbers by default at export
;; (setq org-export-with-section-numbers nil)
#+END_SRC
:End:
*** Working with Citations                                :Disabled:Not_Used:
:PROPERTIES:
:CUSTOM_ID: Working-with-Citations
:END:

# TODO Fix me, breaking Github Actions test setup

 [[https://github.com/jkitchin/org-ref][An exquisite system]] for handling references.

 The following entity will display useful data
 when the mouse hovers over it (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà If you click on it, then you're
 in for a lot of super neat stuff, such as searching for the pdf online!

cite:agda_overview ( In HTML export, the citation doesn't link anywhere. )

    #+BEGIN_SRC emacs-lisp :tangle no
(unless noninteractive

(use-package org-ref
  :custom ;; Files to look at when no ‚Äú‚ï≤bibliography{‚ãØ}‚Äù is not present in a file.
          ;; Most useful for non-LaTeX files.
        (reftex-default-bibliography '("~/thesis-proposal/papers/References.bib"))
        (bibtex-completion-bibliography (car reftex-default-bibliography))
        (org-ref-default-bibliography reftex-default-bibliography))

;; Quick BibTeX references, sometimes.
(use-package helm-bibtex)
(use-package biblio) )
#+END_SRC

  Execute ~M-x helm-bibtex~ or =C-c ]= and, say, enter =emacs= and you will be
  presented with all the entries in the bib database that mention ‚Äòemacs‚Äô. Super
  cool stuff. Moreover, if no such entries exist, then we can look some up
  using the interface!

  Read the manual [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][online]] or better yet as an org-file with ~M-x org-ref-help~.

  This is an Org-mode application since the citations have tooltips and export
  nicely to LaTeX & HTML via the Org-mode exporter.

*** Bibliography & Coloured LaTeX using Minted
:PROPERTIES:
:CUSTOM_ID: Bibliography-Coloured-LaTeX-using-Minted
:END:

Execute the following for bibliography references as well as minted Org-mode
uses the Minted package for source code highlighting in PDF/LaTeX ---which in
turn requires the pygmentize system tool.
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -output-directory %o %f"
        "biber %b"
        "pdflatex -shell-escape -output-directory %o %f"
        "pdflatex -shell-escape -output-directory %o %f"))
#+END_SRC

For faster pdf generation, possibly with errors, consider invoking:
#+begin_example emacs-lisp
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_example

By default, Org exports LaTeX using the ~nonstopmode~ option, which tries
its best to produce a PDF ---which ignores typesetting errors altogether,
which is not necessary ideal when using LaTeX.

*** COMMENT Excellent PDF Viewer
:PROPERTIES:
:CUSTOM_ID: Excellent-PDF-Viewer
:END:


Need to (re)build the epdfinfo program, do it now ? (y or n) n

--------------------------------------------------------------------------------

Let's install the [[https://github.com/politza/pdf-tools][pdf-tools]] library for viewing PDFs in Emacs.
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  ; :init   (system-packages-ensure "pdf-tools")
  :custom (pdf-tools-handle-upgrades nil)
          (pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  :config (pdf-tools-install))

;; Now PDFs opened in Emacs are in pdfview-mode.
#+END_SRC

Besides the expected PDF viewing utilities, such as search, annotation, and continuous scrolling;
with a simple mouse right-click, we can even select a ‚Äòmidnight‚Äô rendering mode which may be
easier on the eyes. For more, see the brief [[https://www.dailymotion.com/video/x2bc1is][pdf-tools-tourdeforce]] demo.
** HTML ‚áê Org-mode
:PROPERTIES:
:CUSTOM_ID: HTML-Org-mode
:END:

In this section we consider the Org-mode exporters for PDFs and
HTMLs. For example, we account for LaTeX citations and reliable HTML
anchors.

#+BEGIN_SRC emacs-lisp
(use-package htmlize )
;; Main use: Org produced htmls are coloured.
;; Can be used to export a file into a coloured html.
#+END_SRC

*** HTML ‚ÄúFolded Drawers‚Äù                  :Move_to_org_special_block_extras:
:PROPERTIES:
:CUSTOM_ID: HTML-Folded-Drawers
:END:

#+BEGIN_SRC emacs-lisp
(defun my/org-drawer-format (name contents)
  "Export to HTML the drawers named with prefix ‚Äòfold_‚Äô, ignoring case.

The resulting drawer is a ‚Äòcode-details‚Äô and so appears folded;
the user clicks it to see the information therein.
Henceforth, these are called ‚Äòfold drawers‚Äô.

Drawers without such a prefix may be nonetheless exported if their
body contains ‚Äò:export: t‚Äô ---this switch does not appear in the output.
Thus, we are biased to generally not exporting non-fold drawers.

One may suspend export of fold drawers by having ‚Äò:export: nil‚Äô
in their body definition.

Fold drawers naturally come with a title.
Either it is specfied in the drawer body by ‚Äò:title: ‚ãØ‚Äô,
or otherwise the drawer's name is used with all underscores replaced
by spaces.
"
  (let* ((contents‚Ä≤ (replace-regexp-in-string ":export:.*\n?" "" contents))
         (fold? (s-prefix? "fold_" name 'ignore-case))
         (export? (string-match ":export:\s+t" contents))
         (not-export? (string-match ":export:\s+nil" contents))
         (title‚Ä≤ (and (string-match ":title:\\(.*\\)\n" contents)
                      (match-string 1 contents))))

    ;; Ensure we have a title.
    (unless title‚Ä≤ (setq title‚Ä≤ (s-join " " (cdr (s-split "_" name)))))

    ;; Output
    (cond
     ((and export? (not fold?)) contents‚Ä≤)
     (not-export? nil)
     (fold?
      (thread-last contents‚Ä≤
        (replace-regexp-in-string ":title:.*\n" "")
        (format "<details class=\"code-details\"> <summary> <strong>
            <font face=\"Courier\" size=\"3\" color=\"green\"> %s
            </font> </strong> </summary> %s </details>" title‚Ä≤))))))

(setq org-html-format-drawer-function 'my/org-drawer-format)

#+END_SRC

With the following invocations we only see the odd indexed ‚Äòhello‚Äôs, where the
latter two are folded up.
#+BEGIN_SRC org :tangle no
:this-drawer-is-exported:
:export: t
hello 1
:End:

:this-drawer-is-NOT-exported:
hello 2
:End:

:fold_This_drawer_has_a_title_in_the_body:
:title: I am the drawer title 0

hello 3
:End:

:fold_This_drawer_is_NOT_exported:
:title: Why are we here?
:export: nil

hello 4
:End:

:fold_I_am_the_drawer_title_1:

hello 5
:End:
#+END_SRC

I doubt I could show an example in the Github README, since no HTML export is
happening using my setup. In case you're reading this on my blog, which has
exported HTML. Here's the example:
:fold_hello_world:
:title: ¬°Hola! Buenas tardes, Amigo
Hey bud, hope you're enjoying this read ^_^
:End:

Now that I've written this, I'm thinking it may have been preferably to use an org-block‚Ä¶?

*** Diagrams with Mermaid ---Not Reccommended                      :Disabled:
:PROPERTIES:
:CUSTOM_ID: Diagrams-with-Mermaid-Not-Reccommended
:header-args: :tangle no
:END:

Let's try out an alternative to PlantUML ---covered below in ¬ß[[Workflow States]].

First, let's get the tool.
#+BEGIN_SRC shell :tangle no
npm install mermaid.cli
sudo git clone git@github.com:arnm/mermaid-layer.git ~/.emacs.d/private/mermaid
#+END_SRC

Then, let's get the associated ~mermaid~ package.
#+BEGIN_SRC emacs-lisp
(use-package ob-mermaid
  :custom ob-mermaid-cli-path "~/node_modules/.bin/mmdc")
#+END_SRC

Then, =C-c C-c= on the following:
#+BEGIN_SRC mermaid :file test.png :theme neutral :background-color green  :tangle no :results replace :eval never
sequenceDiagram
A-->B: Works!
#+END_SRC

#+RESULTS:
[[file:test.png]]

+ =C-c C-x C-v= ‚áí Show images inline
+ Mermaid supported headers:
  - ~file~ to name the svg/png/pdf output
  - ~width~ or ~height~ or the resulting image
  - ~theme~ used, such as ~default, forest, dark, neutral~, for foreground entities
  - ~background-color~ such as ~transparent, red, #F0F0F0~
    * The transparent option is nice ^_^
+ You can insert new lines using ~<br>~ and horizontal rules via ~<hr>~.
  Similarly you can use other HTML tags such as ~<center>~; if you have too many
  you can make  CSS file then use the header argument ~:css-file~.
+ Add ‚Äúnon-breaking space‚Äù with ~&nbsp;~. This is a forced extra space and it prevents
  a line break at its location. You can insert it repeatedly, but for two spaces
  use ~&ensp;~ and for four spaces use ~&emsp;~.

If link text cuts off prematurely, use extra space /with/ a newline: ~A-- text
&ensp;<br> -->B~.

*Warning*: JavaScript has some issues when working with Unicode and so, being a
JavaScript utility, ~mermaid~ hangs when Unicode is used. On the upside, being a
JavaScript utility, ~mermaid~ entities can have [[https://mermaid-js.github.io/mermaid/#/flowchart?id=interaction][arbitrary code attached]] to them to
be executed upon clicks ---for use in browsers.
- However, the Greek letters are supported; e.g., Œ≥ and Œ£.

See [[https://mermaid-js.github.io/mermaid/#/flowchart?id=nodes-amp-shapes][here]] for possible node shapes.

#+begin_quote
After forming an intricate diagram of related design patterns, I had to use a
number of HTML notions, such as =<i>, <strong>, <em>, <h1>, &ensp;, <br>, <pre>,
<center>= and it was a bit more than I would have liked. In particular, the only
way to change font size was to use the deprecated HTML tag =<big>= or heading tags
like =<h1>=; even worse, the resulting PDF image did not look nice ---I had to
stretch it out.

The command line tool is *lacking functionality* and so the docs are not helpful.
E.g., I cannot produce pie charts using the command line tool.
#+end_quote

*** ¬† [[https://revealjs.com/?transition=zoom#/][Reveal.JS]] -- The HTML Presentation Framework
:PROPERTIES:
:CUSTOM_ID: https-revealjs-com-transition-zoom-Reveal-JS-The-HTML-Presentation-Framework
:END:

Org-mode documents can be transformed into beautiful slide decks
with [[https://github.com/yjwen/org-reveal/blob/master/Readme.org][org-reveal]] with the following two simple lines.

#+BEGIN_SRC emacs-lisp
(use-package ox-reveal

  :custom (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
#+END_SRC
# MA: ??? It looks like ox-reveal is being abandoned in favor of org-re-reveal,
# a fork compatible with org-mode 9.2?

For example, execute, ~C-x C-e~ after the closing parenthesis of, the
following block to see an example slide-deck (‚îÄ‚Äø‚Äø‚îÄ)
#+BEGIN_SRC emacs-lisp :tangle no
(progn (shell-command "curl https://raw.githubusercontent.com/yjwen/org-reveal/696613edef0fe17a9c53146f79933fe7c4101100/Readme.org >> Trying_out_reveal.org")
       (switch-to-buffer (find-file "Trying_out_reveal.org"))
       (org-reveal-export-to-html-and-browse))
#+END_SRC

Org-mode exporting, ~C-c C-e~, now includes an option ~R~ for such reveal slide decks.

:Hide:
[[https://alhassy.github.io/next-700-module-systems/proposal/defence-slides.html#/sec-title-slide][Here]] ([[https://raw.githubusercontent.com/alhassy/next-700-module-systems/master/proposal/defence-slides.org][source]]) is an example of org-reveal slides where I add a number to each page,
use multiple columns, and extend the margins perhaps a bit too much.
:End:

Two dimensional slides may be a bit new to some people, so I like to
give viewers an option, in tiny font, to view the slide-deck
continuously and remind them that ~?~ provides useful shortcuts.
#+BEGIN_SRC emacs-lisp
(setq org-reveal-title-slide "<h1>%t</h1> <h3>%a</h3>
<font size=\"1\">
<a href=\"?print-pdf&showNotes=true\">
‚ü™ Flattened View ; Press <code>?</code> for Help ‚ü´
</a>
</font>")
#+END_SRC
One should remove the ~&showNotes=true~ if they do not want to include
speaker notes in the flattened view.

Within the flatenned view, one may wish to ~CTRL/CMD+P~ then save the
resulting PDF locally.

** C-c C-l Org-mode ‚áê HTML
:PROPERTIES:
:CUSTOM_ID: Org-mode-HTML
:END:

The following let's us copy htlm into org format using eww, Emacs' built-in web browser.
#+BEGIN_SRC emacs-lisp :tangle no
;; See: https://emacs.stackexchange.com/questions/7171/paste-html-into-org-mode
(use-package org-eww

 :quelpa (org-eww :fetcher git :url "https://github.com/Fuco1/org-mode.git"))
#+END_SRC

It does not work as I'd like, but may prove useful to have around.

+ Possibly useful: Open a webpage with ~M-x eww~ then toggle ~M-x read-only-mode~ to
  edit the text, say for notes or deletions, as you read! No need to copy-paste.

--------------------------------------------------------------------------------

[[https://github.com/alphapapa/org-web-tools][org-web-tools]] claims to /view, capture, and archive Web pages in Org-mode/; this
may be a very useful tool.

#+begin_src emacs-lisp
(use-package org-web-tools

  :config
  ;; Insert an Org-mode link to the URL in the clipboard or kill-ring. Downloads
  ;; the page to get the HTML title.
  ;; (bind-key* "C-c C-l" #'org-web-tools-insert-link-for-url) ;; Instead, see my/org-insert-link-dwim below.
  )
#+end_src
Other useful functions, needing pandoc:
+ ~org-web-tools-insert-web-page-as-entry~ and
+ ~org-web-tools-convert-links-to-page-entries~.

#+begin_src emacs-lisp
;; C-u C-c C-l ‚áí Paste URL with title, WITHOUT prompting me for anything.
;; C-c C-l ‚áí Prompt me for title.
(bind-key* "C-c C-l"
           (lambda () (interactive)
             (call-interactively
              (if current-prefix-arg
                  #'org-web-tools-insert-link-for-url
                #'my/org-insert-link-dwim))))
;; From:
(defun my/org-insert-link-dwim ()
  "Like `org-insert-link' but with personal dwim preferences.

- When text is selected, use that as the link description --and prompt for link type
- When a URL is in the clipboard, use that as the link type
- On an existing Org link, prompt to alter the link then to alter the description
- With a ‚ÄòC-u‚Äô prefix, prompts for a file to link to.
  - It is relative to the current directory; use ‚ÄòC-u C-u‚Äô to get an absolute path.

It fallsback to `org-insert-link' when possible.

Functin Source: https://xenodium.com/emacs-dwim-do-what-i-mean/"
  (interactive)
  (let* ((point-in-link (org-in-regexp org-link-any-re 1))
         (clipboard-url (when (string-match-p "^http" (current-kill 0))
                          (current-kill 0)))
         (region-content (when (region-active-p)
                           (buffer-substring-no-properties (region-beginning)
                                                           (region-end)))))
    (cond ((and region-content clipboard-url (not point-in-link))
           (delete-region (region-beginning) (region-end))
           (insert (org-make-link-string clipboard-url region-content)))
          ((and clipboard-url (not point-in-link))
           (insert (org-make-link-string
                    clipboard-url
                    (read-string "title: "
                                 (with-current-buffer (url-retrieve-synchronously clipboard-url)
                                   (dom-text (car
                                              (dom-by-tag (libxml-parse-html-region
                                                           (point-min)
                                                           (point-max))
                                                          'title))))))))
          (t
           (call-interactively 'org-insert-link)))))
#+end_src

** COMMENT [[https://github.com/sshaw/copy-as-format][copy-as-format:]] Emacs function to copy buffer locations as GitHub/Slack/JIRA etc... formatted code.
:PROPERTIES:
:CUSTOM_ID: https-github-com-sshaw-copy-as-format-copy-as-format-Emacs-function-to-copy-buffer-locations-as-GitHub-Slack-JIRA-etc-formatted-code
:END:
#+begin_src emacs-lisp
;; Usage: [C-u] M-x copy-as-format ‚áí Copies selected region, or current line.
;; Also use: copy-as-format-ùíÆ, to format to a particular ùíÆtyle.
;; Without suffix ùíÆ, format defaults to `copy-as-format-default`.
;; With a prefix argument prompt for the format style ùíÆ.
;; Easy to add more formats.
(use-package copy-as-format   :defer nil)
#+end_src

* Browsing

** Let's jump to a current Chrome browser tab, or one from our Chrome history, from within Emacs.
:PROPERTIES:
:CUSTOM_ID: Let's-jump-to-a-current-Chrome-browser-tab-or-one-from-our-Chrome-history-from-within-Emacs
:END:
- [[https://github.com/xuchunyang/helm-chrome-history][Browse your Chrome history with Helm.]]
- [[https://github.com/xuchunyang/helm-chrome-control][M-x helm-chrome-control displays chrome tabs and let you control them by pressing C-z: e.g., you can focus tab, close tab, copy the title & URL of the tab, etc.]]
#+begin_src emacs-lisp
;; M-x helm-chrome-history: Open a webpage from my history
;; [Your Chrome History SQLite database file: helm-chrome-history-file]
(use-package helm-chrome-history)

;; M-x helm-chrome-control: Jump to an open tab in Chrome
(use-package helm-chrome-control)
#+end_src

* TODO COMMENT [2/22] Lost Souls
:PROPERTIES:
:CUSTOM_ID: Lost-Souls
:END:
** TODO Work Programming                                          :Disabled:
:PROPERTIES:
:CUSTOM_ID: Programming
:END:

| Disabled: At work I program in Java, and IntelliJ is better than Emacs out-of-the-box. |

Herein we configure utilites for version control, function and variable lookup,
and template expansion for inescapably repetitive scenarios.

# TODO: Fix these docs
#  TODO: + Checkout branches/PRs with doc : my/gh-checkout
#  + See all company related PRs with doc : w-PRs
# + Quickly look up language/library docs /within/ Emacs with kbd:C-c_d.

#+begin_src emacs-lisp
(when my/work-machine?
  (setq doom-modeline-buffer-file-name-style 'truncate-except-project))
#+end_src

*** devdocs
:PROPERTIES:
:CUSTOM_ID: devdocs
:END:
#+begin_src emacs-lisp
;; 1. Get docs of a languages: M-x devdocs-install
;; 2. Lookup docs: [C-u] M-x devdocs-lookup
;; ùüö. Lookup docs: [C-u] C-c d
(use-package devdocs
  :defer nil
  :bind ("C-c d" . #'devdocs-lookup)
  :config
  (when nil ;; ‚ÄúC-x C-e‚Äù the following once.
    (cl-loop for lang in '(javascript ramda typescript html css sass
                       vue~3 vuex~4 vue_router~4 "angularjs~1.6"
                       nginx webpack~5 web_extensions
                       ;;
                       eslint  jest jq jsdoc prettier
                       mocha chai jasmine
                       ;;
                       bash docker~19 git homebrew elisp
                       ;;
                       postgresql~14 redis sqlite
                       ;;
                       rust ruby~3 minitest "rails~7.0")
          do (devdocs-install (list (cons 'slug (format "%s" lang)))))))
#+end_src

*** Managing Processes/Servers from within Emacs ---Work-specific functions
:PROPERTIES:
:CUSTOM_ID: Managing-Processes-Servers-from-within-Emacs-Work-specific-functions
:END:

Let's make a few interactive Emacs Lisp functions to reduce the amount of time I
need to be in a terminal. I'll use the /prefix ~‚Äúw-‚Äù~ for work stuff/. Example
tasks:
+ Start/stop my servers
+ Interactively select an app to be opened in the browser
+ Do database migrations/rollbacks

‚ü® Obfuscated with lorem ipsum text. ‚ü©
[[file:images/services-dashboard.png]]

--------------------------------------------------------------------------------

Not using this, a bit too verbose to setup for each service but, more
accurately, does not Just Work·µÄ·¥π for my needs.
#+begin_src emacs-lisp
;; ‚ÄúM-x prodigy‚Äù, then press ‚Äús‚Äù to start a service; ‚ÄúS‚Äù to stop it; ‚Äú$‚Äù to see it; ‚Äúr‚Äùestart
(use-package prodigy :disabled t)
  ;; C-h v prodigy-services ‚áí See possible properties.
#+end_src

**** my/defaliases
:PROPERTIES:
:CUSTOM_ID: my-defaliases
:END:
#+begin_src emacs-lisp
(defalias 'defaliases 'my/defaliases)
(defmacro my/defaliases (src &rest tgts)
  "Provide names TGTS as synonymous aliases for SRC, for discovarability.

Often a function SRC can be construed from different perspectives, names, purposes TGTS.
Another example is when I define things with the ‚Äòmy/‚Äô prefix, but also want to use them without.

Example use: (my/defaliases view-hello-file greet-others learn-about-the-world)

In particular:  (my/defaliases OLD NEW) ‚âà (defalias 'NEW 'OLD)."
  `(--map (eval (quote (defalias `,it (quote ,src)))) (quote ,tgts)))
#+end_src

**** Making unkillable buffers & shells
:PROPERTIES:
:CUSTOM_ID: Making-unkillable-buffers-shells
:END:
#+begin_details "Making unkillable buffers & shells"
#+begin_src emacs-lisp
(defun my/declare-unkillable-buffer (name)
  (add-hook 'kill-buffer-query-functions
            `(lambda () (or (not (equal (buffer-name) ,name))
                       (progn (message "Not allowed to kill %s, burying instead; otherwise use ‚ÄúM-x force-kill‚Äù" (buffer-name))
                              (bury-buffer))))))

(my/defaliases my/force-kill force-kill w-force-kill)
(cl-defun my/force-kill (&optional buffer-name)
  (interactive)
  (-let [kill-buffer-query-functions nil]
    (if buffer-name
        (kill-buffer buffer-name)
      (kill-current-buffer))
    (ignore-errors (delete-window))))

(cl-defun my/run-unkillable-shell (command &optional (buffer-name command))
  "Example use: (my/run-unkillable-shell \"cd ~/my-noejds-project; npm run dev\" \"my-nodejs-project\")"
  (-let [it (get-buffer buffer-name)]
    (if it
        (switch-to-buffer-other-window it)
      (async-shell-command command buffer-name)
      (my/declare-unkillable-buffer buffer-name))))
#+end_src
#+end_details

**** w-start/stop-services
:PROPERTIES:
:CUSTOM_ID: w-start-stop-services
:END:
#+begin_src emacs-lisp
(defvar my/services nil "List of all services defined; used with `w-start-services' and `w-stop-services'.")

(defun w-start-services ()
  (interactive)
  (cl-loop for ùë∫ in my/services
           do (funcall (intern (format "w-start-%s" ùë∫)))))

(defun w-stop-services ()
  (interactive)
  (cl-loop for ùë∫ in my/services
           do (funcall (intern (format "w-stop-%s" ùë∫)))))
#+end_src

**** w-status-of-services
:PROPERTIES:
:CUSTOM_ID: w-status-of-services
:END:

#+begin_src emacs-lisp
;; It takes about ~3 seconds to build the Status of Services page, so let's jump to it if it's already built, and the user/me can request a refresh, if need be.
(global-set-key (kbd "M-S-SPC")
  (lambda () (interactive)
    (-let [buf (get-buffer "Status of Services")] (if buf (switch-to-buffer buf) (w-status-of-services)))))
;;
;; Since M-S-SPC brings up the transient menu, and most commands close the status buffer or are transient, we get the perception that the transient menu is "sticky"; i.e., stuck to the buffer, even though this is not true. I do not yet know how to make a transient menu stuck to a buffer.
;;
#+end_src

#+begin_src emacs-lisp
(defun w-status-of-services ()
  "Show me status of all servers, including their current git branch, and most recent emitted output."
  (interactive)
  (defvar w-status-of-services/branch-name-width 12
    "What is the length of the longest branch name? Let's use that to ensure there's enough whitespace.")
  (-->
   (-let [ shells (--filter (s-starts-with? "Shell" (process-name it)) (process-list)) ]
     (cl-loop for ùë∫ in (mapcar #'pp-to-string my/services)
              for associated-shell = (--find (s-contains? (format "%s" ùë∫) (cl-third (process-command it))) shells)
              for status = (or (ignore-errors (process-status associated-shell)) 'üí•)
              for branch = (-let [default-directory (format "~/%s" ùë∫)]
                             (magit-get-current-branch))
              for _ = (setq w-status-of-services/branch-name-width (max (length branch) w-status-of-services/branch-name-width))
              for ùë∫-buffer = (--find (s-starts-with? (format "*Server:%s" ùë∫) it) (mapcar 'buffer-name (buffer-list)))
              for saying = (let (most-recent-shell-output (here (current-buffer)))
                             (if (not ùë∫-buffer)
                                 " ‚îÄServer not started‚îÄ "
                               (switch-to-buffer ùë∫-buffer)
                               (end-of-buffer)
                               (beginning-of-line)
                               (setq most-recent-shell-output (or (thing-at-point 'line t) ""))
                               (switch-to-buffer here)
                               ;; FIXME:here
                               (--> (s-truncate 135 (s-trim most-recent-shell-output))
                                  (if (s-contains? "|" it)
                                      (cl-second (s-split "|" it))
                                    it)
                                  (s-trim it)
                                  (if (<= (length it) 3) (s-repeat 70 " ") it))))
              for _ = (if (or (s-contains? "Error" saying) (not ùë∫-buffer)) (setq status  'üí•))
              for keymap = (copy-keymap org-mouse-map)
              do (cl-loop for (key action)
                          on `( ;; Checkout branch/PR
                               c (w-pr-checkout (format "~/%s" ,ùë∫))
                               ;; Restart service, remaining on current branch [not switching to ‚Äúmain‚Äù!]
                               r (-let [current-prefix-arg t]
                                   (funcall (intern (format "w-stop-%s" ,ùë∫)))
                                   (funcall (intern (format "w-start-%s" ,ùë∫))))
                               f (-let [default-directory  (format "~/%s" ,ùë∫)]
                                   (call-interactively #' projectile-find-file))
                               t (vterm-shell-command (format "clear; cd ~/%s; git status" ,ùë∫) (format "vterm/%s" ,ùë∫))
                               ;; See the repo in the web
                               w (--> (format "%s" ,ùë∫)
                                    (if (s-contains? "/" it) (f-parent it) it)
                                    (format "https://github.com/%s/%s" work/gh-user it)
                                    (browse-url it))
                               ;; Visit service shell
                               <return>
                               (when ,ùë∫-buffer
                                 (delete-other-windows)
                                 (split-window-below)
                                 (switch-to-buffer ,ùë∫-buffer)
                                 (end-of-buffer)
                                 (other-window 1))
                               ;; See service magit buffer
                               <tab> (progn (magit-status (format "~/%s" ,ùë∫)) (delete-other-windows)))
                          by #'cddr
                          do (define-key keymap (kbd (format "%s" key))
                                         `(lambda () (interactive) ,action)))
              collect
              ;; ‚Äú%ùëæs‚Äù ‚áí Print a string with at least width ùëæ: If length(str) ‚â§ ùëæ, then pad with spaces on the left side.
              ;; Use ‚Äú%-ùëæs‚Äù to instead pad with spaces to the right.
              (list keymap (format (format "%%s %%-20s %%-%ss %%s" (+ 5 w-status-of-services/branch-name-width)) status ùë∫ branch saying))))

   ;; Setup buffer
   (-let [buf "Status of Services"]
     (ignore-errors (kill-buffer buf))
     (switch-to-buffer buf)
     (delete-other-windows)
     it)
   ;; Insert out buttons
   (--each it
     ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlay-Properties.html
     (-let [help (s-join "\n"
                         '("Keybindings:"
                           "[C-u] c   ‚à∑  Checkout PR [or branch]   \t\t\t b  ‚à∑  Browse an app"
                           "tab       ‚à∑  See service magit buffer  \t\t\t i  ‚à∑  Inject users"
                           "return    ‚à∑  Visit service shell       \t\t\t s  ‚à∑  SQL buffer"
                           "r         ‚à∑  Restart service           \t\t\t w  ‚à∑  See the repo in the web"
                           "f         ‚à∑  Find file in project      \t\t\t t  ‚à∑ Terminal"
                           "g         ‚à∑  Refresh this view         \t\t\t q  ‚à∑  Quit, and kill, this buffer"))]
       (insert-text-button (s-replace "\"" "‚Ä≥" (s-replace "run" "‚úÖ" (nth 1 it)))
                           'face nil
                           ;; 'mouse-face '(:box t) ;; I use the cursor more than the mouse, so don't want two distinct views.
                           'keymap (nth 0 it)
                           ;; NOTE: The functions are called only when the minor mode cursor-sensor-mode is turned on.
                           ;; When cursor enters the button, we temporarily make it a box and show shortcuts in message area.
                           'cursor-sensor-functions `((lambda (_ old-pos entered?)
                                                        (message ,help)
                                                        (setq entered? (equal entered? 'entered))
                                                        (-let [self (button-at (if entered? (point) old-pos))]
                                                          (read-only-mode 0) ;; Temporarily disable help-mode's read-only-mode setup.
                                                          (if entered?
                                                              (button-put self 'face '(:box "yellow" :weight bold))
                                                            (button-put self 'face nil)))))
                           'help-echo help)
       (insert "\n")))
   ;; Do some highlighting, as a cautionary measure.
   (highlight-regexp ".*crashed.*" 'hi-red-b)
   ;; Forbid editing
   (help-mode) ;; This wont do the button face changes I like when cursor moves; so I disable read-only-mode temporarily when making the changes.
   (cursor-sensor-mode)
   (stripe-buffer-mode)
   (visual-line-mode -1)
   (toggle-truncate-lines)
   ;; Add some specific work related bindings
   (local-set-key "b" #'w-browse-app)
   (local-set-key "i" #'w-inject-users)
   (local-set-key "s" (lambda () (interactive) (w-sql) (delete-other-windows)))
   ;; Add general view keys
   (local-set-key "g" (lambda () "Refresh this view" (interactive) (ignore-errors (kill-buffer-and-window)) (w-status-of-services)))
   (local-set-key "q" (lambda ()  "Quit buffer" (interactive) (ignore-errors (kill-buffer-and-window))))
   ;; Go to the first entry, so my ‚Äúhomemade echo menu‚Äù appears.
   (beginning-of-buffer)))
#+end_src

***** COMMENT Old definition with colourful menu                    :ignore:
:PROPERTIES:
:CUSTOM_ID: COMMENT-Old-definition-with-colourful-menu
:END:

#+begin_src emacs-lisp
(defun w-status-of-services ()
  "Show me status of all servers, including their current git branch, and most recent emitted output."
  (interactive)
  (thread-last
      (-let [ shells (--filter (s-starts-with? "Shell" (process-name it)) (process-list)) ]
        (cl-loop for ùë∫ in (mapcar #'pp-to-string my/services)
              for associated-shell = (--find (s-contains? (format "%s" ùë∫) (cl-third (process-command it))) shells)
              for status = (or (ignore-errors (process-status associated-shell)) 'üí•)
              for branch = (-let [default-directory (format "~/%s" ùë∫)]
                             (magit-get-current-branch))
              for saying = (let (most-recent-shell-output (here (current-buffer)))
                             (switch-to-buffer (--find (s-starts-with-p ùë∫ (buffer-name it)) (buffer-list)))
                             (end-of-buffer)
                             (beginning-of-line)
                             (setq most-recent-shell-output (or (thing-at-point 'line t) ""))
                             (switch-to-buffer here)
                             (s-truncate 135 (s-trim most-recent-shell-output)))
              collect
              ;; ‚Äú%ùëæs‚Äù ‚áí Print a string with at least width ùëæ: If length(str) ‚â§ ùëæ, then pad with spaces on the left side.
              ;; Use ‚Äú%-ùëæs‚Äù to instead pad with spaces to the right.
              (format "%s %-20s %-12s %s" status ùë∫ branch
                      (-let [it (s-trim (if (s-contains? "|" saying)
                                            (cl-second (s-split "|" saying))
                                          saying))]
                        (if (<= (length it) 3) "-" it)))))
    (--map (format "%s" it))
    (s-join "\n")
    (s-replace "run" "‚úÖ")
    (funcall (lambda (it) (-let [max-mini-window-height 0]
                       (ignore-errors (kill-buffer  "Status of Services"))
                       (display-message-or-buffer it "Status of Services")
                       (delete-other-windows)
                       (switch-to-buffer "Status of Services")
                       (highlight-regexp ".*crashed.*" 'hi-red-b)
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;; Start describing the keys
                       (end-of-buffer)
                       (insert "\n \n \n \n \n")
                       (let ((register-action (lambda (key-desc-actions)
                                                (if (stringp key-desc-actions)
                                                    (propertize key-desc-actions 'font-lock-face '(face success))
                                                  (-let [ [key desc &rest actions] key-desc-actions ]
                                                    ;; For buffer-local keys, you cannot use local-set-key, unless you want to modify the keymap of the entire major-mode in question: local-set-key is local to a major-mode, not to a buffer.
                                                    ;; (use-local-map (copy-keymap text-mode-map))
                                                    (local-set-key key `(lambda () (interactive) ,@(seq-into actions 'list)))
                                                    (format "%s %s"
                                                            (propertize (format "%s" key) 'font-lock-face '(face error))
                                                            (propertize desc 'font-lock-face '(:foreground "grey")))))))
                             (repo-at-point (lambda () (-as-> (beginning-of-line) repo
                                                         (thing-at-point 'line t)
                                                         (s-split " " repo)
                                                         cl-second))))
                         (insert (s-join "\n"  (seq-mapn (lambda (&rest cols) (apply #'format (s-repeat (length cols) "%-40s ")
                                                                                (--map (funcall register-action it) cols)))
                           ["This view"
                            ["g" "Refresh this view" (ignore-errors (kill-buffer-and-window)) (w-status-of-services)]
                            ["q" "Quit buffer" (ignore-errors (kill-buffer-and-window))]
                            ["" "" ""]]
                           `["Current service"
                             ["c" "Checkout PR" (w-pr-checkout (format "~/%s"  (funcall ,repo-at-point)))]
                             [[return] "Visit service shell"
                             (delete-other-windows)
                             (split-window-below)
                             (switch-to-buffer (--find (s-starts-with? (funcall ,repo-at-point) (buffer-name it)) (buffer-list)))
                             (end-of-buffer)
                             (other-window 1)]
                            [[tab] "See service magit buffer"
                             (magit-status (format "~/%s"  (funcall ,repo-at-point)))
                             (delete-other-windows)]]
                           ["Misc"
                            ["b" "Browse an app" (w-browse-app)]
                            ["i" "Inject users"  (w-inject-users)]
                            ["s" "SQL buffer" (w-sql) (delete-other-windows)]]))))
                       (beginning-of-buffer)
                       ;; (help-mode) ;; For some reason, default fundamental-mode does not regoznise proprtised strings.
                       ;; Also, this is read-only be default and emits a nice message for undefiend single key bindings.
                       ;; (help-mode)
                       )))))
#+end_src

**** my/defservice
:PROPERTIES:
:CUSTOM_ID: my-defservice
:END:
#+begin_src emacs-lisp
;; Even though I'm doing frequent prunes, it helps to give docker some leeway.
;; NOTE: Docker Icon ‚Üí Preferences ‚Üí Resources ‚Üí  4 CPUs; 8gb Memory; 2gb Swap; 120 DiskImageSize.
(cl-defmacro my/defservice
    (repo &key (main-setup "git checkout main; git pull; git status; hr; npm ci; hr; time docker system prune -af")
          (cmd "npm run docker:dev")
          (example ""))
  "Example use:

   (my/defservice ùíü :cmd ùíû :example ‚Ñ∞)
  ‚áí
    (w-start-ùíü)    ‚âà Unkillable shell: cd ùíü; ùíû
    (w-is-up-ùíü?)   ‚âà Open browser at ‚Ñ∞
    (w-stop-ùíü)     ‚âà Kill all emacs-buffers & docker-images containing ùíü in their name

  (w-[start|stop]-services)  ‚áí Starts/stops all defined services."
  (add-to-list 'my/services repo)
  `(list
     (cl-defun ,(intern (format "w-start-%s" repo)) ()
       "Start server off of ‚Äòmain‚Äô, with prefix just start server off of current branch."
       (interactive)
       (let ((command (format "cd ~/%s; pwd; hr; %s; hr; %s"
                              (quote ,repo)
                              (if current-prefix-arg "" ,main-setup)
                              ,cmd))
             (buf-name (format "*Server:%s/%s*" (quote ,repo)
                               (if current-prefix-arg "main"
                                 (-let [default-directory ,(format "~/%s" repo)]
                                   (magit-get-current-branch))))))
         (my/run-unkillable-shell
          (format "echo %s; hr; %s" (pp-to-string command) command) ;; Show command being run in output buffer, then run that command
          buf-name)
         (with-current-buffer buf-name (read-only-mode))))

     (cl-defun ,(intern (format "w-stop-%s" repo)) ()
       "Force-kill all unkillable buffers that mention REPO in their name. Also stop any docker services mentioning REPO in their name."
       (interactive)
       (my/docker-stop ,(pp-to-string repo))
       (thread-last (buffer-list)
         (mapcar 'buffer-name)
         (--filter (s-contains-p ,(pp-to-string repo) it))
         (mapcar #'my/force-kill)))

     (if ,example
         (cl-defun ,(intern (format "w-is-up-%s?" repo)) ()
           (interactive)
           (browse-url ,example)
           (message "If the URL is busted, then the repo is not up correctly or the server has an error!")))))
#+end_src

In my private ~work.el~ I have declarations of the form ~(my/defservice ‚ü®directory‚ü©
:cmd "npm run dev" :example "Example URL to try out for this server")~.

#+begin_src emacs-lisp
(when my/work-machine?
  (load-file "~/Desktop/work.el"))
#+end_src

*** Project management & navigation
:PROPERTIES:
:CUSTOM_ID: Project-management-navigation
:END:

Version controlled repositories are considered ‚Äúprojects‚Äù ---no setup needed---,
but you can declare your own too.

Videos:
+ ~5mins: https://youtu.be/bFS0V_4YfhY
+ ~1hr:  https://www.youtube.com/watch?v=INTu30BHZGk

This is so sweet at work (and possibly at home!): From anywhere,
+ [[kbd:C-x p p]] ‚ü®select your project‚ü© RET ‚ü®start typing to see any file anywhere in the project‚ü©

+ [[kbd:C-x p b ]] ‚áí Switch to buffers only in the current ‚Äústream of thought‚Äù (project).
+ [[kbd:C-x p f ]] ‚áí Find files only in the current ‚Äústream of thought‚Äù (project).
+ [[kbd:C-x p s g ]] ‚áí Search the project using grep; TAB in the resulting buffer to
  open files.
+ [[kbd:C-x p S ]] ‚áí Save all project buffers
+ [[kbd:C-x p k ]] ‚áí Kill all buffers relating to the parent project

+ [[kbd:C-x p & ]] ‚áí Runs an async-shell-command in the project's root directory
+ [[kbd:C-x p x s ]] ‚áí Start or visit a shell for the project
+ [[kbd:C-x p r ]] ‚áí Runs interactive query-replace on all files in the projects
+ [[kbd:C-x p e ]] ‚áí Show a list of recently visited files, in the current project
+ [[kbd:C-x p V ]] ‚áí Open a project that has been modified, but not pushed with version control.

#+begin_src emacs-lisp
;; More info & key bindings: https://docs.projectile.mx/projectile/usage.html
(use-package projectile

  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)

  ;; Replace usual find-file with a project-wide version :smile:
  (global-set-key (kbd "C-x f") #'projectile-find-file)

  ;; Makes indexing large projects much faster, after first time.
  ;; Since its caching, some files may be out of sync; you can delete the cache
  ;; with: C-u C-x f
  (setq projectile-enable-caching t))

(use-package projectile

    :config
  (define-key projectile-mode-map (kbd "C-x p s")
    ;; I prefer helm-do-grep-ag since it shows me a live search
    (lambda () (interactive)
       (let ((default-directory (car (projectile-get-project-directories (projectile-acquire-root)))))
         ;; (shell-command-to-string "echo $PWD")
         (helm-do-grep-ag nil))))) ;; ‚Äúp‚Äùroject ‚Äús‚Äùearch
#+end_src

Let's get the file path of the current file. We bind it and make it a top-level invokable function.
#+begin_src emacs-lisp
(use-package projectile
    :defer nil
    :config
(define-key projectile-mode-map (kbd "C-x p c")
  (defun my/copy-current-file-path ()
    "Add current file path to kill ring."
    (interactive)
    (message (kill-new buffer-file-name)))))
#+end_src

*** Projectile
:PROPERTIES:
:CUSTOM_ID: Projectile
:END:
#+begin_src emacs-lisp
;; https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/
;; https://github.com/bbatsov/projectile
(use-package projectile

:config (projectile-global-mode)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map))
#+end_src
*** Are there any errors in my code?
:PROPERTIES:
:CUSTOM_ID: Are-there-any-errors-in-my-code
:END:

[[https://www.flycheck.org/en/latest/][Flycheck]] gives us syntax checking and linting tools to automatically check the
contents of buffers while you type, and reports warnings and errors directly in
the buffer, or in an optional error list. Sadly, the default reporting of errors
looks like ~FlyC 3~ in the modeline, but with [[https://github.com/liblit/flycheck-status-emoji][flycheck-status-emoji]] we can see the
status using cute & compact emoji such as ~üò±3~.

#+begin_src emacs-lisp
(use-package flycheck-status-emoji
    :defer nil
  :config
  (load-library "flycheck-status-emoji")
  ;; (diminish-undo 'flycheck-mode)
  (flycheck-status-emoji-mode))
#+end_src

Let's also have a nifty modal menu to quickly navigate between errors.
#+begin_src emacs-lisp
(use-package helm-flycheck   :defer nil)
 (bind-key*
 "C-c !"
 (defhydra my/flycheck-hydra (:color blue :hint nil)
   "Move around flycheck errors and get info about them"
   ("n" flycheck-next-error "next" :column "Navigation")
   ("p" flycheck-previous-error "previous")
   ("f" flycheck-first-error "first")
   ("l" flycheck-list-errors "list")
   ("h" helm-flycheck "helm") ;; Jump to an error / see-errors from a nice interactive menu

   ("e" flycheck-explain-error-at-point "explain"  :column "Current errror")
   ("c" flycheck-copy-errors-as-kill "copy")

   ("d" flycheck-describe-checker "Describe checker"  :column "More")
   ("s" flycheck-select-checker "Select checker")
   ("S" flycheck-verify-setup "Suggest setup")
   ("m" flycheck-manual "manual")))
#+end_src
**** On the fly syntax checking
:PROPERTIES:
:CUSTOM_ID: On-the-fly-syntax-checking
:END:

[[https://www.flycheck.org/en/latest/][Flycheck]] is a on-the-fly syntax checker that relies on external programs to
check buffers; which must be installed separately.

+ E.g., ghc is required for Haskell; whereas Emacs Lisp is checked by Emacs'
    own byte compiler, ~emacs-lisp~.
+ Sometimes more than one checking tool applies, use ~C-c ! s~ to select a
    different checker.
+ =C-c ! n,p,l= takes you to the ‚Äòn‚Äôext or ‚Äòp‚Äôrevious
  error, or ‚Äòl‚Äôist all errors in another buffer.

  ~C-c ! c~ to explicitly recheck the buffer.

#+begin_src emacs-lisp
(use-package flycheck
  :defer nil
  :init (global-flycheck-mode)
  :config ;; There may be multiple tools; I have GHC not Stack, so let's avoid that.
  (setq-default flycheck-disabled-checkers '(haskell-stack-ghc emacs-lisp-checkdoc))
  :custom (flycheck-display-errors-delay .3))
#+end_src

In an org-src block, we press ~C-c '~ to get into the language's mode where
flycheck will provide warnings.
#+begin_src haskell :tangle no
module Main where

main :: IO ()
main = putStrLn $ "nice" ++ f 0

f :: Int -> String
f x = x -- show x
-- type error
#+end_src

In-general, flycheck is intended for self-contained raw code ---not for source
blocks in Org-mode. Whence, the above example is a complete Haskell program,
with a named module and ~main~ method.

I think the built-in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Flymake.html][flymake]] syntax checker is better for Emacs Lisp,
so let's use that for ELisp.
#+BEGIN_SRC emacs-lisp
(use-package flymake
  :defer nil
  :hook ((emacs-lisp-mode . (lambda () (flycheck-mode -1)))
         (emacs-lisp-mode . flymake-mode))
  :bind (:map flymake-mode-map
              ("C-c ! n" . flymake-goto-next-error)
              ("C-c ! p" . flymake-goto-prev-error)))
#+END_SRC

Try it out:
#+begin_src emacs-lisp :tangle no
(setq 1 2) ;; Error: ‚Äò1‚Äô is not a variable.
#+end_src

*** Jump between windows using Cmd+Arrow & between recent buffers with Meta-Tab :relocate:
:PROPERTIES:
:CUSTOM_ID: Jump-between-windows-using-Cmd-Arrow-between-recent-buffers-with-Meta-Tab
:END:
We can use ~C-x o~ to switch to the ‚Äòo‚Äôther window, and ~C-u ùìÉ C-x o~ to switch to
the ùìÉ-th next clockwise window, but using ~s-‚Üë,‚Üì,‚Üê,‚Üí~ may be faster.

#+BEGIN_SRC emacs-lisp
(use-package windmove
    :defer nil
  :config ;; use command key on Mac
          (windmove-default-keybindings 'super)
          ;; wrap around at edges
          (setq windmove-wrap-around t))
  #+END_SRC

The [[https://github.com/killdash9/buffer-flip.el][docs]], for the following, have usage examples.
#+BEGIN_SRC emacs-lisp
(use-package buffer-flip
    :defer nil
  :bind
   (:map buffer-flip-map
    ("M-<tab>"   . buffer-flip-forward)
    ("M-S-<tab>" . buffer-flip-backward)
    ("C-g"       . buffer-flip-abort))
  :config
    (setq buffer-flip-skip-patterns
        '("^\\*helm\\b")))
;; key to begin cycling buffers.
(global-set-key (kbd "M-<tab>") 'buffer-flip)
#+END_SRC

See [[https://www.emacswiki.org/emacs/buffer-move.el][buffer-move]] if you're interested in moving the buffers, and their windows,
into new configurations.

*** w-screencapture
:PROPERTIES:
:CUSTOM_ID: w-screencapture
:END:
#+begin_src emacs-lisp
(bind-key "C-c s"
  (cl-defun w-screencapture ()
    "Interactively capture screen and save to clipboard; then paste in Slack, etc, with ‚åò-c.

  After we run this command, we can swipe up on mousepad to select different desktops, then
  click & drag to select portition of screen to capture.

  Captured screen is NOT saved to disk, only copied to clipboard.

In MacOs,
+ Command + Shift + 5  ‚áí  Select screen record
+ Command + Shift + 4  ‚áí  Selection Screenshot
+ Command + Shift + 3  ‚áí  Screenshot

See: https://osxdaily.com/2011/08/11/take-screen-shots-terminal-mac-os-x"
    (interactive)
    (async-shell-command "screencapture -i -c")))

(cl-defun w-delete-all-screenshots ()
    "Delete all ‚ÄúScreen Shot ‚ãØ‚Äù files in ~/Desktop."
    (interactive)
    (thread-last (shell-command-to-string "cd ~/Desktop; ls")
      (s-split "\n")
      (--filter (s-starts-with-p "Screen Shot" it))
      (--map (f-delete (format "~/Desktop/%s" it)))))
#+end_src
*** Screencapturing the Current Emacs Frame
:PROPERTIES:
:CUSTOM_ID: Screencapturing-the-Current-Emacs-Frame
:END:

Sometimes an image can be tremendously convincing, or at least sufficiently
inviting. The following incantation is written for MacOS and uses it's native
=screencapture= utility, as well as =magick=.
#+BEGIN_SRC emacs-lisp
(defun my/capture-emacs-frame (&optional prefix output)
"Insert a link to a screenshot of the current Emacs frame.

Unless the name of the OUTPUT file is provided, read it from the
user. If PREFIX is provided, let the user select a portion of the screen."
(interactive "p")
(defvar my/emacs-window-id
   (s-collapse-whitespace (shell-command-to-string "osascript -e 'tell app \"Emacs\" to id of window 1'"))
   "The window ID of the current Emacs frame.

    Takes a second to compute, whence a defvar.")

(let* ((screen  (if prefix "-i" (concat "-l" my/emacs-window-id)))
       (temp    (format "emacs_temp_%s.png" (random)))
       (default (format-time-string "emacs-%m-%d-%Y-%H:%M:%S.png")))
;; Get output file name
  (unless output
    (setq output (read-string (format "Emacs screenshot filename (%s): " default)))
    (when (s-blank-p output) (setq output default)))
;; Clear minibuffer before capturing screen or prompt user
(message (if prefix "Please select region for capture ‚Ä¶" "‚ô•‚Äø‚ô•"))
;; Capture current screen and resize
(thread-first
    (format "screencapture -T 2 %s %s" screen temp)
    (concat "; magick convert -resize 60% " temp " " output)
    (shell-command))
(f-delete temp)
;; Insert a link to the image and reload inline images.
(insert (concat "[[file:" output "]]")))
(org-display-inline-images nil t))

(bind-key* "C-c M-s" #'my/capture-emacs-frame)
#+END_SRC

Why this way? On MacOS, ImageMagick's =import= doesn't seem to work ---not at all
for me! Also, I dislike how large the resulting image is. As such, I'm using
MacOS's =screencapture= utility, which in-turn requires me to somehow obtain frame
IDs. Hence, the amount of work needed to make this happen on my system was most
simple if I just wrote it out myself rather than tweaking an existing system.

+ ~C-c C-x C-v~ ‚áí Toggle inline images!

*** Searching Hydra
:PROPERTIES:
:CUSTOM_ID: Searching-Hydra
:END:
#+begin_src emacs-lisp
(my/defhydra "s-f" "\t\tLocate Everything" search
   :Buffer
   ;; find all the occurrences of a string, pull out the lines containing the string to another buffer where [F2] I can edit and save,
   ("e" helm-swoop  "Editable")
    ;; Implicit Regex, colourful
   ("c" swiper "Classic")

   :Project
   ;; ‚Äú:toggle ‚Ñ∞‚Äù: ‚Ñ∞ is a Boolean expression that is evaluated to tell us whether the state is on-or-off
   ("t"  (lambda  () (interactive)) "Ignore specs/jsons"
    :toggle (let* ((with-hole "ag %s --line-numbers -S --color --nogroup %%s %%s %%s") ;; ‚âà original value of ‚Äòhelm-grep-ag-command‚Äô
                   (ignores "--ignore=\"*spec.js\" --ignore=\"*.json\" --ignore=\"*.json5\"")
                   (on (equal helm-grep-ag-command (format with-hole ignores))))
              (if on (progn (setq helm-grep-ag-command (format with-hole "")) nil) ;; ‚âà turn off the toggle
                (setq  helm-grep-ag-command (format with-hole ignores)))))
   ("f" (lambda () (interactive) (helm-do-grep-ag t)) "File type")
   ("d" (lambda () (interactive) (-let [default-directory (read-directory-name "Where do you want to search? ")] (helm-do-grep-ag nil)))  "Directory")
   ("D" (lambda () (interactive) (-let [default-directory (read-directory-name "Where do you want to search? ")] (helm-do-grep-ag t)))  "Directory & type"))
#+end_src
*** Pair Programming
:PROPERTIES:
:CUSTOM_ID: Pair-Programming
:END:

# Add: Quickly toggle my Emacs for when doing pair programming

I try to make my Emacs look more predictable for my colleagues, by introducing a bunch of UI elements that I normally
have off by default but would otherwise serve as useful aids when working together or provide a sense of familiarity for
my VSCoder counterparts.

#+begin_src emacs-lisp :tangle ~/Desktop/work.el
(defun my/toggle-pair-programming ()
  "Toggle enabling features that might aid communication when sharing screen, or pair programming

- Full screen mode
- Line numbers, and column numbers, and cat progress bar
- Blamer overlays
- Dark theme
- Tabs
- Folder navigator
"
  (interactive)
  (defvar my/sharing-screen? +1)
  (setq my/sharing-screen? (- my/sharing-screen?)) ;; Toggle between +1 and -1.

  ;; When pair programming, exit full screen mode so others can ‚Äúdraw‚Äù on my screen, eg using Slack
  (toggle-frame-fullscreen)

  ;; Line numbers in the left margin
  (setq display-line-numbers-width-start t)
  (global-display-line-numbers-mode my/sharing-screen?)

  ;; Column & line numbers in the modeline; always want these on?
  (column-number-mode                 +1) ;; Enabled in doom-modeline by default?
  (line-number-mode                   +1) ;; Enabled in doom-modeline by default?

  ;; Progress bar, graphic and percentage
  (use-package nyan-mode )
  (nyan-mode my/sharing-screen?)

  ;; Who did what and when?
  (global-blamer-mode my/sharing-screen?)

  ;; Make things look like VSCode; reduce friction with others
  ;; ‚Üí Dark theme, tabs, and clickable folder navigation
  (if (= +1 my/sharing-screen?)
      (my/toggle-theme 'doom-dracula)
    (my/toggle-theme 'doom-solarized-light))

  (use-package centaur-tabs)
  (setq centaur-tabs-set-icons t)
  (setq centaur-tabs-gray-out-icons 'buffer)
  (setq centaur-tabs-set-bar 'over)
  (centaur-tabs-mode my/sharing-screen?)

  ;; Treemacs is feature-right; e.g. highlights file associated to current buffer automatically and fully mouse-complaint.
  ;;  press ? to summon a helpful hydra
  (use-package treemacs)
  (if (= +1 my/sharing-screen?) ;; Toggle showing treemacs window
      (treemacs)
    (ignore-errors (delete-window (treemacs-get-local-window))))
  ;; Press ‚ÄúC-e‚Äù to see the end of length file names, or use the mouse to widen treemacs
  (treemacs-toggle-fixed-width)
  (ignore-errors (treemacs-indent-guide-mode +1))
  (treemacs-resize-icons 18)
  (other-window -1)

  ;; Kickoff message
  (if (= +1 my/sharing-screen?)
      (message "Pair programming provides an excellent test of technical and social skills")))

(my/toggle-pair-programming)
#+end_src

*** Modern Browsing within Emacs                                  :Disabled:
:PROPERTIES:
:CUSTOM_ID: Modern-Browsing-within-Emacs
:END:

#+begin_src shell :tangle no
# https://github.com/d12frosted/homebrew-emacs-plus
$ brew tap d12frosted/emacs-plus
$ brew install emacs-plus@29 --with-xwidgets
$ /usr/local/Cellar/emacs-plus@29/29.0.50/bin/emacs-29.0.50 &

# In ~/.bashrc, put the following at the end:
alias emacs="/usr/local/Cellar/emacs-plus@29/29.0.50/bin/emacs-29.0.50"
#+end_src

--------------------------------------------------------------------------------

I like using Chrome ---I like the integration of all things Google.

#+begin_src emacs-lisp
(cl-defun internet (&optional (url (concat "https://www." (read-string "https://www."))))
  "Browse to URL using `xwidget-webkit-browse-url'; see also `browse-url'."
  (interactive)
  (delete-other-windows)
  (split-window-right)
  (xwidget-webkit-browse-url url))

(my/defhydra "C-c p" "Emacs Browser" gamepad
  :Internet
  ("m" (internet "https://mail.google.com/mail/u/0/#inbox") "gMail"  :exit t)
  ("c" (internet "https://calendar.google.com/calendar/u/0/r") "gCalendar"  :exit t)
  ("e" (internet "https://www.reddit.com/r/emacs/") "Emacs Forum"  :exit t)
  ("b" (internet) "Browse"  :exit t))
#+end_src


*** TODO Github Browser Extensions (for Chrome)
:PROPERTIES:
:CUSTOM_ID: Github-Browser-Extensions-for-Chrome
:END:

+ [[https://github.com/ovity/octotree][octotree]]  :: Lets you explore the files and folders of a repository with a
  tree and search bar. Can also quickly browse the files changed in the current
  PR/branch.

+ [[https://github.com/jasonlong/isometric-contributions][isometric-contributions]] :: Renders your contribution graph on your profile in
  a nicer way: 3D instead of the default 2D.

+ [[https://github.com/OctoLinker/OctoLinker][OctoLinker]] :: Turns language-specific statements like ~include~, ~require~ or
  ~import~ into links.  Gives you the ability to go to files by clicking at their
  paths, not only internal files it also works for imported packages!

+ [[https://github.com/Justineo/github-hovercard][github-hovercard]] :: Show a neat hover card when you hover over an element! No
  need to open everything in a new page, just hover over it!

+ [[https://github.com/homerchen19/github-file-icons][github-file-icons]] :: Gives different filetypes different icons to GitHub üöÄ

+ [[https://github.com/N1ck/gifs-for-github][gifs-for-github]] :: Makes it easy to search GIPHY and add a GIF into any GitHub comment box.

+ [[https://github.com/benbalter/github-mention-highlighter][github-mention-highlighter]] :: Any GitHub issue you've been mentioned in and your mentions should now be more easily visible.

+ :flame: [[https://github.com/sindresorhus/refined-github][refined-github]] :: Browser extension that simplifies the GitHub interface and adds useful features

  - Makes whitespace characters visible
  - Adds one-click merge conflict fixers
  - Adds reaction avatars showing who reacted to a comment
  - Linkifies issue/PR references and URLs in code and conversation titles
  - Adds a button to revert all the changes to a file in a PR
  - Lets you hide every event except comments or unresolved comments in issues and PRs
  - üî• Adds a build/CI status icon next to the repo‚Äôs name.
  - Adds a button to download entire folders, via download-directory.github.io.
  - Adds a link to preview HTML files.
  - Adds a button to copy a file‚Äôs content.
  - Shows PRs that touch the current file.
  - [[https://user-images.githubusercontent.com/1402241/33802977-beb8497c-ddbf-11e7-899c-698d89298de4.gif][Enables tab and shift‚Äâtab for indentation in comment fields.]]
  - [[https://user-images.githubusercontent.com/1402241/53678019-0c721280-3cf4-11e9-9c24-4d11a697f67c.png][Adds a button to insert collapsible content (via <details>)]]
  # ‚Äº - [[https://user-images.githubusercontent.com/1402241/65020298-1f2dfb00-d957-11e9-9a2a-1c0ceab8d9e0.gif][Wraps selected text when pressing one of Markdown symbols instead of    replacing it: =[ ` ' " * ~ _= ]]
  - [[https://user-images.githubusercontent.com/1402241/99895146-16b50c80-2c4d-11eb-8038-210e6fd5e798.png][üî• Highlights the most useful comment in conversations.]]
  - [[https://user-images.githubusercontent.com/1402241/33474535-a814ee78-d6ad-11e7-8f08-a8b72799e376.png][Shows color-coded review counts in PR lists.]]
  - [[https://user-images.githubusercontent.com/1402241/79343285-854f2080-7f2e-11ea-8d4c-a9dc163be9be.gif][Mark/unmark multiple files as ‚ÄúViewed‚Äù in the PR Files tab. Click on the
    first checkbox you want to mark/unmark and then shift-click another one; all
    the files between the two checkboxes will be marked/unmarked as ‚ÄúViewed‚Äù.]]
  - [[https://user-images.githubusercontent.com/16872793/81943321-38ac4300-95c9-11ea-8543-0f4858174e1e.png][Shows the first Git tag a merged PR was included in.]]
  - Automatically deletes the branch right after merging a PR, if possible.
  - [[https://user-images.githubusercontent.com/16872793/87246205-ccf42400-c419-11ea-86d5-0e6570d99e6e.gif][Uses the first commit for a new PR‚Äôs title and description.]]
  - [[https://user-images.githubusercontent.com/1402241/54178764-d1c96080-44d1-11e9-889c-734ffd2a602d.png][Adds one-click buttons to change diff style and to ignore the whitespace and a keyboard shortcut to ignore the whitespace: d‚Äâw.]]
    ( The toggle-whitespace-changes is very useful when there are minor linting changes that can be safely ignored in a PR. )
  - Adds a keyboard shortcut to visit your own profile: g m.
  - [[https://user-images.githubusercontent.com/170270/55060505-31179b00-50a4-11e9-99a9-c3691ba38d66.png][Renders `text in backticks` in issue titles, commit titles and more places.]]
  - Shows all of Refined GitHub‚Äôs new keyboard shortcuts in the help modal ([[kbd:?]] hotkey).

*** TODO See all company related PRs
:PROPERTIES:
:CUSTOM_ID: See-all-company-related-PRs
:END:

#+begin_src emacs-lisp
(cl-defun w-PRs (&rest query-options)
  "See all company related PRs"
  (interactive)
  (thread-last `("is:open" "is:pr" "archived:false" "draft:false" ,@work/gh-tags  ,@query-options)
    (mapcar #'url-hexify-string)
    (s-join "+")
    (concat "https://github.com/pulls?q=")
    browse-url))
;;
(cl-loop for (name . query-options)
         in `((month ,(format-time-string "updated:>=%Y-%m-01"))
              (today ,(format-time-string "updated:>=%Y-%m-%d"))
              (created-this-week ,(format "created:>=%s"
                                          (org-read-date nil nil "++1" nil (org-read-date nil t "-sun")))) ;; Date of most recent Monday
              (stale!! ,(format "updated:<=%s" (org-read-date nil nil "-1w"))) ;; Items not touched in over a week
              (mentions-me "mentions:alhassy") ;; i.e., stuff I need to look at
              (involves-me "involves:alhassy")
              (process-manager "label:\"quick and easy\"" "repo:process-builder")
              (newts "label:\"Newts Priority Review\",Newts"))
         do (eval `(cl-defun ,(intern (format "w-PRs-%s" name)) () (interactive) (w-PRs ,@query-options))))
#+end_src

**** TODO A nice Emacs interface for a portion of the ‚Äúgh‚Äù CLI
:PROPERTIES:
:CUSTOM_ID: A-nice-Emacs-interface-for-a-portion-of-the-gh-CLI
:END:
#+begin_src emacs-lisp
;; A nice Emacs interface for the a portion of the ‚Äúgh‚Äù CLI.
(my/defaliases my/gh-checkout gh-checkout w-pr-checkout w-branch-checkout)
(cl-defun my/gh-checkout (&optional repo)
  "With prefix, select a branch name; otherwise a Pull Request name.

If no REPO is provided, let the user select one from a menu.
Example use:      (w-pr-checkout \"~/my-repo\")
                  (w-pr-checkout)"
  (interactive)
  (let* ((repo (or repo (completing-read "Repo: " (projectile-relevant-known-projects))))
         (default-directory repo) ;; temporarily override this global variable, used with magit
         (current-branch (magit-get-current-branch))
         (all-branches (magit-list-local-branch-names))
         (status (format "cd %s; gh pr status" repo)))
    (if current-prefix-arg
        (-let [branch (completing-read (format "New branch (Currently ‚Äú%s‚Äù): " current-branch) all-branches)]
          (shell-command-to-string (format "cd %s; git checkout %s" repo branch)))
      (let* ((PR-list (s-split "\n" (shell-command-to-string (format "cd %s; gh pr list" repo))))
             (pr‚ôØ (car (s-split "\t" (completing-read "PR: " PR-list))))
             (_ (shell-command-to-string (format "cd %s; gh pr checkout %s" repo pr‚ôØ)))
             (new-branch (magit-get-current-branch)))
        ;; Show nice status
        (async-shell-command status)
        (magit-status repo)))))
#+end_src

*** TODO SQL ---via LSP
:PROPERTIES:
:CUSTOM_ID: SQL-When-doing-serious-database-work-I-love-using-DBeaver-But-when-I-only
:END:
When doing ‚Äòserious‚Äô database work, I love using DBeaver.  But when I only want
to /quickly/ run a query, to check something, *without the fricition of switching
applications*, then doing so in Emacs is a no-brainer: I use doc : w-sql  to produce
a query buffer, if one doesn't exist, then ~C-c C-c~ to send queries.  (This also
serves as a nice *reference mechanism* for useful queries.)

Let's use [[https://github.com/lighttiger2505/sqls][LSP for SQL]], to get
+ Neato tooltips on table definitions and column constraints,
  - Write ~select * from my-table t~ then delete the ~*~ and enter ~t.~ to see all
    valid columns; or just delete the ~*~ and press ~.~ to see them.
+ Completions for tables & column names,
+ ~C-c C-c~ to execute query at point [My personal setup below],
  - TODO: Run all queries with doc : lsp-execute-code-action
+ TODO: When sharing with others, maybe execute doc : lsp-format-buffer
+ Note: The tokenizer is known to a bit buggy.
  - E.g., ~select 1 + 2 as "Numerical, yeah!"~ will not be run due to the ‚Äò!‚Äô.

#+begin_src emacs-lisp
;; Installation: go install github.com/lighttiger2505/sqls
(setq lsp-sqls-server "/Users/musa/go/bin/sqls")
(setq lsp-sqls-timeout 1)
(setq lsp-sqls-workspace-config-path nil)
;; https://emacs-lsp.github.io/lsp-mode/page/lsp-sqls/
(setq  work/sqls-connections nil)(setq work/sqls-connections
      '("host=127.0.0.1 port=5432 user=SUPER_SECRET password=ALSO_SUPER_SECRET dbname=YET_AGAIN_SECRET sslmode=disable"))
(setq lsp-sqls-connections
      ;; (--map `((driver . "postgresql") (dataSourceName . ,it)) work/sqls-connections))
      `(((driver . "postgresql") (dataSourceName . ,(car work/sqls-connections)))))
;; TODO: Remove this 'car'!
(add-hook 'sql-mode-hook 'lsp)

(use-package org-modern   :defer nil)
(defun my/execute-query-at-point ()
  "Execute query at point and make resulting table an Org table and modernise it"
  (interactive)
  (lsp-sql-execute-paragraph)
  (other-window 1) (org-modern-global-mode) (org-mode) (read-only-mode -1)
  (while (re-search-forward "^\+" nil t) (replace-match "|"  nil t))
  (toggle-truncate-lines)
  (beginning-of-buffer) (execute-kbd-macro (read-kbd-macro "<tab>"))
  (read-only-mode) (other-window -1)
  (local-set-key "q" (lambda ()  "Quit buffer" (interactive) (ignore-errors (kill-buffer-and-window)))))

;; TODO: FIXME: Debugger entered--Lisp error: (void-variable sql-mode-map)
;; (bind-key "C-c C-c" #'my/execute-query-at-point 'sql-mode-map)
;; (bind-key "C-c C-<return>" #'my/execute-query-at-point 'sql-mode-map)

(defun w-sql ()
  "Quickly run a SQL query, then dispose of the buffer when done.

Uses the first connection available, to change connections
invoke M-x `lsp-sql-switch-connection'."
  (interactive)
  ;; LSP only works on files; not buffers; so I use this file.
  (find-file "~/.emacs.d/scratch.sql")
  (insert work/sql-queries) ;; docs and examples
  (sql-mode)
  (hs-minor-mode -1) ;; I don't want the above comments to be collapsed away.
  (beginning-of-buffer))
#+end_src

#+begin_details "Previous setup ~ ejc-sql [Disabled]"
- ‚ùå ~ejc-sql~ crashes with updates.
- ‚úî I like that ejc-sql gives me M-. to jump to definitions of tables/functions/etc.
  - ‚ÄúGo to definition‚Äù: [M-.] M-x ejc-describe-entity ‚áí Show source code for a stored view, function, table, etc.
  - Get entity definition: show creation SQL of view, package, function, procedure or type.
  - C-c e t ‚áí See list of tables
- ‚úî ejc works with org-mode out of the box; https://github.com/kostafey/ejc-sql#use-with-org-mode

‚áí BEST OF BOTH WORLDS? ‚áê
(setq ejc-sql-separator "-- /") ;; Otherwise LSP sql server sees ‚Äò/‚Äô as a syntax error.

#+begin_src emacs-lisp :tangle no
;; (system-packages-ensure "leiningen")
;; NOTE: You must commented out the (require 'ejc-direx) from ejc-sql.el
;; Reason: https://github.com/kostafey/ejc-sql/issues/163
(use-package ejc-sql
    :defer nil
  :config
  (require 'ejc-company)
  (push 'ejc-company-backend company-backends)
  (setq ejc-completion-system 'standard) ;; Use my setup; i.e., Helm.
  ;; [C-u] C-c C-c ‚áí Evaluate current query [With JSON PP].
  (bind-key "C-c C-c"
             (lambda () (interactive)
               (setq ejc-sql-complete-query-hook
                     (if current-prefix-arg
                         '(w-ejc-result-pp-json)  ;; Defined below
                       '((lambda () ;; Give each line of text just one screen line.
                           (switch-to-buffer-other-window "*ejc-sql-output*")
                           (visual-line-mode -1)
                           (toggle-truncate-lines)
                           (other-window -1)))))
               (ejc-eval-user-sql-at-point))
             'sql-mode-map))

(defun w-sql ()
  "Quickly run a SQL query, then dispose of the buffer when done.

By default uses a connection named ‚Äúxxxx‚Äù, to see a list of
other connections call with a prefix argument."
  (interactive)

  ;; Get DB credentials. One does ‚ÄúM-x ejc-connect-interactive‚Äù once, then
  ;;  ‚ÄúM-x ejc-insert-connection-data‚Äù and paste that into your init; then
  ;; ‚ÄúM-x ejc-connect‚Äù provides a completion of possible DBs to connect to.
  (load-file "~/Desktop/work.el")
  ;; For the following: Alternatively, we could make a new binding such as ‚ÄúC-c C-j‚Äù
  ;; which temporarily adds to this hook, then calls
  (add-to-list 'ejc-sql-complete-query-hook 'w-ejc-result-pp-json) ;; Defined below
  (require 'ejc-sql)
  (-let [connection-name (if current-prefix-arg (ejc-read-connection-name) "xxxx")]
    (switch-to-buffer-other-window (format "*SQL/%s*" connection-name))
    (thread-last
        `("\n\n/\n-- DOCS & EXAMPLES\n--"
          "-- SQL queries should be seperated by ‚Äú/‚Äù"
          "-- [C-u] C-c C-c ‚áí Evaluate current query [With JSON PP]"
          "-- In result window, TAB/RET to navigate the columns/rows."
          "-- C-c e t ‚áí List all tables"
          "-- C-h t   ‚áí ‚ÄòH‚Äôelp for a ‚Äòt‚Äôable"
          "\nselect 1 + 2 as \"Numerical, yeah!\""
          "\n/\n"
          "-- More examples of useful SQL queries I might need, but don't want to remember"
          ;; I've moved them out to my private work.el file.
          ,@work/sql-queries)
      (s-join "\n")
      insert)
    (sql-mode)
    (hs-minor-mode -1) ;; I don't want the above comments to be collapsed away.
    (ejc-connect connection-name)
    (beginning-of-buffer)
    (message "Connecting to DB... please wait a moment")))

(defun w-ejc-result-pp-json ()
  "Pretty print JSON ejc-result buffer."
  (interactive)
  (ignore-errors
    (switch-to-buffer-other-window "*ejc-sql-output*")
    (beginning-of-buffer)
    (re-search-forward "{")
    (backward-char 1)
    (delete-region (point-min) (point))
    (end-of-buffer)
    (re-search-backward "|")
    (kill-line)
    (json-mode)
    (json-pretty-print-buffer)
    (other-window -1)
    (message-box "hiya")))
#+end_src

;; Add minimal table autocomplete to SQL
(require 'ejc-company)
(push 'ejc-company-backend company-backends)
(add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (company-mode t)))
#+end_details

- *Postgres is the Emacs of Databases:* /It has extensions!/ E.g., It can be
  extended to write stored functions in Ruby, Python, and [[https://plv8.github.io/#:~:text=for(var%20i%3D0%3B%20i%3Ckeys.length%3B%20i%2B%2B)%7B%0A%20%20%20%20%20%20%20%20o%5Bkeys%5Bi%5D%5D%20%3D%20vals%5Bi%5D%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20o%3B][in-particular
  JavaScript]]. So neat!
  - [[https://dzone.com/articles/why-postgresql-so-awesome][Why PostgreSQL is so Awesome - DZone Java]]
  - [[https://www.2ndquadrant.com/en/blog/postgresql-is-the-worlds-best-database/][PostgreSQL is the worlds' best database - 2ndQuadrant | PostgreSQL]]
  - [[https://www.craigkerstiens.com/2012/04/30/why-postgres/][Why Postgres - Craig Kerstiens]]

*** TODO Docker
:PROPERTIES:
:CUSTOM_ID: Docker
:END:
#+begin_src emacs-lisp
;; Usage: M-x docker [RET ?]
(use-package docker
    :defer nil
  :config
  (my/defaliases docker-containers w-show-docker-containers))

(defun w-stop&remove-docker-containers ()
  (interactive)
  (shell-command "docker stop $(docker ps -a -q)")
  (shell-command "docker rm $(docker ps -a -q)"))

(defun w-postgres-status ()
  (interactive)
  (display-message-or-buffer (s-replace "healthy" "üÜô healthy üçè" (shell-command-to-string "docker ps -a | grep postgres"))))

(cl-defun w-kill-process-running-on-port (&optional (port (completing-read "Port: " '("3310" "80" "9000" "8000" "8080" "etc, whatever you want"))))
  "We use ‚Äòlsof‚Äô to list open files; as in:  lsof -i :3310 +c0
  The +c0 prints the full name of the command rather than truncating it.

  We then find the PID and kill the process."
  (interactive)
  (-let [process (shell-command-to-string (format "lsof -i :%s +c0" 3310))]
    (-let [pid (ignore-errors (cl-second (s-split " " (cl-second (s-split "\n" process)))))]
      (shell-command (format "kill %s" pid))
      (message process))))


#+end_src

**** my/docker-stop
:PROPERTIES:
:CUSTOM_ID: my-docker-stop
:END:
#+begin_src emacs-lisp
(defun my/docker-stop (ctr)
  "Stop all containers that mention CTR in their name, image, command, or container id"
  (thread-last (shell-command-to-string "docker ps -a")
    (s-split "\n")
    (--filter (s-contains-p ctr it))
    (--map (car (s-split " " it))) ;; Get docker container ids
    (--map (shell-command (concat "docker stop " it)))))
#+end_src

*** TODO Peer Review / Pull Request Template for Work
:PROPERTIES:
:CUSTOM_ID: Peer-Review-Pull-Request-Template-for-Work
:END:

I run TODO. doc.w-pr-template to get a new Org buffer with a review template.  I make
notes and check-off boxes with ~C-c C-c~ as usual, and when I'm done I press ~C-c
C-s~ to copy the buffer to clipboard, in markdown format. Then I can paste it
into Github.

#+begin_src emacs-lisp
(cl-defun w-pr-template ()
  "Hi"
  (interactive)
  (-let [buf "PR Template ~ Press ‚ÄúC-c C-s‚Äù when done"]
    (ignore-errors (kill-buffer buf))
    (switch-to-buffer buf)
    (insert "w-pr-template")
    (yankpad-expand)
    (org-mode)
    (beginning-of-buffer)
    (use-local-map (copy-keymap org-mode-map))
    (local-set-key (kbd "C-c C-s")
                   `(lambda ()
                     (interactive)
                     (beginning-of-buffer)
                     (replace-string "[X]" "‚úÖ")
                     (beginning-of-buffer)
                     (replace-string "[ ]" "‚ùå")
                     (beginning-of-buffer)
                     (replace-string "[-]" "üöß")
                     (-let [org-export-with-toc nil]
                       (org-md-export-as-markdown)
                       (kill-ring-save (point-min) (point-max)))
                     (kill-buffer-and-window) ;; Kills the new org-md-export buffer
                     (kill-buffer ,buf) ;; Kills this temporary PR template buffer
                     (message "PR notes saved to clipboard in Github markdown")))))
#+end_src

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** w-pr-template: Peer Review / Pull Request Template for Work
I followed the testing instructions and everything look's good üòÅ

Below is a detailed checklist of what I went through.

--------------------------------------------------------------------------------

1. [ ] Pull Request: The PR template was fully filled out.
   - [ ] Clear description of the problem and how it was solved.
   - [ ] I've cross-checked the description with the associated Jira ticket; and
     everything is implemented.
   - [ ] I've ticked-off the PR's check-boxes.
   - [ ] Good use of bullet points (-) and code font (‚Äµ, ‚Ä∑) to make the prose
     easier to read.
   - [ ] The commit messages are well-written.
   - [ ] Travis CI succeeds.
   - [ ] PR author annotated source code, with Github comments, before the review.
     - Annotations guide the reviewer through the changes, showing which files to look at first and defending the reason behind each code modification.

2. [ ] Functionality: The code behaves as the author intended.
   - [ ] I was able to reproduce the bug on ~main~.
   - [ ] Ran the code and used it as an end-user would.
       Namely, I made a new form, submitted an instance, checked ~In-Progress~,
     & ~Form Reports~.
   - [ ]  I've tried all kinds of quotes and unicode, "ùí∞"\‚Äò‚Ñï‚Äô/ùíä‚Ä≤‚Ñ≠‚Ä≥ùëÇÿõùíü‚®æ'‚àÉ',
        input for text inputs; as well as special chars: +-_)(*&^%$#@!~`'".;><?/}{}[]|\.
   - [ ] Followed the happy path in the provided testing instructions.
     - Nope; none provided.
   - [ ] Also tried the following edge case: ‚ãØ ‚Åâ ‚ãØ

3. [ ] Tests: There are new unit tests (but sadly no E2Es/integration).
   - [ ] Meaningful: Tests actually test that the code is performing the
     intended functionality.
   - [ ] Ran associated E2Es / unit tests with the incantation: ‚ãØ ‚Åâ ‚ãØ.
   - [ ] I looked at the associated migrations file and ran the following SQL
     query after running migrations and it works fine; then I ran the query
     after running rollbacks and everything is as expected.
     ,#+begin_src sql
     ???
     ,#+end_src
   - [ ] Avoid global test fixtures and seeds, add data per-test.
       TL;DR: To prevent test coupling and easily reason about the test flow, each test
       should add and act on its own set of DB rows.

4. [ ] Naming: Clear and informative names were chosen for top-level-items/variables/methods.

5. [ ] Comments: New top-level-items/variables/methods have clear and useful
   documentation.
   - [ ] Sometimes the code is clear ---e.g., 5 lines perform a toggle---
     but we can improve readability by providing a ‚Äúcomment as function‚Äù
     ---e.g., making a ~toggle~ function, then calling it where it is used;
     this new function is likely to be smaller than the original inlined use.

     Some comments-as-functions have been suggested.

6. [ ] Being Neighbourly: There was nearby code that could have been
   improved/update, and suggestions have been left as to how to do so.
   - We're likely to touch these files again in the future, so why not leave
     things better than we found them üöÄ

7. [ ] Code Smells: Are there any [[https://blog.codinghorror.com/code-smells/][code smells?]]

8. [ ] Syntax: I've read every line.
   - Nope, there was some stuff I'm not familair with. If the PR authour can
     jump on a call and walk me through them, that'd be awesome!
   - [ ] I've left various suggestions and feedback, against specific lines
     of code. Happy to discuss these further!
   - [ ] I took my time while reviewing your code, and I'm not depending on
     others to catch errors.

9. [ ] Complexity: Another developer can easily understand and use this code when
   they come across it in the future :-)

10. [ ] Modulairty: Is there any redundant or duplicate code? Is the code as modular as possible?

11. [ ] Backwards Compatiable: I made a form in ~main~, involving the work in
    this branch, and it worked fine in this branch.
    - I was able to edit the form, submit it, and checked that it looked find in ~Form Reports~.

12. [ ] Best Practices: The following rules-of-thumb are adhered to, more or less.
      ,#+html: <details>
    - Remove some redundancy using a bit of laws of algorithmics, namely
      + ~[ùíÜùíïùíÇ-ùíìùíÜùíÖùíñùíÑùíïùíäùíêùíè] ‚ãØ(x => f(x))‚ãØ  ‚â° ‚ãØf‚ãØ~
      + ~[ùíäùíá-ùíÖùíäùíîùíïùíìùíäùíÉùíñùíïùíäùíóùíäùíïùíö] (a ? f(b) : f(c)) ‚â° f(a ? b : c)~
      which increase readability a tad.
      # Especially when ‚Äúf‚Äù is a lengthy expression; it may also be ideal to give
      # ‚Äúa ? b : c‚Äù a local name.
    - Fail fast, validate arguments [we have some in-house validation util libraries]
    - Be aware that ~0, "", []~ are all falsey values in JS: If a variable ~x~
      can be one of those things, then ~if (x)~ is not always approriate; better
      may be ~if(typeof x === 'integer')~ since this communicates two things (1)
      the variable is defined, and (2) what it's type expected is.
      + Likewise, better use ~typeof~ instead of ~x !== null~.
    - You have variables declared a bit from their use sites; the distance
      creates an unnecessary disconnect ---especially since you don't use these
      variables elsewhere. Please relocate them to be closer to their use sites.
    - Strings are sanitised
    - Errors are caught; with ~try/catch~
    - Global variables are avoided, when possible.
    - ~const~ is preferred to ~let~; ~var~ should seldom be used.
      - Use ~var~ and ~function~ when you want definitions hoisted to the top of
        their enclosing scope.
    - ~===~ is preferred to ~==~.
    - Use default arguments instead of short-circuiting or conditionals
      - ~f (x) { x = x || defaultValue; ‚ãØ }~ ‚â° ~f (x = defaultValue) { ‚ãØ }~.
      - Named parameters can also be optional, with default values:
        ~f(obj) { let prop = obj.prop || defaultProp; ‚ãØ}~ ‚â£ ~f ({prop =
        defaultProp}) { ‚ãØ }~
    - Unless you really need an array,  handled an indefinite number of
      arguments using rest parameters: ~function f(...args) {‚ãØ // use ‚Äòargs‚Äô as
      an array}~ can be invoked ~f(x‚ÇÅ, x‚ÇÇ, ‚Ä¶)~ _without_ array brackets; or as
      ~f(...arr)~ if you have an array in-hand.
    - Function arguments: 3 or fewer ideally
    - If you need to declare an argument but are not using it, prefix it's name
      with an underscore.
    - Encapsulate conditionals in a separate _well-named_ function, if possible
    - Avoid negative conditionals; e.g., by making use of well-choosen names.
    - Use Demorgan's rules: ~!x && !y ‚â£ !(x || y)~ and ~!x || !y ‚â£ !(x && y)~.
    - Use ~try/catch~ with ~async/await~; or promises with both ~then~ and ~catch~.
    - Don't ignore rejected promises, log it to external logging service
    - Related chunks of code are clearly demarcated.
    - If an anonymous function is too long, more than 2 lines, give it a name:
      E.g., in JS, ~arr.map(x => ...) ‚â£ arr.map( function
      doingSomeComplexStuff(x) { return ...} )~.  The name aids in communicating
      the intent, and is useful for debugging.
    - [ES6] Braces are used for block scope, and not simulated using IIFEs.
    - Avoid explicit newlines with ~+ "\n" +~ in-favour of Template Literals, which preserve line
      breaks.
    - Use Destructuring instead of explicit projections; aids in readability.
      - Note‚à∂ ~let y = x.y~ ‚â° ~let {y} = x~ only holds when ~x~ is not ~null~
        (and so when ~x~ is not a expression involving ~?.~).

    ,#+html: </details>
#+end_src

*** TODO LSP and Eglot Experiments
**** TODO Eglot ----Fancy IDE Features that Just Work·µÄ·¥π

For JavaScript:
#+begin_src emacs-lisp
;; Get the language server for JavaScript
;; $ npm install -g javascript-typescript-langserver

;; Now open an empty buffer, switch to JS mode, M-x eglot, M-x company-mode,
;; then enter ‚Äúconsole.‚Äù and see the completion of possibilities! <3
#+end_src

For Java, install doc:eglot-java-mode and activate that in a Java file ---it automatically installs the required
language server. üöÄ

**** TODO LSP: Making Emacs into a generic full-featured programming IDE
:PROPERTIES:
:CUSTOM_ID: LSP-Making-Emacs-into-a-generic-full-featured-programming-IDE
:END:

(TLDR: LSP gives Emacs a uniform way to deal with programming languages, such as
highlighting and refactoring.)

[[https://microsoft.github.io/language-server-protocol/][Language Server Protocol (LSP)]] was created by Microsoft to define a common
standard for providing editor-agnostic code intelligence support. It has become
widely popular since its creation. Emacs support for lsp comes with the [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]]
and the [[https://github.com/joaotavora/eglot][eglot]] (‚ÄòE‚Äômacs poly‚Äòglot‚Äô) packages; let's use the first one since it
comes with all features enabled by default (which increases discoverability).
[ See also: [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][A guide on disabling/enabling lsp-mode features - LSP Mode - LSP support for Emacs]]. ]

Essentially how it works is that LSP defines a bunch of useful requests
---such as code completion, types, etc--- and our editor (Emacs) makes these
requests to a server (a process that knows how to handle them) then we get the
results and show them nicely in our editor (Emacs).

Further reading:
+ [[https://emacs-lsp.github.io/lsp-mode/page/main-features/][Main features - LSP Mode - LSP support for Emacs]] ‚áí Reasons (with gifs) to use
  lsp-mode ;-)
+ [[https://emacsconf.org/2019/talks/19/][How Emacs became my awesome Java editing environment [EmacsConf2019]]]
  is an excellent ~10min video demoing prime features of LSP.
+ [[https://www.toptal.com/javascript/language-server-protocol-tutorial][Using Text Editors for Programming with LSP | Toptal]]
+ [[https://microsoft.github.io//language-server-protocol/overviews/lsp/overview/][LSP overview]]
+ :flame: [[https://emacs-lsp.github.io/lsp-mode/tutorials/reactjs-tutorial/][React JavaScript Tutorial in Emacs - LSP Mode]] - Nice walkthrough on
  setting-up LSP for JavaScript (along with ESlint) and trying it out.

*Super simple setup for lsp-mode*: Install lsp-mode with [[kbd:][M-x package-install
‚ü®return‚ü© lsp-mode]] then open, say, a JavaScript file and press <kbd:M-x lsp>. It
will ask you to download a server, such as ~jsts-ls~ for ‚ÄúJavaScript-TypeScript
Language Server‚Äù. /[You may need to restart Emacs; when you open a file, LSP
needs to know what ‚Äòworkspace‚Äô it belongs to!]/ Now you can, for example, perform
<kbd:s-l g r> to see all references of the name under the cursour, or <kbd:s-l g
d> to go to its definition, or <kbd:s-l g t> to see its type (which already
shows in the mode line).  In your JS file, write the errenous line ~let a == 1;~
then with your cursour on that line you'll see some info to the side about the
error (thanks to ~lsp-ui-mode~) and if you invoke ~lsp-treemacs-errors-list~
then you get a nice hierarchical, ‚ü®tab‚ü©-ful, list of errors.  To find symbol
names, with autocompletion of all names in your workspace, use <kbd:s-l g a>
(thanks to ~helm-lsp~), for the current file TODO. doc.lsp-ui-imenu (or more simply,
<kbd:C-c i>) is nice.  As the LSP server runs it can even detect JSON objects
and show their values in the mode line when the cursour is above them; which can
also be requested with <kbd:s-l h h>.  (TODO. doc.lsp-describe-thing-at-point).  /That
is all!/

| [[kbd:][s-l g g]] | Find definitions of the symbol under point                         |
| [[kbd:][s-l g r]] | Find references of the symbol under point                          |
| [[kbd:][s-l g t]] | Find type definitions of the symbol under point                    |
| [[kbd:][s-l g a]] | Find all meaningful symbols that match pattern (project wide)      |
| [[kbd:][s-l h h]] | :fire: Display the type signature and documentation of the thing at point |
| [[kbd:][s-l h g]] | Trigger display hover information popup and hide it on next typing |
| [[kbd:][s-l r r]] | Rename the symbol (and all references to it)                       |

Also: TODO. doc.lsp-format-buffer makes the code more readable.

#+begin_src emacs-lisp
(use-package lsp-mode
    :defer nil
  :init
  ;; Set prefix for lsp commands
  ;; (setq lsp-keymap-prefix "s-l") ;; default
  ;; Set how often highlights, lenses, links, etc will be refreshed while you type
  ;; (setq lsp-idle-delay 0.500) ;; default
  :hook  ;; Every programming mode should enter & start LSP, with which-key support
  (js-mode . lsp-mode) ;; Enter LSP mode
  (js-mode . lsp)      ;; Start LSP server
  (lsp-mode . lsp-enable-which-key-integration)
  ;; For some reason, my usual snippet setup does not work with LSP, so using ‚ÄúC-x y‚Äù
  :bind ("C-x y" . #'yankpad-insert)
  ;; When I'm typing and possible completitions appear, I can press M-! to see their docstrings in a temporary buffer.
  ;; But on already written words, I'll use ‚ÄúC-u M-.‚Äù to toggle having their docstrings in a scrollable&growable tooltip-like-overlay-window.
  ;; Use ‚Äúbind*‚Äù to override Js-mode's dumbjump, which is useless for me
  :bind* ("M-." . (lambda () (interactive)
                    (if (not current-prefix-arg)
                        (call-interactively #'lsp-ui-peek-find-definitions)
                      (if (lsp-ui-doc--visible-p)
                          (lsp-ui-doc-hide)
                        (lsp-ui-doc-show)))))
  :commands lsp)

;; If a server crashes, restart it without asking me.
(setq lsp-restart 'auto-restart)
#+end_src

#+begin_src emacs-lisp
;; https://emacs-lsp.github.io/lsp-mode/page/languages/
;; M-x lsp-install-server ‚ü®return‚ü© jsts-ls
;; M-x lsp-install-server ‚ü®return‚ü© json-ls
;; M-x lsp-install-server ‚ü®return‚ü© eslint
;; M-x lsp-install-server ‚ü®return‚ü© css-ls
;; M-x lsp-install-server ‚ü®return‚ü© html-ls
#+end_src

For JavaScript development, actually install the required servers locally.
- Otherwise, tooltips with documentation on hover, args info echoed in mode
  line, jump to definition, and etc wont work.
#+begin_src emacs-lisp
(shell-command "npm i -g typescript-language-server; npm i -g typescript")
#+end_src

#+begin_src emacs-lisp
;; lsp-ui for fancy sideline, popup documentation, VScode-like peek UI, etc.
;; https://emacs-lsp.github.io/lsp-ui/#intro
;;
;; You only have to put (use-package lsp-ui) in your config and the package will
;; work out of the box: By default, lsp-mode automatically activates lsp-ui.
(use-package lsp-ui   :defer nil)

;; lsp-treemacs for various tree based UI controls (symbols, errors overview,
;; call hierarchy, etc.)
(use-package lsp-treemacs   :defer nil) ;; https://github.com/emacs-lsp/lsp-treemacs
;; M-x lsp-treemacs-errors-list

;; helm-lsp provides ‚Äúon type completion‚Äù alternative of cross-referencing.
;; https://github.com/emacs-lsp/helm-lsp
(use-package helm-lsp   :defer nil)
 (require 'lsp-mode)
 (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
;; Jump to a symbol's definition in the current workspace with ‚Äús-l g a‚Äù or ‚ÄúM-g
;; a‚Äù (The 'a' stands for apropos, which means appropriate nature)

;; Set the amount of data which Emacs reads from a process.
;; Some LSP responses are in the 8k-3MB range.
;; ‚ü¶ 1 megabyte ‚âà 1 million bytes ‚âà 1 000 000 bytes ‚üß
;; NO! (setq read-process-output-max (* 1024 1024)) ;; ~1mb; [default 4k]
;; NO! (setq gc-cons-threshold (* 2 8 1000 1024)) ;;; ~16mb; default is: 800 000
;; A large gc-cons-threshold will cause freezing and stuttering during long-term
;; interactive use. This one seems to be a good default.
#+end_src

:flame: If you leave your cursour on a name, all other occurances are
highlighted /and/ you get to see its (type) description in the mode line.

üî• As you begin to type, all variable/function names /loosely/ matching what you
type will be shown, along with their (type) descriptions.

üöÅ If you see an error ~‚ÄúLSP :: Could not connect to ùí≥ server‚Äù~, then run
TODO. doc.lsp-doctor and look at the buffer ~ùí≥::stderr~ for hints on what the cause
could have been; [[https://emacs-lsp.github.io/lsp-mode/page/faq/][FAQ]].

The Language Server protocol is used between a tool (the client) and a language
smartness provider (the server) to integrate features like auto complete, go to
definition, find all references and alike into the tool.

LSP, more or less, reduces the linear problem of language-specific-IDE into a
constant problem: Each language implements an LSP program which is then used by
an LSP-enabled editor to provide an IDE experience.

LSP mode supports the following Features:

+ As you type reporting of parsing and compilation errors (via flycheck/lsp-ui)
+ Code completion - using company-mode
+ doc hovers - using lsp-ui
+ Code actions - using lsp-ui
+ Code outline - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][imenu]]
+ Code navigation - using builtin xref
+ Code lens (references/implementations) - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]]
+ Highlights
+ Code formatting
+ Visual debugger - [[https://github.com/emacs-lsp/dap-mode][dap-mode]]
+ Test runner - dap-mode
+ Project explorer integration - treemacs

#+begin_src emacs-lisp
;; Load the various useful utils
(require 'lsp-ui-peek)
(require 'lsp-ui-sideline)
(require 'lsp-ui-doc)
(require 'lsp-ui-imenu)

; (setq lsp-mode-hook nil)
(add-hook 'lsp-mode-hook
          (lambda ()
            ;; Locally delete a file needed for work, but it's outdated and clashes with LSP.
            ;; TODO: (shell-command "rm ~/wxPortal/.flowconfig")
            ;; Load the various useful utils
            (require 'lsp-ui)
            (lsp-ui-peek-enable t)
            (lsp-ui-doc-enable t)
            (lsp-ui-sideline-enable t)
            (lsp-ui-imenu-buffer--enable)
            ;; Set ‚åò-l as the main mini-menu for LSP commands
            (bind-key* "s-l" #'my/lsp-hydra/body)))

(defun my/helm-lsp-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'helm-lsp-workspace-symbol)))

  (defun my/helm-lsp-global-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'helm-lsp-global-workspace-symbol)))

;; TODO: Add other cool features discussed/loaded above into this hydra!
(defhydra my/lsp-hydra (:color blue :hint nil)
  ;; Xref
  ("d" xref-find-definitions "Definitions" :column "Xref")
  ("D" xref-find-definitions-other-window "-> other win")
  ("r" xref-find-references "References")
  ("s" my/helm-lsp-workspace-symbol-at-point "Helm search")
  ("S" my/helm-lsp-global-workspace-symbol-at-point "Helm global search")

  ;; Peek
  ("C-d" lsp-ui-peek-find-definitions "Definitions" :column "Peek")
  ("C-r" lsp-ui-peek-find-references "References")
  ("C-i" lsp-ui-peek-find-implementation "Implementation")

  ;; LSP
  ("p" lsp-describe-thing-at-point "Describe at point" :column "LSP")
  ("C-a" lsp-execute-code-action "Execute code action")
  ("R" lsp-rename "Rename")
  ("t" lsp-goto-type-definition "Type definition")
  ("i" lsp-goto-implementation "Implementation")
  ("f" helm-imenu "Filter funcs/classes (Helm)")
  ("C-c" lsp-describe-session "Describe session")

  ;; Flycheck ---my ‚ÄúC-c !‚Äù flycheck hydra is much better than this simple lsp one.
  ;; ("l" lsp-ui-flycheck-list "List errs/warns/notes" :column "Flycheck")
  ("l" my/flycheck-hydra/body "List errs/warns/notes" :column "Flycheck")

  ;; Misc
  ("q" nil "Cancel" :column "Misc")
  ("b" pop-tag-mark "Back"))
#+end_src

#+begin_details End-to-end Test
#+begin_src emacs-lisp :tangle init-test.el
(ert-deftest lsp-hover-shows-type-signature ()
  ;; Make a temporary scratch.js file with the given contents.
  (-let [scratch.js (make-temp-file "scratch" nil ".js" "const first = (x, y) => 3")]
    (find-file scratch.js)
    (lsp-workspace-folders-add (f-parent scratch.js))
    (lsp)

    ;; lsp-hover uses lsp--eldoc-message, so let's save the hover info.
    (advice-add #'lsp--eldoc-message :before (lambda (&rest msg) (setq my/lsp-hover-message (substring-no-properties (car msg)))))

    (end-of-buffer)
    (insert "\n first")
    (lsp-hover)  ;; Alternatively: (lsp-describe-thing-at-point)
    (should (equal "const first: (x: any, y: any) => number" my/lsp-hover-message))

    (save-buffer)
    (kill-buffer)))
#+end_src
#+end_details

***** Types as comments in JavaScript via LSP && Using LSP for Org-Src Blocks
:PROPERTIES:
:CUSTOM_ID: Types-as-comments-in-JavaScript-via-LSP
:END:
#+begin_src js :tangle "~/.emacs.d/scratch.js"
// The following enables typechecking via LSP.
// @ts-check

/**
 ,*
 ,* @param {number} x -
 ,* @param {number} y -
 ,* @returns {number} -
 ,*/
// function add(x, y) {return "x + y";} // ‚ö† Faulty implementation!
function add(x, y) {return x + y;}

// add("a", 1) // ‚ö† Erroneous call!
add(1, 2)
#+end_src

For more on this idea on types, see [[https://github.com/BeyondCodeBootcamp/jsdoc-typescript-starter][A simple, but non-trivial example of getting the most from JSDoc + tsserver (Type Linting without TypeScript)]].

Within Org-mode, at the start of the above ~src~ block, execute ~M-x lsp-org~ to [[https://emacs-lsp.github.io/lsp-mode/manual-language-docs/lsp-org/][get
some LSP]] working even though you're in Org-mode.

*** TODO Note: M-S-SPC is for my personal servers dashboard.
:PROPERTIES:
:CUSTOM_ID: Note-M-S-SPC-is-for-my-personal-servers-dashboard
:END:
#+begin_src emacs-lisp :tangle no
;; Note: M-S-SPC is for my personal servers dashboard.
(global-set-key (kbd "M-SPC")   (lambda () (interactive) (setq org-agenda-files (list org-default-notes-file)) (org-agenda nil "a") (delete-other-windows) (beginning-of-buffer)))

(use-package ace-jump-mode ;; Already installed above, somewhere.
  :config (bind-key* "C-c SPC" 'ace-jump-mode))
#+end_src

*** TODO Tree cmd, also treemacs for navigating a new repository
(system-packages-ensure "tree")
- A useful way to get an overview of a new repoistory.
- Alternatively, a nice way to quickly see what's at the current level and all subdirectories.
- =tree | ls=

I might browse around the various subdirectories trying to get a feel for the layout of the project. I might try lots of ls commands, or perhaps something like

          tree | less
          #(or perhaps)#

and then within less I can use the interactive search function / to look around for keywords.

E.g., =tree | less= then =/ karate= will show me a tree overview with all files that
have the word ‚Äúkarate‚Äù in their full filename; then =/ png= will do a new search
(on the tree overview) to show me all files with the phrase =png= (including as an
extension).

Of-course, to actually do anything with the files (like mass renaming), there's
Emacs' Dired (the directory editor).

** TODO Web Development                                           :Disabled:
:PROPERTIES:
:CUSTOM_ID: COMMENT-Web-Development
:END:

First, let's get some useful Cheat Sheets...
#+begin_src emacs-lisp
;; Get the repos locally, and use: M-x my/cheatsheet to view the pretty HTML sheets.
(mapcar #'my/cheatsheet '("JavaScript" "Vue" "AngularJS"))
#+end_src

*** Quickly produce HTML from CSS-like selectors
:PROPERTIES:
:CUSTOM_ID: Quickly-produce-HTML-from-CSS-like-selectors
:END:

Emmet-mode (outside of Emacs, this is known as [[https://emmet.io/][Emmet]] and [[https://www.smashingmagazine.com/2009/11/zen-coding-a-new-way-to-write-html-code/][Zen Coding]]),
is a powerful abbreviation engine that expands CSS selectors into HTML code.
It's a neat way to write markup quickly in Emacs.

# Alternative example candidate: div#news.module>div.header+div.body>ul>li#item-$*5
#
Watch this [[https://vimeo.com/7405114][demo video]]. Or here's an example with filler text:
=#page>.logo+ul#navigation>li*5>a>lorem3=
expands into
# =div#page>div.logo+ul#navigation>li*5>a=
#+begin_src html :tangle no
<div id="page">
    <div class="logo"></div>
    <ul id="navigation">
        <li><a href="">Justo eget magna!</a></li>
        <li><a href="">Mattis pellentesque id!</a></li>
        <li><a href="">Turpis massa tincidunt.</a></li>
        <li><a href="">Sit amet, porttitor.</a></li>
        <li><a href="">Feugiat nisl pretium.</a></li>
    </ul>
</div>
#+end_src

Likewise, we can make 5 links next to 5 input boxes with:
~(a[href=www.google.ca]{Click me!}+label{Name:}>input[value="first name"])*5~.

Anyhow, here's my setup:
#+begin_src emacs-lisp
;; USAGE: Place point in an emmet snippet and press C-j to expand it to appropriate tag structure;
;; e.g., #q.x>p C-j. Alternatively, press C-j then start typing an emmet snippet to see it preview live.
;; [C-j is just M-x emmet-expand-line]
;;
(use-package emmet-mode ;; C-j ! RET  === Makes an entire HTML template for you.
  :hook (web-mode . emmet-mode))
;;
;; Please show me an HTML expansion preview as I type
(setq emmet-preview-default t) ;; Press C-j then start typing; e.g., C-j #q.x.y>p>b RET
;;
;; After expanding, positioned the cursor between first empty quotes.
;; The preview can help with tricky CSS precedence rules; e.g., C-j gives the same thing for: a>b+c>d   ==  a>(b+(c>d))
(setq emmet-move-cursor-between-quotes t) ;; E.g., C-j #q[name] RET
;;
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
;; (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
#+end_src

#+begin_details Notable HTML key bindings (including [[https://www.gnu.org/software/emacs/manual/html_node/emacs/HTML-Mode.html][built-ins]])
+ Wrap with Abbreviation / C-c C-c w :: Select a region, then enter an abbreviation.
  - For example, select the phrase ~Hello, World!~ then ~C-c C-c w q>b~ to place that phrase in a quote, and make it bold.
+ Go to Edit Point / C-M-{Leftarrow, Rightarrow} :: to move between editable-tags/empty-attributes. ([[https://docs.emmet.io/actions/go-to-edit-point/][Demo]])
+ C-c TAB :: Cheaply preview the HTML file by toggling visibility of tags.
+ C-c /, C-c C-e :: Insert a close tag for the innermost unterminated tag (sgml-close-tag). If called within a tag or a comment, close it instead of inserting a close tag.
+ C-c ? tag RET :: Display a description of the meaning of tag tag (sgml-tag-help). If the argument tag is empty, describe the tag at point. :fire:
+ C-c C-d :: Delete the tag at or after point, and delete the matching tag too (sgml-delete-tag). If the tag at or after point is an opening tag, delete the closing tag too; if it is a closing tag, delete the opening tag too.
+ C-c C-f/b :: More 'f'orward or 'b'ackward one tag element. ---Nice way to quicly check that your tags are balanced as you think they are.
+ C-c C-a :: Interactively insert attribute values for the current tag. :fire:
  - Super helpful when you don't remember the possible attributes of a tag, or their possible values.
    # - E.g., within ~<img />~ press ~C-c C-a~ then ~id~ then ~hola~ then ~RET~ then ~C-g~.
  - C-c C-t :: Interactively specify a tag and its attributes!
#+end_details

#+begin_details Notable Emmet Features & Examples

+ Example that includes Ids, classes, children, sibling selectors,
  {content}, 10 random lorem text, parenthesis for grouping; as well
  as attributes with and without values.
  #+begin_src html :tangle no
ParentTag#Id.Class1.Class2[Attribute1 Attribute2]>ChildTag{hiya there}>lorem10+(GrandChild1>GreatGrandChild11)+GrandChild2#Id2[attribute=value]
#+end_src

+  Nesting (>) can be 'undone' with "climb-up"(^):  ~a>b>c>d^^e~  ==  ~a>(b>c>d)+e~
+  Multiplication is repeated addition: ~X*3>Y~ == ~(X>Y)+(X>Y)+(X>Y)~
+  In general, ~loremN~ produces $N$ many random filler text. E.g., make a dummy list: =ul>li*3>lorem3=

Other notable snippets include
=a#neato.x.y.z, input[hola=value], img, p, table+, ul+, ol+=.

+ There are also [[https://docs.emmet.io/css-abbreviations/][CSS abbreviations]]; but that's a story for another time.
+ This [[https://docs.emmet.io/cheat-sheet/][cheat sheet]] has all the supported abbreviations, with expansions.


--------------------------------------------------------------------------------


+ ID and CLASS attributes: =div#page.section.main=
  - ~div~ tag name can be omitted when writing element starting from ID or CLASS:
    ~#content>.section~ is the same as ~div#content>div.section~.

+ Custom attributes: ~div[title], a[title="Hello world" rel], td[colspan=2]~

+ Element multiplication: ~li*5~ will output ~<li>~ tag five times.

+ Item numbering with the ~$~ character: ~li.item$*3~ will output ~<li>~ tag
  three times, replacing ~$~ character with item number.

+ Multiple ~$~ characters in a row are used as zero padding, i.e.: ~li.item$$$~ ‚Üí ~li.item001~

+ Abbreviation groups with unlimited nesting:
  ~div#page>(div#header>ul#nav>li*4>a)+(div#page>(h1>span)+p*2)+div#footer~
  - You can literally write a full document markup with just a single line.

+ Text support: ~p>{Click }+a{here}+{ to continue}~.


--------------------------------------------------------------------------------


Good tutorials:
+ [[https://jonchristopher.us/blog/the-art-of-zen-coding-bringing-snippets-to-a-new-level/][The Art of zen-coding: Bringing Snippets to a New Level - Jon Christopher]]
+ [[https://www.smashingmagazine.com/2009/11/zen-coding-a-new-way-to-write-html-code/][Zen Coding: A Speedy Way To Write HTML/CSS Code ‚Äî Smashing Magazine]]
+ [[https://www.smashingmagazine.com/2013/03/goodbye-zen-coding-hello-emmet/][Goodbye, Zen Coding. Hello, Emmet! ‚Äî Smashing Magazine]]

#+end_details

For more on writing HTML within Emacs, see this ~2min /yet very
informative/ [[https://www.youtube.com/watch?app=desktop&v=sBhQ2NIcrLQ&ab_channel=emacsrocks][video]] by /Emacs Rocks!/

Let's add a new snippet so that: ~angular C-j C-c C-v~ shows us an interactive web
application.
#+begin_src emacs-lisp
(cl-defun my/add-emmet-snippet (abbreviation expansion)
  "Add ABBREVIATION as a snippet in `emmet-mode' to be EXPANSION.

Both arguments are strings."
  (add-hook 'emmet-mode-hook
   ;; [Should this be added to ‚Äúemmet-snippets‚Äù variable instead?]
            `(lambda () (puthash ,abbreviation ,expansion emmet-tag-snippets-table))))


(setq emmet-mode-hook nil)

(my/add-emmet-snippet "vue"
"<!doctype html>
<html lang=\"en\">
    <head>
        <title>Salamun Alaykum, world!</title>
        <script src=\"https://unpkg.com/vue@3\"></script>
        <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" /> -->
        <style type=\"text/css\">
         input, #reply { color: darkcyan; font-size: 14pt }
        </style>
    </head>
    <body>
        <div id=\"Hola\">
            <h1>Number Guessing Game</h1>
            <input type=\"number\" v-model=\"guess\" style=\"width: 25%;\" v-bind:placeholder=`${prompt}`>
            <button v-on:click=\"go(guess)\">Learn Something!</button>
            <div id=\"reply\"> {{reply(guess)}} </div>
        </div>
        <!-- <script src=\"myscripts.js\"></script> -->
        <script type=\"text/javascript\">
         let myApp = Vue.createApp({
             data() {
                 return { guess: null
                        , prompt: \"Enter a guess between 0 and 100\"
                        , secret: Math.floor(Math.random() * 100)
                        }
             },
             methods: { reply(gs) { return gs == this.secret ? \"You win!\" : (gs < this.secret ? \"Too low\" : \"Too high\"); }
                      , go(number) { window.location.href = \"https://www.wolframalpha.com/input?i=\" + number }
                      }
         }).mount('#Hola')
        </script>
    </body>
</html>")

(my/add-emmet-snippet "angular"
"<!doctype html>
<html lang=\"en\" ng-app=\"Hola\">
  <head>
    <title>Salamun Alaykum, world!</title>
    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\"></script>
    <!-- <script src=\"myscripts.js\"></script> -->
    <script type=\"text/javascript\">
      angular.module(\"Hola\", [])
        .controller(\"prompt\",
           ($scope, $window) => {
              $scope.prompt = \"Enter a guess between 0 and 100\"
              $scope.secret = Math.floor(Math.random() * 100)
              $scope.reply  = gs => gs == $scope.secret ? \"You win!\" : (gs < $scope.secret ? \"Too low\" : \"Too high\")
              $scope.go = number => { $window.location.href = \"https://www.wolframalpha.com/input?i=\" + number }
          })
    </script>
    <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" /> -->
    <style type=\"text/css\">
       input, #reply { color: darkcyan; font-size: 14pt }
    </style>
  </head>
  <body>
    <div ng-controller=\"prompt\">
      <h1>Number Guessing Game</h1>
      <input type=\"number\" ng-model=\"guess\" style=\"width: 25%;\" placeholder=\"{{prompt}}\">
      <button ng-click=\"go(guess)\">Learn Something!</button>
      <div id=\"reply\"> {{reply(guess)}} </div>
    </div>
  </body>
</html>")
#+end_src

A non-blocking alternative to the built-in ~alert()~:
#+begin_src emacs-lisp
;; A way to show results of trying things out ---when not using a reactive framework.
(my/add-emmet-snippet "message"
"     // Append ‚Äútext‚Äù node to the end of tag with ‚Äúid‚Äù.
     // Example: <button onclick=\"message(\"myID\", \"Hello!\")\"> Speak! </button>
     function message(id, text = \"Hello, world\") {
         const tag = document.createElement(\"p\") // <p></p>
         const textNode = document.createTextNode(text)
         tag.appendChild(textNode); // <p>Hello, world</p>
         const element = document.getElementById(id);
         element.appendChild(tag);
     }")
#+end_src

A snippet for a form with (1) automatic alignment, and (2) submission handled by
local JavaScript.
#+begin_src emacs-lisp
(my/add-emmet-snippet "form"
        "<h1> <a href=\"https://www.quackit.com/css/grid/tutorial/form_layout_with_auto_placement.cfm\">
            Automatically aligned form items</a> </h1>

        <form name=\"hola\"  onsubmit=\"go(hola.elements);\">
            <label>Name</label>
            <input name=\"name\" type=\"text\" required/>

            <label>Comments</label>
            <textarea name=\"comments\" maxlength=\"500\"></textarea>

            <input type=\"submit\"/>
        </form>

        <!-- <script src=\"myscripts.js\"></script> -->
        <script>
         let go = form => { alert(`${form.name.value}: ‚Äú${form.comments.value}‚Äù`) }
        </script>

        <!-- <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" /> -->
        <style>
         form {
             /* We want the inputs&labels to be thought of as rows in a grid*/
             display: grid;
             grid-auto-flow: row;
             /* Each row has 2 columns. */
             grid-template-columns: [mylabels] auto [myinputs] 1fr;
             grid-gap: .8em;     /* Distance between form elements */
             background: beige;
             padding: 1.2em;
         }
         /* Let's attach column names to elements */
         form > label  {
             grid-column: mylabels;
             grid-row: auto;
         }
         form > input,
         form > textarea {
             grid-column: myinputs;
             grid-row: auto;
         }
         input, textarea { color: darkcyan; font-size: 14pt }
        </style>")
#+end_src

*** LSP for HTML + CSS
:PROPERTIES:
:CUSTOM_ID: LSP-for-HTML-CSS
:END:

Notes: I've tried [[https://emacs-lsp.github.io/lsp-mode/page/lsp-html/][LSP for HTML]] but I didn't find it provided much, and even
worse, it seemed to ignore the useful information I get from Flycheck!

+ When I accidentally duplicate Ids, or miss important tag attributes, Flycheck
  ~(C-c !)~ reminds of these things! :-)

+ This is also [[https://emacs-lsp.github.io/lsp-mode/page/lsp-emmet/][LSP for Emmet]], which let's you expand any text you write as if it
  were an emmet snippet /such that/ you can ~TAB~ to the various editable regions in
  the expansion to fill them out. E.g., ~ul>li*5 RET~ produces a yas-snippet which
  you TAB through to fill out.
  - If you don't want some text to be treated as a snippet, press ~C-g~.
  - As above, this ruins flycheck support and highlighting ---requiring ~web-mode~
    to get some highlighting.

However, [[https://emacs-lsp.github.io/lsp-mode/page/lsp-css/][LSP for CSS]] is indispensable!
+ It provides auto-completion for properties, and if you pause then a tool tip
  with useful explanations of properties. :fire:
+ Moreover, if you press ~ENTER~ on a completion candidate, then you get to select
  a possible value from another list!
+ When I mouse hover over a property, I get a 1-line tooltip describing the property.
+ /No need to remember which properties are possible, what they do, and their
  possible values!/ Just start typing and see what pops-up!

#+begin_src emacs-lisp :tangle no
M-x lsp-install-server RET css-ls
#+end_src

#+begin_src emacs-lisp
;; When I accidentally duplicate a property in a rule, please report that as an error.
(setq lsp-css-lint-duplicate-properties "error")

;; If I accidentally enter an unknown property (e.g., writing Canadian ‚Äúcolour‚Äù instead of American ‚Äúcolor‚Äù),
;; then I'll be notified with an error notice.
(setq lsp-css-lint-unknown-properties "error")


(use-package lsp-mode
  :hook  ;; Every programming mode should enter & start LSP, with which-key support
         (css-mode . lsp-mode) ;; Enter LSP mode
         (css-mode . lsp))      ;; Start LSP server
#+end_src

**** CSS Property Argument Information in the Echo Area
:PROPERTIES:
:CUSTOM_ID: CSS-Property-Argument-Information-in-the-Echo-Area
:END:

LSP for CSS shows me a tooltip with a description and the argument syntax of a
property; but that's only when entering a new property.  What if I'm updating a
property; or just browsing a property and want some information on the arguments
list? [[https://github.com/zenozeng/css-eldoc][css-eldoc]] to the rescue.
-  Eldoc-mode is a minor-mode which shows you, in the echo area, the argument
  list of the function call you are currently writing.

#+begin_src emacs-lisp
;; [USAGE] In a CSS file, place cursor anywhere after the colon (but before ‚Äò;‚Äô)
;; in ‚Äúcolumns: 0ch;‚Äù or in ‚Äúcolumns: ‚Äù and look at the echo area for how
;; arguments to this property should look like.
(use-package css-eldoc
  :init (progn (require 'css-eldoc) (turn-on-css-eldoc)))
#+end_src

#+begin_src emacs-lisp :tangle no
;; [Possibly useful snippet to keep around.]
;; Change priority of a server; useful when multiple servers are running for a buffer.
;; (setf (lsp--client-priority (gethash 'emmet-ls lsp-clients)) 4)
#+end_src

*** Show me HTML+CSS Changes /Live as I Type/!
:PROPERTIES:
:CUSTOM_ID: Show-me-HTML-CSS-Changes-Live-as-I-Type
:END:

#+begin_src emacs-lisp
(use-package impatient-mode)

(use-package web-mode
  :init (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))


;;     C-c C-v: Browse buffer within external browser.
;; C-u C-c C-v: Ensure impatient-mode is enabled for current buffer and browse it WITHIN Emacs.
;; [xwidget-webkit has some bugs; e.g., sometimes buttons that should redirect don't do anything.]
;; [The ‚ÄúC-u‚Äù option is useful when I want to ‚Äúsee‚Äù the resulting HTML change as I type; e.g., new content or styling.]
;; [Note the ‚Äúangular‚Äù snippet above works beautifully /within/ Emacs; use ‚Äúb/f‚Äù to move backward/forward in the browser.]
(bind-key "C-c C-v"
          (lambda (open-within-emacs) (interactive "P")
            (if (not open-within-emacs)
                (browse-url-of-buffer (current-buffer))
              (unless (process-status "httpd") (httpd-start))
              (unless impatient-mode (impatient-mode))
              (let ((browser (car (--filter (s-starts-with? "*xwidget" (buffer-name it)) (buffer-list))))
                    (file (buffer-name)))
                (when browser (switch-to-buffer browser) (let (kill-buffer-query-functions) (kill-buffer)))
                (split-window-below)
                (other-window -1)
                (xwidget-webkit-browse-url (concat "http://localhost:8080/imp/live/" file))
                (preview-it-mode -1) ;; Looks poor; and I don't need it when writing HTML.
                (other-window -1))))
          'web-mode-map)
#+end_src

#+begin_src emacs-lisp
(bind-key "M-q" #'sgml-pretty-print 'web-mode-map)
#+end_src

*** VueJS
:PROPERTIES:
:CUSTOM_ID: VueJS
:END:

#+begin_src emacs-lisp
(use-package vue-mode)
#+end_src
*** JSON
:PROPERTIES:
:CUSTOM_ID: JSON
:END:

Since web apps tend to be RESTful, payloads are [[https://www.json.org/json-en.html][JSON]].  To use the JSON, we need
to tediously find paths to particular fields; let's do so with /automatically,
without error./.

When we open a JSON file, we are promoted to install an LSP server, which
- Checks that the file is valid JSON.
- Shows the full path to the cursor's location, at the top of the window.

#+begin_src emacs-lisp
(use-package json-mode   :defer nil)
#+end_src

Useful bindings are in the docstring of TODO. doc.json-mode.
+ kbd:C-c_C-f :: Pretty print buffer
+ kbd:C-c_C-p :: Copy path to field at point

Note that there is also TODO. doc.json-pretty-print-buffer; which can be used to
uglify a JSON buffer if a prefix is provided.

Let's make a hydra for JSON,
#+begin_src emacs-lisp
(my/defhydra nil "JSON Browser" gamepad
  :Buffer
  ("p" #'json-mode-show-path "Copy path to field at point")
  ;; ("f" #'json-mode-beautify "Format Buffer")
  ;; ("m"  (lambda () (interactive) (json-pretty-print-buffer t)) "Minify/ugligy buffer")
  ("t"  (lambda  () (interactive)
          (if my/json-hydra/pretty-printed?
              (json-pretty-print-buffer t)
            (json-mode-beautify (point-min) (point-max)))
          (setq my/json-hydra/pretty-printed? (not my/json-hydra/pretty-printed?)))
   "Toggle format/uglify of buffer"
   :toggle (progn (defvar my/json-hydra/pretty-printed? nil)
                  my/json-hydra/pretty-printed?)))

;; TODO: (bind-key "C-c SPC" 'my/hydra/JSON\ Browser/body 'json-mode-map)
;; NOTE: ‚ÄúC-x SPC‚Äù is for rectangle editing.
#+end_src

Interesting, but not for me: [[https://github.com/taku0/json-par/][json-par: Emacs minor mode for structural editing
of JSON]].

Also: [[https://transform.tools/json-to-jsdoc][JSON to X]] is a website to convert JSON to other formats, such as in Rust
or as JSDoc type annotations.
*** Turbolog: What's the value of this expression?              :JavaScript:
:PROPERTIES:
:CUSTOM_ID: Turbolog-What's-the-value-of-this-expression
:END:
With [[https://github.com/Artawower/turbo-log][turbo-log]], I can select an expression then press [[kbd:C-x l l]] to have
that expression be part of a console log message, in the next line, that also
mentions the line number and buffer's name. I can toggle all these inserted
messages to be comments with kbd:C-x_l_c and kbd:C-x_l_u, and when I'm done
debugging I can quickly get rid of all of them with kbd:C-x_l_d.

( Before TurboLog, I used a snippet bound to kbd:l_l that inserted
#+begin_src js :tangle no
console.log("%c ******* LOOK HERE *******", "color: green; font-weight: bold;");
console.log({ List the variables here whose values you want to log });
#+end_src
)

**** COMMENT TODO: Move some of the stuff below to the TurboLog Github repo. :Does_not_export_to_HTML:
:PROPERTIES:
:CUSTOM_ID: COMMENT-TODO-Move-some-of-the-stuff-below-to-the-TurboLog-Github-repo
:END:

#+begin_src emacs-lisp
(unless noninteractive

(setq turbo-log--prefix "%c ******* LOOK HERE *******")
(defun length> (x y) (> (length x) y))
(defun length= (x y) (= (length x) y))
(ignore-error (use-package turbo-log
  :defer nil
  :quelpa (turbo-log :fetcher github :repo "artawower/turbo-log.el")
  :config (setq turbo-console--prefix "‚ú∞")))
(bind-key* "C-x l" #'my/turbo-log-hydra/body)
(defhydra my/turbo-log-hydra (:color blue :hint nil)
  ("l" turbo-log-print "Log selected expression" :column "TurboLog: Insert meaningful log message for selected expressions")
  ("c" turbo-log-comment-all-logs "Comment out all logs")
  ("u" turbo-log-uncomment-all-logs "Uncomment out all logs")
  ("d" turbo-log-delete-all-logs "Delete all TurboLog logs")
  ("q" nil "Cancel"))


(defun turbo-log--ecmascript-print (current-line-number formatted-selected-text prev-line-text multiple-logger-p)
  "Console log for ecmascript, js/ts modes.
CURRENT-LINE-NUMBER - line number under cursor
FORMATTED-SELECTED-TEXT - formatted text without space at start position
PREV-LINE-TEXT - text from previous line
MULTIPLE-LOGGER-P - should guess list of available loggers?"

  (let* ((is-empty-body (turbo-log--ecmascript-empty-body-p (turbo-log--get-line-text current-line-number)))
         (insert-line-number (turbo-log--ecmascript-find-insert-pos current-line-number prev-line-text))
         (meta-info (turbo-log--format-meta-info insert-line-number))
         (normalized-code (turbo-log--ecmascript-normilize-code formatted-selected-text))
         (turbo-log--message
          (concat
           (turbo-log--choose-logger turbo-log--ecmascript-loggers multiple-logger-p)
           "('"
           meta-info
           formatted-selected-text ": ', "
           ;; HACK this is my change: Does the TurboLog prefix have a %c console styling marker? If so, use it.
           (if (s-contains? "%c" meta-info) "'color: green; font-weight: bold;', " "")
           normalized-code ")"
           (if (plist-get turbo-log--ecmascript-configs :include-semicolon) ";"))))

    (if is-empty-body
        (progn
          (turbo-log--goto-line (- current-line-number 1))
          (beginning-of-line)
          (search-forward-regexp "}[[:blank:]]*")
          (replace-match "")
          (turbo-log--insert-with-indent current-line-number turbo-log--message)
          (turbo-log--insert-with-indent (+ current-line-number 1) "}")
          (indent-according-to-mode))
      (turbo-log--insert-with-indent insert-line-number turbo-log--message))))

)
#+end_src

**** TODO ll-debug
:PROPERTIES:
:CUSTOM_ID: ll-debug
:END:
# ~ Useful when no debugger setup

[[https://melpa.org/#/ll-debug][ll-debug.el]] provides commands to support a low level debug style.
It features quick insertion of various debug output statements and
improved functions for commenting and uncommenting chunks of code.

#+begin_quote
I don't use debuggers very much. I know they can be a big help in some
situations and I tried some of them, but I find it almost always more
direct/convenient/enlightening to put a quick 'printf' into a critical area to
see what is happening than to fire up a big clumsy extra program where it takes
me ages just to step through to the interesting point. In order to avoid
repeated typing of 'printf("I AM HERE\n");' and similar stuff, I created
`ll-debug-insert'. It inserts a statement into your sourcecode that will display
a debug message. It generates unique messages on each invocation (the message
consists of a big fat DEBUG together with a counter and the current filename).

---ll-debug.el
#+end_quote

#+begin_src emacs-lisp
;; C-u C-v C-d ‚áí Log a message, printing values of expressions.
;; E.g., in JS this prints, console.log("DEBUG-5-del.js","  1 + 3:",1 + 3);
;; Note ‚Äú5‚Äù is the fifth debug message, and ‚Äúdel.js‚Äù is the name of the buffer.
;; Works with Rust, Java, Lisps, JS, TS, Clojure, C/C++, Ruby, Matlab/Octave, Shell, Perl.
(use-package ll-debug
  :defer nil
  :config
  (bind-key "C-x l" (lambda () (interactive) (ll-debug-insert 1)) #'prog-mode-map))

;; See variable `ll-debug-statement-alist' if you want to know which
;; modes are currently supported by ll-debug. You can add new modes
;; with `ll-debug-register-mode'.
;;
;; If you want to get rid of the debug messages, use
;; `ll-debug-revert'. It finds and removes the lines with the debug
;; output statements, asking for confirmation before it removes
;; anything.
#+end_src

*** ¬† ~M-x jsdoc~: Insert JSDocs with minimal type inference, useful with LSP-mode
:PROPERTIES:
:CUSTOM_ID: COMMENT-M-x-jsdoc-Insert-JSDocs-with-minimal-type-inference-useful-with-LSP-mode
:END:

Let's make use of JSDocs for functions ---since then LSP will show us the types
and function description in a neato pop-up to the side.  [[https://github.com/isamert/jsdoc.el][jsdoc.el]] inserts JSDoc
function comments/typedefs easily; it also tries to infer types by itself while
doing that.
#+begin_src emacs-lisp
;; [Minimal Type Inference] When default values are provided, then we can infer
;; the type of the arguments.
;;
;; Use: Run ‚ÄúM-x jsdoc‚Äù on a JS function.
;;
(use-package jsdoc
    :defer nil
  :quelpa (jsdoc
           :fetcher github
           :repo "isamert/jsdoc.el")
  :config
   (use-package tree-sitter)        ;; Required dependencies
   (use-package tree-sitter-langs)
  :hook (js-mode . tree-sitter-mode))
#+end_src

*** Cucumber
:PROPERTIES:
:CUSTOM_ID: Cucumber
:END:

#+begin_src emacs-lisp
;; Emacs mode for editing Cucumber plain text stories
;; ‚Äú.feature‚Äù files now open up with nice colouring.
(use-package feature-mode)
;;
;; C-c ,g	Go to step-definition under point (requires ruby_parser gem >= 3.14.2)
;;
;; TODO: Ruby specific; but the source could be edited to work for JS.
;; (use-package cucumber-goto-step)
#+end_src

Other packages to consider looking into include:
- [[https://github.com/scottaj/mocha.el][mocha.el: Emacs mode for running mocha tests]]
- [[https://github.com/Emiller88/emacs-jest][emacs-jest: A package to run jest inside emacs]]

*** JavaScript                                     :Does_not_work_with_flow:
:PROPERTIES:
:CUSTOM_ID: COMMENT-JavaScript
:END:

Let's get a JavaScript refactoring library for emacs:

#+begin_src emacs-lisp :tangle no :tangle work_secrets.el
;; (use-package js2-mode)

(use-package js2-refactor ;; Does not work with flow.js :'(
  :hook (js-mode . js2-refactor-mode)
  :config (js2r-add-keybindings-with-prefix "s-j"))

;; To be aware of https://github.com/azer/npm.el
;; Create and rule NPM packages from Emacs
#+end_src

Using ~‚åò j~ then one of the following...

| ~lt~ | Adds a console.log() statement for what is at point (or region).               |
|    | With a prefix argument, use JSON pretty-printing.                              |
| ~dt~ | Adds a debug() statement for what is at point (or region).                     |
| ~k~  | is kill: Kills to the end of the line, but does not cross semantic boundaries. |
|----+--------------------------------------------------------------------------------|
| ~ee~ | Make an inline list/object/function/funcall be on multiple lines               |
| ~cc~ | Opposite of ee                                                                 |
|----+--------------------------------------------------------------------------------|
| ~tf~ | Toggle between ~function name() {}~ and ~var name = function () {}~                |
| ~ta~ | Toggle between function expression to arrow function                           |
| ~ts~ | Toggle between an async and a regular function.                                |
|----+--------------------------------------------------------------------------------|
| ~ef~ | Extract the currently selected expression into a top level function            |
| ~em~ | Like ef, but it's a method in the parent/ambient class                         |
| ~ev~ | Takes a marked expression and replaces it with a var                           |
| ~el~ | Similar to extract-var but uses a let-statement                                |
| ~ec~ | Similar to extract-var but uses a const-statement                              |
| ~iv~ | Opposite of iv: Replaces all instances of a variable with its initial value    |
| ~vt~ | Changes local var a to be this.a instead, and all lexical uses.                |
| ~rv~ | Renames the variable on point and all occurrences in its lexical scope         |
|----+--------------------------------------------------------------------------------|
| ~wi~ | Wraps the entire buffer in an immediately invoked function expression          |
| ~3i~ | Converts ternary operator to if-statement; nice!                               |
| ~ss~ | Split a string, at point, into a catenation of strings                         |
| ~st~ | Convert a string into a `template`.                                            |

** TODO Working with PDFs                                         :Disabled:
*** TODO Open PDFs in Emacs
#+begin_src emacs-lisp
    ;; In Org-mode, clicking on PDF should open it in Emacs
    ;; Example:          [[~/Desktop/stuff-I'm-learning.pdf::12]]       ;; Opens the pdf to page 12
    ;; Another Example:  docview:~/Desktop/stuff-I'm-learning.pdf::12
  (ignore-errors (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs)))

    ;; Required code to make the above links work as expected.
    ;; Source: https://www.reddit.com/r/emacs/comments/re0dx8/how_do_you_link_a_specific_pdf_page_in_org_mode/
    (defun my-org-docview-open-hack (orig-func &rest args)
      (let* ((link (car args)) path page)
        (string-match "\\(.*?\\)\\(?:::\\([0-9]+\\)\\)?$" link)
        (setq path (match-string 1 link))
        (setq page (and (match-beginning 2)
                        (string-to-number (match-string 2 link))))
        (org-open-file path 1)
        (when page
          (cond
           ((eq major-mode 'pdf-view-mode)
            (pdf-view-goto-page page))
           (t
            (doc-view-goto-page page))))))
    (advice-add 'org-docview-open :around #'my-org-docview-open-hack)

    ;; Alternatively, there's a dedicated package for this
    ;; https://github.com/fuxialexander/org-pdftools/tree/967f48fb5038bba32915ee9da8dc4e8b10ba3376
#+end_src

*** TODO The evils of this world
:PROPERTIES:
:CUSTOM_ID: The-evils-of-this-world
:END:
#+begin_src emacs-lisp :tangle no
;; ‚ÄúPDF‚Äù stands for Portable Document Format, since you should be able to open
;; it anywhere. Disgustingly, fillable PDF's made with Adobe can only be
;; smoothly opened & printed in Adobe ---Chrome can open them, but not print
;; them. Unfortunately, various government & insurance forms are only provided in
;; this format.
(system-packages-ensure "adobe-acrobat-reader")
#+end_src
** TODO Background audio I want to listen to as I work
#+begin_src emacs-lisp
(use-package empv )

;; Then, M-x empv-play https://invidious.fdn.fr/watch?v=hlTqCmpP5eo, to listen to Dua Ifitiah in the background
;; Or: M-x empv-play https://invidious.fdn.fr/watch?v=9m9yE7qtq5w
;; lol maybe make a hydra(ie playlist) of things I commonly listen to in the background while working.
;; Require: brew install mpv
;; See also:
;; Maybe better? https://github.com/spiderbit/ytdious/tree/941460b51e43ef6764e15e2b9c4af54c3e56115f
;; Maybe better? https://melpa.org/#/yeetube
;; https://github.com/maximus12793/helm-youtube/tree/e7272f1648c7fa836ea5ac1a61770b4931ab4709
;; https://github.com/isamert/empv.el/tree/1721a581d68f211a7f0104554858ea2afb1723ff
;;
(setq empv-invidious-instance "https://invidious.fdn.fr.com")
#+end_src
** TODO Having a workspace manager in Emacs                       :Disabled:
:PROPERTIES:
:CUSTOM_ID: Having-a-workspace-manager-in-Emacs
:END:

I've loved using XMonad as a window tiling manager.  I've enjoyed the ability to
segregate my tasks according to what ‚Äòproject‚Äô I'm working on; such as research,
marking, Emacs play, etc.  With [[https://github.com/nex3/perspective-el][perspective]], I can do the same thing :-)

That is, I can have a million buffers, but only those that belong to a workspace
will be visible when I'm switching between buffers, for example.
( The awesome-tab and centaur-tab, mentioned elsewhere here, can be used to
achieve the same thing by ‚Äògrouping buffers together‚Äô. )

#+begin_src emacs-lisp :tangle no
(use-package perspective

  :config ;; Activate it.
          (persp-mode)
          ;; In the modeline, tell me which workspace I'm in.
          (persp-turn-on-modestring))
#+END_SRC

All commands are prefixed by ~C-x x~; main commands:
+ ~s, n/‚Üí, p/‚Üê~ :: ‚ÄòS‚Äôelect a workspace to go to or create it, or go to ‚Äòn‚Äôext
  one, or go to ‚Äòp‚Äôrevious one.
+ ~c~ :: Query a perspective to kill.
+ ~r~ :: Rename a perspective.
+ ~A~ :: Add buffer to current perspective & remove it from all others.

As always, since we've installed ~which-key~, it suffices to press ~C-x x~ then look
at the resulting menu üòÉ

** TODO ¬† =README= ---From =init.org= to =init.el=
:PROPERTIES:
:CUSTOM_ID: README-From-init-org-to-init-el
:END:

Rather than manually extracting the Lisp code from this literate document each
time we alter it, let's instead add a ‚Äòhook‚Äô ---a method that is invoked on a
particular event, in this case when we save the file.  More precisely, in this
case, ~C-x C-s~ is a normal save whereas ~C-u C-x C-s~ is a save after forming
~init.elc~ and ~README.md~.

**** The =my/make-init-el-and-README= function
:PROPERTIES:
:CUSTOM_ID: The-my-make-init-el-and-README-function
:END:

We ‚Äòhook on‚Äô the following function to the usual save method
that is associated with this file only.

# +name: enable making init and readme
#+name: startup-code
#+begin_src emacs-lisp :tangle no :eval never-export
  (defun my/make-init-el-and-README ()
    "Tangle an el and a github README from my init.org."
    (interactive "P") ;; Places value of universal argument into: current-prefix-arg
    (when current-prefix-arg
      (let* ((time      (current-time))
             (_date     (format-time-string "_%Y-%m-%d"))
             (.emacs    "~/.emacs")
             (.emacs.el "~/.emacs.el"))
        ;; Make README.org
        (save-excursion
          (org-babel-goto-named-src-block "make-readme") ;; See next subsubsection.
          (org-babel-execute-src-block))

        ;; remove any other initialisation file candidates
        (ignore-errors
          (f-move .emacs    (concat .emacs _date))
          (f-move .emacs.el (concat .emacs.el _date)))

        ;; Make init.el
        (org-babel-tangle)
        ;; (byte-compile-file "~/.emacs.d/init.el")
        (load-file "~/.emacs.d/init.el")

        ;; Acknowledgement
        (message "Tangled, compiled, and loaded init.el; and made README.md ‚Ä¶ %.06f seconds"
                 (float-time (time-since time))))))

(add-hook 'after-save-hook 'my/make-init-el-and-README nil 'local-to-this-file-please)
#+end_src

**** The Org-block named =make-readme=
:PROPERTIES:
:CUSTOM_ID: The-Org-block-named-make-readme
:END:

Where the following block has ~#+NAME: make-readme~ before it.  This source block
generates the ~README~ for the associated Github repository.
#+NAME: make-readme
#+begin_src emacs-lisp :tangle no :tangle no :export_never t
(save-buffer)
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.org

     # Logos and birthday present painting
     ,#+HTML:" (s-collapse-whitespace (concat
    " <p align=\"center\">
       <img src=\"images/emacs-logo.png\" width=150 height=150/>
     </p>

     <p align=\"center\">
        <a href=\"https://www.gnu.org/software/emacs/\">
             <img src=\"https://img.shields.io/badge/GNU%20Emacs-" emacs-version "-b48ead.svg?style=plastic\"/></a>
        <a href=\"https://orgmode.org/\"><img src=\"https://img.shields.io/badge/org--mode-" org-version "-489a9f.svg?style=plastic\"/></a>
     </p>

     <p align=\"center\">
       <img src=\"images/emacs-birthday-present.png\" width=250 height=250/>
     </p>
    "))

   ;; My Literate Setup; need the empty new lines for the export
   "

     I enjoy reading others' /literate/ configuration files and
     incorporating what I learn into my own. The result is a
     sufficiently well-documented and accessible read that yields
     a stylish and functional system (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

     This ~README.org~ has been automatically generated from my
     configuration and its contents below are accessible
     in (outdated) blog format, with /colour/, or as colourful
     PDF, [[https://alhassy.github.io/init/][here]]. Enjoy
     :smile:

     ,#+INCLUDE: init.org
    ")

    ;; No code execution on export
    ;; ‚ü™ For a particular block, we use ‚Äú:eval never-export‚Äù. ‚ü´
    (let ((org-export-use-babel nil))
      (org-mode)
      (org-org-export-to-org)))
#+end_src
Alternatively, evaluate the above source block with ~C-c C-c~ to produce a ~README~
file.

For the ‚Äòbadges‚Äô, see https://shields.io/.  The syntax above is structured:
#+begin_example org
https://img.shields.io/badge/<LABEL>-<MESSAGE>-<COLOR>.svg
#+end_example

**** ‚ÄòTable of Contents‚Äô for Org vs. Github
:PROPERTIES:
:CUSTOM_ID: Table-of-Contents-for-Org-vs-Github
:END:

The above mentioned package [[https://github.com/snosov1/toc-org][toc-org]], which creates an up-to-date table of
contents in an org file, at any heading tagged ~:TOC:~.  It's useful primarily for
README files on Github. There is also [[https://github.com/alphapapa/org-make-toc][org-make-toc]], which is more flexible: The
former provides only a top-level TOC; whereas this package allows TOCs at the
sibling level, say, to produce a TOC of only the subsections of a particular
heading, and other TOC features. Unlike toc-org, org-make-toc uses property drawers
to designate TOC matter.
#+begin_src emacs-lisp :tangle no
(use-package toc-org
  ;; Automatically update toc when saving an Org file.
  :hook (org-mode . toc-org-mode)
  ;; Use both ‚Äú:ignore_N:‚Äù and ":export_N:‚Äù to exlude headings from the TOC.
  :custom (toc-org-noexport-regexp
           "\\(^*+\\)\s+.*:\\(ignore\\|noexport\\)\\([@_][0-9]\\)?:\\($\\|[^ ]*?:$\\)"))
#+END_SRC

However, [[https://github.com/snosov1/toc-org/issues/54#issuecomment-363710561][toc-org produces broken links for numbered sections]].
That is, if we use =#+OPTIONS: num:t= then a section, say
~** =~/.emacs= vs. =init.org=~ as the first subheading of the third
heading, then it renders with the text preceeded by =3.1=.
On the left-most part of the heading, Github provides a a link option;
clicking provides a link to this exact location in the README,
changing the current URL to something like
=https://github.com/alhassy/emacs.d#31-emacs-vs-initorg=.
Now, toc-org produces Github-style anchors from Org headings,
but does not account for numbers, and so gives us
=https://github.com/alhassy/emacs.d#emacs-vs-initorg=, which is
so close but missing the translated number, ~31~.

I've experimented with using toc-org links using org-style, instead of the
default Github style, but it seems that the org-style completely breaks
rendering the resulting readme.
Likewise, [[https://github.com/snosov1/toc-org/issues/3][it seems]] that headings that are links break the TOC link; whence
my section on the Reveal slide-deck system has a broken link to it.
Perhaps org-make-toc solves these issues ---something to look into.
# TODO: MA: Does org-make-toc solve this issues?

I'm not sure how I feel about actually having the Github-serving TOC in my
source file. It's nice to have around, from an essay-perspecive, but it breaks
HTML export since its links are /not/ well-behaved; e.g., ~:ignore:~-ed headlines
appear in the toc, but do not link to any visible heading in the HTML; likewise,
headings with URLS in their names break. As such, below I've developed a way to
erase it altogether ---alternatively, one could mark the toc as ~:noexport:~, but
this would then, in my current approach, not result in a toc in the resulting
README.
#+begin_src emacs-lisp :tangle no
(cl-defun my/org-replace-tree-contents (heading &key (with "") (offset 0))
  "Replace the contents of org tree HEADING with WITH, starting at OFFSET.

Clear a subtree leaving first 3 lines untouched  ‚áê  :offset 3
Deleting a tree & its contents                   ‚áê  :offset -1, or any negative number.
Do nothing to a tree of 123456789 lines          ‚áê  :offset 123456789

Precondition: offset < most-positive-fixnum; else we wrap to a negative number."
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (re-search-forward (format "^\\*+ %s" (regexp-quote heading)))
    ;; To avoid ‚Äòforward-line‚Äô from spilling onto other trees.
    (org-narrow-to-subtree)
    (org-mark-subtree)
    ;; The 1+ is to avoid the heading.
    (dotimes (_ (1+ offset)) (forward-line))
    (delete-region (region-beginning) (region-end))
    (insert with)
    (widen)))

;; Erase :TOC: body ---provided we're using toc-org.
;; (my/org-replace-tree-contents "Table of Contents")
#+END_SRC
**** Alternate approaches to generating a README
:PROPERTIES:
:CUSTOM_ID: Alternate-approaches-to-generating-a-README
:END:

Github supports several markup languages, one of which is Org-mode.
  - It seems that Github uses [[https://github.com/bdewey/org-ruby][org-ruby]] to convert org-mode to html.
  - [[https://github.com/novoid/github-orgmode-tests][Here]] is a repo demonstrating how Github interprets Org-mode files.
  - org-ruby supports inline ~#+HTML~ but [[https://github.com/wallyqs/org-ruby/issues/51][not html blocks]].

It seems coloured HTML does not render well:
#+BEGIN_example emacs-lisp
(org-html-export-to-html)
(shell-command "mv README.html README.md")
#+END_example

[[https://orgmode.org/manual/JavaScript-support.html][JavaScript supported display of web pages]] with:
#+BEGIN_example org
#+INFOJS_OPT: view:info toc:t buttons:t
#+END_example
This looks nice for standalone pages, but doesn't incorporate nicely with github
README.org.

Usually, Github readme files are in markdown, which we may obtain from an Org
file with =M-x org-md-export-to-markdown=.

- [ ] By default, this approach results in grey-coloured source blocks ---eek!

- [X] It allows strategic placement of a table of contents.

      Declare ~#+options: toc:nil~ at the top of the Org file, then have =#+TOC:
  headlines 2= in a strategic position for a table of contents, say after a brief
  explanation of what the readme is for.

- [X] It allows us to preview the readme locally before comitting, using [[https://github.com/joeyespo/grip][grip]].


   #+begin_src emacs-lisp :tangle no :tangle no
   ;; grip looks for README.md
   (system-packages-ensure "grip")
   ;; Next: (async-shell-command "cd ~/.emacs.d/; grip")
   #+END_SRC

   We can approximate this behaviour for the other approaches:
    1. Export to markdown.
    2. =COMMENT=-out any =:TOC:=-tagged sections ---their links are not valid
       markdown links, since they don't refer to any markdown labels.
    3. Rename the exported file to =README.md=.
    4. Run ~grip~.
** TODO Org-mode's ~<ùí≥~ Block Expansions
:PROPERTIES:
:CUSTOM_ID: Org-mode's-ùí≥-Block-Expansions
:END:
#+begin_quote
#+end_quote
In org-mode we type ~<X TAB~ to obtain environment templates, such as ~<s~ for
source blocks or ~<q~ for quote blocks.  It seems recent [[https://orgmode.org/Changes.html#org1b5e967][changes]] to the org-mode
structure template expansion necessitate explicitly loading ~org-tempo~.
#+begin_src emacs-lisp :tangle no
(require 'org-tempo)
#+end_src

To insert source blocks with the assistance of a pop-up: ~C-c C-v d~ ;-)
Perhaps more usefully, invoking within a source block splits it up into two
separate blocks! Moreover, if invoked on a selected region, it puts the region
into a new code block! Wow!

+ ~C-c C-,~ refers to ~org-insert-structure-template~, which provides non-source
  blocks, such as quote ~<q~, comment ~<C~, center ~<c~, notes ~<n~, examples ~<e~, and ~<l~
  and ~<h~ and ~<a~ for LaTeX and HTML and ASCII export blocks.
  - ~<X~ allows you to obtain the org-block assigned to shortcut ~X~.
  - The contents of comment blocks are ignored upon export.
+ ~C-c C-v C-d~ and ~C-c C-v d~ refer to the ~org-babel-demarcate-block~, which
  provides /source/ blocks.

| We shall improve upon this system below using snippets. |
E.g., ~s_em TAB~ to obtain an org-src block marked with ~emacs-lisp~ as the
language.  This saves us a few key strokes.

*** COMMENT TODO Demoing Dot Graphs
:PROPERTIES:
:CUSTOM_ID: TODO-Demoing-Dot-Graphs
:END:

# Graphviz: Press <g-TAB to obtain a minimal editable example.
 #+BEGIN_SRC dot :file simple_markov.png :cmdline -Kdot -Tpng :results replace
 digraph {
      node [color=black,fillcolor=white,shape=rectangle,style=filled,fontname="Helvetica"];
      A[label="Hello"];
    A -> D;
    A -> B;
    D -> C;
    B -> C;
    C -> C;
  }
 #+END_SRC

 #+RESULTS:
 [[file:simple_markov.png]]

** TODO Using Emacs in any text area on my OS                     :Disabled:
:PROPERTIES:
:CUSTOM_ID: Using-Emacs-in-any-text-area-on-my-OS
:END:

#+begin_center
‚ü® I was a bit too Emacs-happy at one-point; this' cool, but I rarely use it. ‚ü©
#+end_center

Using the [[https://github.com/zachcurry/emacs-anywhere/#usage][Emacs-Anywhere]] tool, I can press ~Cmd Shift e~ to have an Emacs frame
appear, produce text with Emacs editing capabilities, then ~C-x 5 0~ to have the
resulting text dumped into the text area I was working in.

This way I can use Emacs literally anywhere for textual input!

For my Mac OSX:
#+begin_src emacs-lisp :tangle no :tangle no
(shell-command "curl -fsSL https://raw.github.com/zachcurry/emacs-anywhere/master/install | bash")

(server-start)
#+END_SRC

The tools that use emacs-anywhere ---such as my web browser--- and emacs-anywhere
itself need to be given sufficient OS permissions:
#+begin_example org
System Preferences ‚Üí Security & Privacy ‚Üí Accessibility
#+end_example
Then check the emacs-anywhere box from the following gui and provide a keyboard shortcut:
#+begin_example org
System Preferences ‚Üí Keyboard ‚Üí Shortcuts ‚Üí Services
#+end_example

(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

I always want to be in Org-mode and input unicode:
#+BEGIN_SRC elisp :tangle no
(add-hook 'ea-popup-hook
  (lambda (app-name window-title x y w h)
    (org-mode)
    (set-input-method "Agda")))
#+END_SRC

** TODO Reload buffer with ~f5~
:PROPERTIES:
:CUSTOM_ID: Reload-buffer-with-f5
:END:

I do this so often it's not even funny.
#+begin_src emacs-lisp :tangle no
(global-set-key [f5] '(lambda () (interactive) (revert-buffer nil t nil)))
#+END_SRC

In Mac OS, one uses ~Cmd-r~ to reload a page and Emacs binds buffer reversion to ~Cmd-u~
--in Emacs, Mac's ~Cmd~ is referred to as the ‚Äòsuper key‚Äô and denoted ~s~.

Moreover, since I use Org-mode to generate code blocks and occasionally
inspect them, it would be nice if they automatically reverted when they
were regenerated --Emacs should also prompt me if I make any changes!

#+begin_src emacs-lisp :tangle no
;; Auto update buffers that change on disk.
;; Will be prompted if there are changes that could be lost.
(global-auto-revert-mode 1)
;; Auto refreshes every 2 seconds. Don‚Äôt forget to refresh the version control status as well.
(setq auto-revert-interval 2
      auto-revert-check-vc-info t
      global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)
#+end_src

** TODO Kill to start of line
:PROPERTIES:
:CUSTOM_ID: Kill-to-start-of-line
:END:
Dual to ~C-k~,
#+begin_src emacs-lisp :tangle no
;; M-k kills to the left
(global-set-key "\M-k" '(lambda () (interactive) (kill-line 0)) )
#+END_SRC
** TODO Killing buffers & windows: ~C-x k~ has a family
:PROPERTIES:
:CUSTOM_ID: Killing-buffers-windows-C-x-k-has-a-family
:END:

Let's extend the standard ~C-x k~ with prefix support, so that we can invoke
variations: Kill /this/ buffer, kill /other/ buffer, or kill /all other/ buffers.

By default ~C-x k~ prompts to select which buffer should be selected. I almost
always want to kill the current buffer, so let's not waste time making such a
tedious decision. Moreover, if I've killed a buffer, I usually also don't want
the residual window, so let's get rid of it.
#+begin_src emacs-lisp :tangle no
(global-set-key (kbd "C-x k")
  (lambda (&optional prefix)
"C-x k     ‚áí Kill current buffer & window
C-u C-x k ‚áí Kill OTHER window and its buffer
C-u C-u C-x C-k ‚áí Kill all other buffers and windows

Prompt only if there are unsaved changes."
     (interactive "P")
     (pcase (or (car prefix) 0)
       ;; C-x k     ‚áí Kill current buffer & window
       (0  (kill-this-buffer)
           (unless (one-window-p) (delete-window)))
       ;; C-u C-x k ‚áí Kill OTHER window and its buffer
       (4  (other-window 1)
           (kill-this-buffer)
           (unless (one-window-p) (delete-window)))
       ;; C-u C-u C-x C-k ‚áí Kill all other buffers and windows
       (16   (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
             (delete-other-windows)))))
#+end_src

The incantation ~C-u C-x k~ will reduce the noise of all the documentation buffers
I tend to consult.

** TODO Obtaining Values of ~#+KEYWORD~ Annotations
:PROPERTIES:
:CUSTOM_ID: Obtaining-Values-of-KEYWORD-Annotations
:END:

Org-mode settings are, for the most part, in the form ~#+KEYWORD: VALUE~. Of notable interest
are the ~TITLE~ and ~NAME~ keywords. We use the following ~org-keywords~ function to obtain
the values of arbitrary ~#+THIS : THAT~ pairs, which may not necessarily be supported by native
Org-mode --we do so for the case, for example, of the ~CATEGORIES~ and ~IMAGE~ tags associated with an article.

# Parse org buffer as an elisp structure: https://emacs.stackexchange.com/questions/2869/turn-a-list-or-data-structure-into-an-org-document#
#+begin_src emacs-lisp :tangle no
;; Src: http://kitchingroup.cheme.cmu.edu/blog/2013/05/05/Getting-keyword-options-in-org-files/
(defun org-keywords ()
  "Parse the buffer and return a cons list of (property . value) from lines like: #+PROPERTY: value"
  (org-element-map (org-element-parse-buffer 'element) 'keyword
                   (lambda (keyword) (cons (org-element-property :key keyword)
                                           (org-element-property :value keyword)))))

(defun org-keyword (KEYWORD)
  "Get the value of a KEYWORD in the form of #+KEYWORD: value"
  (cdr (assoc KEYWORD (org-keywords))))
#+END_SRC

Note that capitalisation in a ‚Äù#+KeyWord‚Äù is irrelevant.

See [[https://orgmode.org/manual/Org-syntax.html][here]] on how to see the abstract syntax tree of an org file
and how to manipulate it.

** TODO Publishing articles to my personal blog
:PROPERTIES:
:CUSTOM_ID: Publishing-articles-to-my-personal-blog
:END:

I try to [[https://alhassy.github.io/][blog]] occasionally, so here's a helpful function to quickly
publish the current article to my blog.
#+begin_src emacs-lisp
(define-key global-map "\C-cb" 'my/publish-to-blog)

(cl-defun my/publish-to-blog (&optional (draft nil) (local nil))
  "
  Using ‚ÄòAlBasmala‚Äô setup to publish current article to my blog.
  Details of AlBasmala can be found here:
  https://alhassy.github.io/AlBasmala/

  Locally: ~/alhassy.github.io/content/AlBasmala.org

  A ‚Äòdraft‚Äô will be produced in about ~7 seconds, but does not re-produce
  a PDF and the article has a draft marker near the top. Otherwise,
  it will generally take ~30 seconds due to PDF production, which is normal.
  The default is not a draft and it takes ~20 seconds for the live
  github.io page to update.

  The ‚Äòlocal‚Äô optiona indicates whether the resulting article should be
  viewed using the local server or the live webpage. Live page is default.

  When ‚Äòdraft‚Äô and ‚Äòlocal‚Äô are both set, the resulting page may momentarily
  show a page-not-found error, simply refresh.
  "

  (load-file "~/blog/AlBasmala.el")

  ;; --MOVE ME TO ALBASMALA--
  ;; Sometimes the file I'm working with is not a .org file, so:
  (setq file.org (buffer-name))

  (preview-article :draft draft)
  (unless draft (publish))
  (let ((server (if local "http://localhost:4000/" "https://alhassy.github.io/")))
    (async-shell-command (concat "open " server NAME "/") "*blog-post-in-browser*"))
)
#+END_SRC

** TODO Hydra Timer
:PROPERTIES:
:CUSTOM_ID: Hydra-Timer
:END:

#+begin_src emacs-lisp :tangle no
(setq org-clock-sound t) ;; Standard Emacs beep
(my/defhydra "C-c x" "Time Tracking" clock-o
  ;; Org-Clock ---must be on an Org header;; but the timer works from anywhere
  :Tasks
  ("n" (my/org-journal-new-entry :work) "New")
  ("v" (progn (my/org-journal-new-entry :work) (revert-buffer t t) (org-journal-mode)) "View all")
  :Timer
  ("s" org-timer-start "Start")
  ("S" org-timer-stop "Stop")
  ("x" org-timer-set-timer "Set")
  ("p" org-timer "Print")
  :Org-Clock
  ("i" org-clock-in "in")
  ("o" org-clock-out "out")
  ("c" org-clock-cancel "cancel" :color pink :column "Do")
  ("d" org-clock-display "display")
  ("e" org-clock-modify-effort-estimate "effort")

  ("j" org-clock-goto "Jump to task") ;; Jump to  the headline of the currently clocked in task. With a C-u prefix argument, select the target task from a list of recently clocked tasks.
  ("r" org-clock-report "Insert clocktable"))
#+end_src

** TODO Makes Org/Markdown previewabvle as we type!!! ‚ô•
:PROPERTIES:
:CUSTOM_ID: Makes-Org-Markdown-previewabvle-as-we-type
:END:
#+begin_src emacs-lisp :tangle no
  ;; Shows up as a magnifying glass in doom-modeline.
  (use-package grip-mode)
  ;;  :hook ((markdown-mode org-mode) . grip-mode)
  ;; Pretty annyoning actually; instead we should call it as needed.
  )
#+end_src

** README.md
:PROPERTIES:
:CUSTOM_ID: README-md
:END:

#+begin_src emacs-lisp :tangle no :tangle no :export_never t
(with-temp-buffer
    (insert (concat
    "#+EXPORT_FILE_NAME: README.md
     #+HTML: <h1> A Life Configuring Emacs </h1>
     #+begin_export html
     <p align=\"center\">
       <img src=\"emacs-logo.png\" width=150 height=150/>
     </p>

     <p align=\"center\">
        <a href=\"https://www.gnu.org/software/emacs/\">
             <img src=\"https://img.shields.io/badge/GNU%20Emacs-" emacs-version "-b48ead.svg?style=plastic\"/></a>
        <a href=\"https://orgmode.org/\"><img src=\"https://img.shields.io/badge/org--mode-" org-version "-489a9f.svg?style=plastic\"/></a>
     </p>

     <p align=\"center\">
       <img src=\"emacs-birthday-present.png\" width=200 height=250/>
     </p>
     #+end_export
     #+HTML: <h3> My Literate Setup </h3>
     #+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

     I enjoy reading others' /literate/ configuration files and incorporating what I learn
     into my own. The result is a sufficiently well-documented and accessible read that yields
     a stylish and functional system (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

     This ~README.md~ has been automatically generated from my configuration
     and its contents below could also be read in blog format, with /colour/, or as colourful PDF,
     [[https://alhassy.github.io/init/][here]]. Enjoy :smile:

      #+TOC: headlines 2
      #+INCLUDE: init.org
    "))
    (org-mode)
    (org-md-export-to-markdown)
    ;; Coloured html does not work in Github, afaik.
    ;; (org-html-export-to-html)
    ;; (shell-command "mv README.html README.md")
)
#+END_SRC

** Homemade attempt before learning about shell-pop
:PROPERTIES:
:CUSTOM_ID: Homemade-attempt-before-learning-about-shell-pop
:END:

#+begin_src emacs-lisp :tangle no :tangle no
(cl-defun toggle-terminal (&optional (name "*eshell-pop-up*"))
   "Pop up a terminal, do some work, then close it using the same command.

   The toggle behaviour is tied into the existence of the pop-up buffer.
   If the buffer exists, kill it; else create it.
   "
   (interactive)
   (cond
     ;; when the terminal buffer is alive, kill it.
     ((get-buffer name)  (kill-buffer name)
                         (ignore-errors (delete-window)))
     ;; otherwise, set value to refer to a new eshell buffer.
     (t                  (split-window-right)
                         (other-window 1)
                         (eshell)
                         (rename-buffer name))))

(global-set-key "\C-t" 'toggle-terminal)
#+end_src
** Makeshift HTML Folded Drawers: Folding-mode & Org-Macros
:PROPERTIES:
:CUSTOM_ID: Makeshift-HTML-Folded-Drawers-Folding-mode-Org-Macros
:END:

My =my/prettify-alist= has the following:

                    ("{{{fold("        . ?‚Ü≥)
                    (")}}}"            . ?‚Ü≤)
                    ("{{{end-fold}}}"  . ?‚Ü∫)

The ~‚Ü≥Title Here‚Ü≤ Contents ‚Ü∫~ combination is for my makeshift HTML code
folding macro ---word-wrapped for readability.
#+BEGIN_SRC org :tangle no
,#+MACRO: end-fold  #+HTML: </details>
,#+MACRO: fold      #+HTML: <details class="code-details"> <summary> <strong>
                              <font face="Courier" size="3" color="green"> $1
                              </font> </strong> </summary>
#+END_SRC

:Example:
# The (org-mode-restart) invocation actually enables the source block prettifications.

# Empty macros to make the example go through.
#
#+MACRO: end-fold
#+MACRO: fold

{{{fold(nice)}}}

hello

{{{end-fold}}}

:End:

Let's have this fold-away in the source buffer as well by using [[https://www.emacswiki.org/emacs/FoldingMode][folding-mode]];
with show/hide with ~C-<tab>~ key.
#+begin_src emacs-lisp :tangle no :tangle no
(use-package folding
 :init
 (folding-add-to-marks-list 'org-mode               "{{{fold(" "{{{end-fold}}}" nil t)
 (setq folding-top-mark "{{{fold(")
 (setq folding-bottom-mark "{{{end-fold}}}")
 :config
  (define-key folding-mode-map (kbd "C-<tab>")       #'folding-toggle-show-hide)
  (add-hook 'org-mode-hook #'folding-mode))
#+END_SRC
#  (remove-hook 'org-mode-hook #'folding-mode)

** DONE shell-command-and-run
:PROPERTIES:
:CUSTOM_ID: shell-command-and-run
:END:
#+begin_src emacs-lisp :tangle no
(defalias 'my/shell-command-and-run 'shell-command-and-run)
(defun shell-command-and-run (cmd name &rest more-commands)
  "Run shell command CMD (possibly opening a new repl/terminal) and then MORE-COMMANDS.

When to use this function? Whenever you're finding yourself in the situation:
(1) Open a terminal, (2) start an interactive repl, (3) rename the buffer name to be informative,
(4) run some default/initial commands. See also the `term' function.

CMD and NAME are strings; MORE-COMMANDS is an arbitrary number of strings.

The name of this function does not contain my personal prefix ‚Äòmy‚Äô,
since I'd like it to show up as a possible completion when I type
‚Äòshell-command‚Äô.

For example,

   (shell-command-and-run
    \"ghci\" \"Playing with Haskell\"
    \"let x = 4\"
    \":t x\")

This results in an interactive shell buffer named ‚Äú*Playing with Haskell*‚Äù with contents:

   GHCi, version 8.10.7: https://www.haskell.org/ghc/  :? for help
   Prelude> let x = 4
   Prelude> :t x
   x :: Num p => p
   Prelude> ‚ùô"
  (interactive)
  (let* ((default-directory "~/")
         (proc (get-buffer-process
                (ansi-term cmd name))))
    (term-send-string
     proc (concat (s-join "\n" more-commands) "\n"))))
#+end_src
** DONE Compile                                                  :posterity:
:PROPERTIES:
:CUSTOM_ID: Compile
:END:

Emacs' [[https://www.emacswiki.org/emacs/CompileCommand][compile]] command allows us to execute arbitrary Elisp
when ~M-x recompile~ is invoked. One of my habits is to append
most of my files with the


#+begin_src org :tangle no
# Local Variables:
# eval: (message "Load file specific stuffs here")
# compile-command: (async-shell-command (concat "open " (org-latex-export-to-pdf)))
# End:
#+end_src

Since nearly every file I work with is ‚îÄor can be coerced into being‚îÄ in org mode,
I usually have a section ~* footer~ that contains something like the above.

Let's remove repeated matter.
#+begin_src emacs-lisp :tangle no :tangle no
;; Silently save before compiling.
(setq compilation-ask-about-save nil)

;; Silently kill previous compilation process before starting a new one.
(setq compilation-always-kill t)

;; Scroll as compilation output is procuded in *Compilation* buffer; e.g., pdflatex
;; Use 'first-error to stop scrolling on the first error encountered; otherwise ‚Äòt‚Äô.
(setq compilation-scroll-output 'first-error)

;; Don't stop on informaiton messages or warnings; only on errors.
(setq compilation-skip-threshold 2)
#+end_src

#+begin_src emacs-lisp :tangle no :tangle no
;; My global compile command
(setq compile-command
  '(async-shell-command (concat "open " (org-latex-export-to-pdf))))

;; Bind ‚Äòrecompile‚Äô to ‚ÄòC-c C-m‚Äô ‚îÄ‚Äúm‚Äù for ‚Äúm‚Äùake
(global-set-key (kbd "C-c C-m") 'recompile)

;; Also a helpful quick f-key.
(global-set-key (kbd "<f7>") 'recompile)
#+END_SRC

** TODO The ~defer~ macro:
#+begin_src emacs-lisp :tangle init.el
(defmacro üò¥ (&rest sexp)
  "Defer any sexp.

If you have a call `(f x y)' then `(üò¥ f x y)' behaves the same but is run
when Emacs has been idle for 2 seconds.

E.g., (setq hi 12) defines a variable `hi', so `M-: hi' shows a value.
Whereas (üò¥ setq hello 12) does not immediately define a variable: `M-: hello' yields an error
when run immediately, but yields a value when Emacs is idle for 2 seconds.

Save the name of this macro by highlighting it and pressing `C-x r s z', then use it with `C-x r i z'."
  `(run-with-idle-timer 20 nil (lambda nil ,sexp)))

;; (defmacro when-idle (&rest body)
   ;; `(run-with-idle-timer 20 nil (lambda () ,@body)))
;;

;; first this,
(setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
      gc-cons-percentage 0.6)
;; then
(üò¥ load-file "~/.emacs.d/deferred-init.el")
;; finally [[the following should really be at the end of deferred-init.el]]
(add-hook 'emacs-startup-hook
  (lambda ()
    (setq gc-cons-threshold 16777216 ; 16mb
          gc-cons-percentage 0.1)))
#+end_src

** TODO power-mode, defadvice!

#+begin_src emacs-lisp
(use-package power-mode) ;; M-x power-mode ‚áí Make the world/editor shake with every keystroke I strike down, muhahaha!
;; Something to consider adding to my pair-programming toggle function.

;;==================================Stuff from DoomEmacs=====================================================================================

(defmacro defadvice! (symbol arglist &optional docstring &rest body)
  "Define an advice called SYMBOL and add it to PLACES.
ARGLIST is as in `defun'. WHERE is a keyword as passed to `advice-add', and
PLACE is the function to which to add the advice, like in `advice-add'.
DOCSTRING and BODY are as in `defun'.
\(fn SYMBOL ARGLIST &optional DOCSTRING &rest [WHERE PLACES...] BODY\)

Add a piece of advice on the function stored at PLACE.
FUNCTION ‚âî `(lambda ,ARGSLIST ,BODY) describes the code to add.  WHERE describes where to add it.
WHERE can be explained by showing the resulting new function, as the
result of combining FUNCTION and the previous value of PLACE, which we
call OLDFUN here:
`:before'	(lambda (&rest r) (apply FUNCTION r) (apply OLDFUN r))
`:after'	(lambda (&rest r) (prog1 (apply OLDFUN r) (apply FUNCTION r)))
`:around'	(lambda (&rest r) (apply FUNCTION OLDFUN r))
`:override'	(lambda (&rest r) (apply FUNCTION r))
`:before-while'	(lambda (&rest r) (and (apply FUNCTION r) (apply OLDFUN r)))
`:before-until'	(lambda (&rest r) (or  (apply FUNCTION r) (apply OLDFUN r)))
`:after-while'	(lambda (&rest r) (and (apply OLDFUN r) (apply FUNCTION r)))
`:after-until'	(lambda (&rest r) (or  (apply OLDFUN r) (apply FUNCTION r)))
`:filter-args'	(lambda (&rest r) (apply OLDFUN (funcall FUNCTION r)))
`:filter-return'(lambda (&rest r) (funcall FUNCTION (apply OLDFUN r)))

A diagrammatic & straightforward English summary can be found at
https://scripter.co/emacs-lisp-advice-combinators.

Example usage:

(defadvice! prompt-for-buffer (&rest _)
  :after 'window-split
  \"Show me the list of currently open buffers when I split a window.\"
  (bufler-list))

Altering the advice body and re-evaluating the defadvice! redefines the named advice.

This is a DoomEmacs macro: https://github.com/doomemacs/doomemacs/blob/master/core/core-lib.el#L739
"
  (declare (doc-string 3) (indent defun))
  (unless (stringp docstring)
    (push docstring body)
    (setq docstring nil))
  (let (where-alist)
    (while (keywordp (car body))
      (push `(cons ,(pop body) (doom-enlist ,(pop body)))
            where-alist))
    `(progn
       (defun ,symbol ,arglist ,docstring ,@body)
       (dolist (targets (list ,@(nreverse where-alist)))
         (dolist (target (cdr targets))
           (advice-add target (car targets) #',symbol))))))


;;=======================================================================================================================
#+end_src

** TODO Toggles Hydra                                      :Not_yet_tangled:
:PROPERTIES:
:CUSTOM_ID: Toggles-Hydra
:END:

#+begin_src emacs-lisp :tangle no
(my/defhydra "C-c t" "Toggles" toggle-on
   :Theme
   ("t t" my/toggle-theme "Theme")
   ("t s" (thread-last (all-completions "doom" (custom-available-themes))
            (completing-read "Load custom theme: ")
            intern
            load-theme)
    "Select Theme")

   :UI
   ("i" display-fill-column-indicator-mode :toggle t)
   ("f" my/toggle-font "font")
   ("F" writeroom-mode "Focused Work!" :toggle t)
   ("d" treemacs "directory finder" :toggle t)
   ("n" display-line-numbers-mode "line number" :toggle t)
   ("u f" (setq frame-title-format (completing-read "New frame title: " nil)) "New frame title") ;; Useful for random screenshots

   :Possibly_in_the_way
   ("e" electric-pair-mode "electric pair" :toggle t)
   ("c" flyspell-mode "spell check" :toggle t)
   ("s" prettify-symbols-mode "pretty symbol" :toggle t)
   ("w" whitespace-cleanup "Clean up whitespace on save" :toggle t)
   ;; ("a" global-aggressive-indent-mode "aggressive indent" :toggle t)
   ;; ("d" global-hungry-delete-mode "hungry delete" :toggle t)

   :Modeline
   ("m d" doom-modeline-mode "modern mode-line" :toggle t)
   ("m b" display-battery-mode "battery" :toggle t)
   ("m t" display-time-mode "time" :toggle t)
   ("m w" which-function-mode "which function" :toggle t)

   :Highlight
   ("h l" global-hl-line-mode "line" :toggle t)
   ("h p" show-paren-mode "paren" :toggle t)
   ;; ("h s" symbol-overlay-mode "symbol" :toggle t)
   ;; ("h r" rainbow-mode "rainbow" :toggle t)
   ;; ("h w" (setq-default show-trailing-whitespace (not show-trailing-whitespace))
   ;; "whitespace" :toggle show-trailing-whitespace)
   ;; ("h d" rainbow-delimiters-mode "delimiter" :toggle t)
   ("h i" highlight-indent-guides-mode "indent" :toggle t)
   ("h t" global-hl-todo-mode "todo" :toggle t)
   ;; ("x" highlight-sexp-mode "sexp" :toggle t)
   ;; ("t" hl-todo-mode "todo" :toggle t)

   :Program
   ("f" flycheck-mode "flycheck" :toggle t)
   ;; ("F" flymake-mode "flymake" :toggle t)
   ("o" origami-mode "folding" :toggle t)
   ;; ("O" hs-minor-mode "hideshow" :toggle t)
   ("W" subword-mode "subword" :toggle t)
   ("E" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
   ("Q" toggle-debug-on-quit "debug on quit" :toggle (default-value 'debug-on-quit))
   ;; ("v" global-diff-hl-mode "gutter" :toggle t)
   ;; ("V" diff-hl-flydiff-mode "live gutter" :toggle t)
   ;; ("M" diff-hl-margin-mode "margin gutter" :toggle t)
   ;; ("D" diff-hl-dired-mode "dired gutter" :toggle t)

   ("P" (if (profiler-running-p)
            (progn (profiler-report) (profiler-stop))
          (profiler-start 'cpu+mem))
    "Profiler start / report" :exit (profiler-running-p)))

;; Places single frame in centre of screen; hides many UI things (e.g., mode line).
;; Nice for focused / immersive work.
;;
;; When in writeroom, let's also dim the font color of text in surrounding
;; paragraphs / code blocks.
(use-package writeroom-mode
  :config (use-package focus)
  :hook (writeroom-mode . (lambda () (focus-mode 'toggle))))
#+end_src

*** COMMENT Toggling System                                     :RelocateMe:
:PROPERTIES:
:CUSTOM_ID: COMMENT-Toggling-System
:END:

#+begin_src emacs-lisp
(defhydra toggle-me-to-the-moon (global-map "C-x t") ;; (:color pink :columns 3)
  "Emacs, please toggle my [t]heme | [f]ont | [m]enu"
  ;; First row
  ("t" my/toggle-theme)
  ("f" my/toggle-font)
  ("m" imenu-list-smart-toggle)
  ("c" column-number-mode)
)

 ;; Shows a nice sidebar menu of the buffer's contents
(use-package imenu-list) ;; Main keys: SPC / ENTER / TAB / n / p / q
#+end_src

** TODO Kill all buffers that are not associated with a file
:PROPERTIES:
:CUSTOM_ID: Lisp-Helpers-Kill-all-buffers-that-are-not-associated-with-a-file
:END:

#+begin_src emacs-lisp
(cl-defun my/clean-buffers ()
  "Kill all buffers that are not associated with a file.
  By convention, such files are named in *earmuffs* style."
  (interactive)
  (ignore-errors (mapcar #'kill-buffer (--filter (s-matches? "\\*.*\\*" it) (mapcar #'buffer-name (buffer-list))))))
#+end_src

** TODO [#A] When I press ~C-x ‚Üê/‚Üí~ I'd like to ignore some silly buffers.
- If I want to see a particular buffer, I'll summon it explicitly.
  + E.g., Messages with ~C-h e~, Magit with ~C-x g~, Server Status with ~M-S-SPC~, etc.
#+begin_src emacs-lisp
(defun my/buffer-predicate (buffer)
  "Run `C-u 0 C-x C-e' on the following form to see all buffer names and find the
   ones annyoning you, then place those in the function body below

        (mapcar #'buffer-name (buffer-list))
"
  ;; First let's kill a bunch of buffers
  ;; (my/clean-buffers) ;; TODO: Bad idea?

  ;; Next let's filter out any remaining ones [Redundant?]
  (defvar my/ignore/buffer/name '("*Quail Completions*" "*Backtrace*" "*Help*" "*agda2*" "*sqls*" "*which-key*" "*Warnings*" "*Messages*" "Status of Services"))
  (defvar my/ignore/buffer/prefix '("*helm" "*Helm"  "*quelpa" "*lsp" "*Occur" "magit" "*Flymake" "*format" "*Shell" "*Async"
                                    "*org-src-fontification:" "*Server:"))
  (defvar my/ignore/buffer/suffix  '("stderr*" "log*" "-ls*"))

  (-let [name (buffer-name buffer)]
    (not (or (member name my/ignore/buffer/name)
             (--any? (s-starts-with? it name) my/ignore/buffer/prefix)
             (--any? (s-ends-with? it name) my/ignore/buffer/suffix)))))

(set-frame-parameter nil 'buffer-predicate 'my/buffer-predicate)
#+end_src

Note: ~C-x C-r~ is very useful for jumping to recently visited files.

* Conclusion ---Why Configuration Files Should be Literate
:PROPERTIES:
:CUSTOM_ID: Conclusion-Why-Configuration-Files-Should-be-Literate
:END:

A configuration file sets up various features for a tool ---and serves as an
essential learning point.  In order to remember them, what they do, and possibly
where you learned about them ---which may include additional resources--- it is
pertinent to document such facts. Benefits of documentating features include:
+ A list of the features with human readable names! ---In case you forget what you invested time on!
+ Personal documentation! ---Reduce wasting time Googling things that you knew in the past!
+ Convincing Need
  - Making notes with decriptive text, as suggested below,
    will make it clear whether you actually need the feature
    or ‚Äújust threw it becuase it looks cool‚Äù ---which leads to ‚Äòinit bankruptcy‚Äô.

    Moreover, actually documenting a feature may make it more to recall
    that you have the feature and have notes for it.

#+begin_quote
Programs are meant to be read by humans and only incidentally for computers to
execute. ---Donald Knuth
#+end_quote

Alongside a feature's installation, I've tried to provide the following:
+ /Why/ would I want this? Motivation!
  - Example scenerios and use-cases.
+ /How/ do I actually use it? Super terse usage details to ‚Äúget going‚Äù!
+ /Where/ is the offical documentation page, or repository? Discovarability!
+ Comparisions: Are there other similar features, builtin or otherwise? How do they compare?
  Why have I decided for this one instead of another one?
+ Additional comments and reminders related to the feature.
  - E.g., why the feature is now disabled, ‚Äòcommented out‚Äô, when
    before it was useful.

#+begin_quote
Programs without documentation have little value; it's like a claim without evidence! ---Me
#+end_quote

Here are some benefits of having a tool's configurations written literately
as an Org-mode file, then tangeling as appropriate.

+ Modularity! ---or *‚ÄúIn Praise of the Monolith‚Äù*
  # ---*Why Configurations Should Live in Monolithic Files*

  It may not be feasible, or practical, to split a tool's configuration file
  into multiple file hierarchy. Yet, with Org-mode we may reify the hierarchical
  structure as ‚Äòsections‚Äô and have the resulting configuration read more like
  a novel, easily folding and navigating, between sections.

  - Section headers provide organisation and they're collapsable.

  Even if you can make multiple files, using one monolithic file allows:

  - Really easy to quickly /re-organise/ code!
    * Use ~w~ to move content almost instanteously!
    * In contrast, it's harder to review an entire project, when it's in pieces.
  - Many files requires coming up with descriptive file names; instead
    prefer descriptive org headings ^_^
  - Easily navigatable hierarchy with a nested directory/org-heading structure.
    * Have headings with an introducttory paragraph that explains the
      kind of features being considered ---or, lazily, look at the outlined view
      of subheadings to see what's there.
  - Easy search & review of features since they're in one file.
    * Multiple files makes it harder to remember which features live where.
  - One file is easy to distribute & share!

  # Using headings does not conflict with the Single Responsibility Principle nor
  # of Separation of Concerns. ---This totally ignores the Interface Segregation
  # Principle, but in the grand scheme of things, I'm happy this way and I like
  # being happy.

  Many small files are great for collobaration ---there'll likely be less merge
  conflicts. However, configuration files are usually a one-person project.

  # + Some programming languages perform better when there are many small files
  #   ---glaring at Agda here. Others have a bit of a cost to linking all the files
  #   together. There's no fast and hard rule it seems.

+ Toggle feature selection without altering any code!

  With a single ~#~ key press, we can comment out a section, thereby disabling the
  features it provides. The features are neither deleted nor forgotten, but we
  can experiment with having them there or not /without/ altering any code!
  Alternatively, one mays use the ~:noexport:~ tag on a section header.

  In contrast, an illiterate setup would have us commenting out large chunks of
  code, which is not as easy to manage.

+ Really easy to delete content!

  After a while, I come back and realise I've implemented something silly or
  that is available via some external package, I can quickly delete it.

+ Can quickly export to different mediums!

  If you want to share your configuration with others, then an HTML rendition
  with a table of contents and text sprinkled everywhere is more likely to
  attract onlookers since they can easily jump to the sections they're interested in.

+ Easily digestible chunks of code!

  With a literate approach, one is empowered to have short source blocks; e.g.,
  not exceeding 30 lines ---read more [[https://dzone.com/articles/rule-30-%E2%80%93-when-method-class-or][here]].  This is more likely to ensure
  (possibly by extracting code into its own functions): The listing fits on one
  screen, avoiding deeply nested control structures, non-repeating common
  logical patterns, increased confidence that the implementation meets the
  stated purpose.

The only reason I would use multiple files or raw code for setting up a tool
would be if I did not have a literate programming environment; i.e., Org-mode.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

#+begin_center
                            Emacs   is   fun  (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

                                      Bye!
#+end_center

#+HTML: <p align="center"><img src="https://i.redd.it/g6yi40gbivv31.jpg"  alt="Being replaced at the office"/></p>

#+begin_center
/Thanks to friends for ‚Äúreplacing me‚Äù while I was away ‚ô•‚Äø‚ô• ·¥µ‚Äô·µê ·µá·µâ·µÉ·µò·µó‚Å±·∂†·µòÀ°/
#+end_center

** Done!                                                             :ignore:

#+begin_src emacs-lisp :tangle "init.el"
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(message-box "Enjoy life (ÔΩ°‚óï‚Äø‚óïÔΩ°))")
#+end_src
