# ÿßŸÑÿ≥ŸëŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ ‚îÄ‚ÄúHello, and welcome‚Äù in Arabic (ÿßŸÑÿπÿ±ÿ®ŸäŸëÿ©)
#
# ‚â• 8600 line org file, with auto-generated TOC.
# ‚â• 219 code blocks
# (emacs-init-time) ‚áí 10.3 seconds (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

#+OPTIONS: broken-links:auto

* title :ignore:
:PROPERTIES:
:CUSTOM_ID: title
:END:
#+title: A Life Configuring Emacs
#+author: Musa Al-hassy
#+email: alhassy@gmail.com
#+date: 2018-07-25
#+DESCRIPTION: My Emacs Initialisation File, Written in Org-mode.
#+STARTUP: indent lognoteclock-out
#+OPTIONS: html-postamble:nil toc:2 d:nil num:t :results nil
#+PROPERTY: header-args :tangle init.el :comments link :results none
#+EXPORT_FILE_NAME: index

# ‚îÄAlBasmala keywords‚îÄ
# DRAFT: yes
#+SOURCEFILE: https://github.com/alhassy/emacs.d/blob/master/init.org
#+IMAGE: ../assets/img/emacs_logo.png
#+CATEGORIES: Emacs Lisp

#+OPTIONS: broken-links:auto

#+HTML_HEAD: <link href="https://alhassy.github.io/org-notes-style.css" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="https://alhassy.github.io/floating-toc.css" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="https://alhassy.github.io/blog-banner.css" rel="stylesheet" type="text/css" />
# The last one has the styling for lists.

#+begin_src emacs-lisp :exports none
(require 'cl) ;; to get loop instead of cl-loop, etc.

;; before this: init time: 13
;; after: 12 seconds.
; (setq gc-cons-threshold 50000000) ;; orginaly 800,000
;; reduce number of times GC occurs.
#+end_src

# The ~minted~ environment can't appear as an argument to another command; a [[https://tex.stackexchange.com/questions/102416/error-when-compiling-a-minted-listings-inside-a-memoir-subfloat][work-around]] is to use a ‚Äòbox‚Äô.  Learn more about LaTeX boxes [[https://latexref.xyz/Boxes.html][here]].

* Abstract                                                           :ignore:
:PROPERTIES:
:CUSTOM_ID: Abstract
:END:

#+begin_center

badge:A_Life|Configuring_Emacs|success||gnu-emacs

badge:A_Life_Configuring|Emacs|success||gnu

badge:Currently_Reorganising|Not_Polished|yellow
#+end_center

#+html: <p align="center">
#+begin_center text
*Abstract*
#+end_center
#+html: </p>

[[doc:Hello][Hello!]] Herein I document the configurations I utilise with [[https://gnu.org/s/emacs][Emacs]].
# After cloning the file, many packages are automatically installed; usually with
# little or no trouble.

As a [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][literate program]] file with [[http://orgmode.org/][Org-mode]], I am ensured optimal navigation
through my ever growing configuration files, ease of usability and reference
for peers, and, most importantly, better maintainability for myself!

Dear reader, when encountering a foregin command ~X~ I encourage you to execute
~(describe-symbol 'X)~, or press kbd:C-h_o with the cursor on ~X~.  An elementary
Elisp Cheat Sheet can be found at [[badge:Elisp|CheatSheet|success|https://alhassy.github.io/ElispCheatSheet/CheatSheet.pdf|Gnu-Emacs][Elisp cheat sheet]] and
badge:Lifemacs|CheatSheet|informational|https://alhassy.github.io/emacs.d/CheatSheet.pdf|Gnu-Emacs
is a 2-page 3-column PDF of the bindings in /this/ configuration.
+ kbd:C-h_e ‚áí *What'd /Emacs/ do?*
+ kbd:C-h_o ‚áí *What's this thing?*
+ kbd:C-h_l ‚áí *What'd /I/ do?*
+ [[kbd:C-h_?]] ‚áí *What're the help topics?* ---gives possible completions to ‚ÄúC-h ‚ãØ‚Äù.
+ ‚ÄúI accidentally hit a key, which one and what did it do!?‚Äù ‚áí kbd:C-h_e and kbd:C-h_l,
  then use kbd:C-h_o to get more details on the action.
  ;-)

Finally, kbd:C-h_d asks nicely what ‚Äòd‚Äôocumentation you're interested in.
After providing a few keywords, the =apropos= tool yields possible functions
and variables that may accomplish my goal.

#+begin_center
badge:Emacs|27|green|https://www.gnu.org/software/emacs|gnu-emacs
badge:Org|9.4|blue|https://orgmode.org|gnu

[[badge:license|GNU_3|informational|https://www.gnu.org/licenses/gpl-3.0.en.html|read-the-docs][gnu 3 license badge]]
tweet:https://github.com/alhassy/org-special-block-extras

badge:author|musa_al-hassy|purple|https://alhassy.github.io/|nintendo-3ds
badge:|buy_me_a¬†coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee

# badge:Hire|me|success|https://alhassy.github.io/about
#+end_center

This article is about /how I like/ to do things
---/I'm not insisting others should/ do things this way.

#+begin_box
/Always remember that to argue, and win, is to break down the reality of the
person you are arguing against. It is painful to lose your reality, so be kind,/
/even if you are right./ - Haruki Murakami

/Life is too short to not read the very best book you know of right now./ - Patrick Collison

/Inspiration is for amateurs. The rest of us just show up and get to work./ - Chuck Close
#+end_box

* COMMENT Table of Contents                                        :Github:TOC____4:
:PROPERTIES:
:CUSTOM_ID: Table-of-Contents
:END:




- [[#weather-app][Weather App]]
- [[#new_27][NEW_27]]
* Personal instructions for a new machine :ignore:
:PROPERTIES:
:CUSTOM_ID: Personal-instructions-for-a-new-machine
:END:
#+begin_details "‚ÄúPersonal instructions for a new machine‚Äù"
These steps must be performed at the terminal /since/ they are
required to get /my/ Emacs, which then installs everything else /when
it's first opened/.

1. Install a package manager: https://brew.sh/ :

  #+begin_src shell :tangle no
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  #+end_src

   Also: Change to the conventional scrolling direction:
   /If I pull my scroll down, I want to go down./
   - Apple menu ‚Üí System Preferences ‚Üí Mouse ‚Üí Tick the scroll direction option.

2. [[https://www.emacswiki.org/emacs/EmacsForMacOS#h5o-14][Use brew to get Emacs]]:
   #+begin_src shell :tangle no
brew install --cask emacs
   #+end_src
   If that fails, try this to [[https://github.com/daviderestivo/homebrew-emacs-head#gnu-emacs-27-bottle-or-head][install Emacs:]]
   #+BEGIN_SRC shell :tangle no
brew tap daviderestivo/emacs-head
brew install emacs-head
#+END_SRC

3. [[https://emacs.stackexchange.com/a/50405/10352][Then]] ¬†¬† [[https://www.emacswiki.org/emacs/EmacsForMacOS#h5o-14][make]] ¬†¬†the command ~emacs~ available via the terminal ---required if
   doing any melpa development.
   #+begin_src shell :tangle no
ln -s /usr/local/opt/emacs-head@27/Emacs.app /Applications

sudo ln -s /usr/local/opt/emacs-head@27/Emacs.app/Contents/MacOS/Emacs /usr/local/bin/emacs
   #+end_src

4. Install git: =brew install git=

5. Get my Emacs setup: =rm -rf ~/.emacs.d; git clone
   https://github.com/alhassy/emacs.d.git ~/.emacs.d=

   Open Emacs and watch download and set up many other things ... ^_^

   *This may take ~15 minutes ---we install a massive LaTeX setup.*

We get: Spell checker, dictionary, LaTeX + pygements, Dropbox, AG (for fast system-wide searching
of a string with doc:helm-do-grep-ag, useful for finding definitions),
Amethyst window manager.

Amethyst requires some more setup: Open its preferences, then...
    - Then select: =Mouse: Focus follows mouse=.
    - Also: =Shortcuts=, then disable ‚Äòincrease/decrease main pane count‚Äô bindings
      since they override the beloved Emacs =M-<,>= keys.


For convenience, on a Mac, add the home (=~/=) directory to the default file
navigator: Finder ‚Üí Preferences ‚Üí Sidebar, then select home üè†.

If you notice any ‚Äúfile system access‚Äù concerns, give Emacs permissions to read
your files: General Settings ‚Üí Security & Privacy ‚Üí Full Disk Access ‚Üí ~‚åò-M-g~ (to
search) then enter =/usr/bin/ruby= ---Emacs is launched via a Ruby script in
MacOS.
#+end_details

* Why Emacs?
:PROPERTIES:
:CUSTOM_ID: Why-Emacs
:END:

A raw code file is difficult to maintain, especially for a /large/ system such as
Emacs. Instead, we're going with a ‚Äòliterate programming‚Äô approach: The
intialisation configuration is presented in an essay format, along with headings
and subheadings, intended for consumption by humans such as myself, that,
incidentally, can be ‚Äòtangled‚Äô into a raw code file that is comprehensible by a
machine. We achieve this goal using [[#Life-within-Org-mode][org-mode]] ---which is /Emacs' killer app/.


** Mini-tutorial on Org-mode :ignore:
:PROPERTIES:
:CUSTOM_ID: Mini-tutorial-on-Org-mode
:header-args: :tangle no
:END:

# To include this mini-tutorial elsewhere:
#    #+include: ~/.emacs.d/init.org::#Mini-tutorial-on-Org-mode

#+begin_details Super Simple Intro to Emacs‚Äô Org-mode
link-here:Super-Simple-Intro-to-Emacs-Org-mode
Emacs‚Äô Org-mode is an outliner, a rich markup language, spreadsheet tool,
literate programming system, and so much more. It is an impressive reason to
use Emacs (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

# badge:Emacs|27|green|https://www.gnu.org/software/emacs|gnu-emacs
# badge:Org|9.4|blue|https://orgmode.org|gnu

Org-mode syntax is very /natural/; e.g., the following is Org-mode!
( [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][Org Mode Is One of the Most Reasonable Markup Languages to Use for Text]] )

#+begin_src org :noeval
+ Numbered and bulleted lists are as expected.
  - Do the things:
    1.  This first
    2.  This second
    44. [@44] This forty-fourth
  - =[@ùìÉ]= at the beginning of an iterm forces
    list numbering to start at ùìÉ
  - =[ ]= or =[X]= at the beginning for checkbox lists
  - Use =Alt ‚Üë, ‚Üì= to move items up and down lists;
    renumbering happens automatically.

+ Definitions lists:
   ~- term :: def~
+ Use a comment, such as =# separator=, between two lists
  to communicate that these are two lists that /happen/ to be
  one after the other. Or use any /non-indented/ text to split
  a list into two.

,* My top heading, section
  words
,** Child heading, subsection
  more words
,*** Grandchild heading, subsubsection
    even more!
#+END_SRC


*Export* In Emacs, press kbd:C-c_C-e_h_o to obtain an HTML webpage ---/like this
one!/--- of the Org-mode markup; use kbd:C-c_C-e_l_o to obtain a PDF rendition.

You can try Org-mode notation and see how it renders live at:
http://mooz.github.io/org-js/

--------------------------------------------------------------------------------

You make a heading by writing =* heading= at the start of a line, then you can
kbd:TAB to fold/unfold its contents. A table of contents, figures, tables can be
requested as follows:
#+BEGIN_SRC org
# figures not implemented in the HTML backend
# The ùìÉ is optional and denotes headline depth
,#+toc: headlines ùìÉ
,#+toc: figures
,#+toc: tables
#+END_SRC

--------------------------------------------------------------------------------

+ *Markup* elements can be nested.

  | Syntax                             | Result           |
  |------------------------------------+------------------|
  | ~/Emphasise/~, italics               | /Emphasise/        |
  | ~*Strong*~, bold                     | *Strong*           |
  | ~*/very strongly/*~, bold italics    | */very strongly/*  |
  | ~=verbatim=~, monospaced typewriter  | =verbatim=         |
  | ~+deleted+~                          | +deleted+          |
  | ~_inserted_~                         | _inserted_         |
  | ~super^{script}ed~                   | super^{script}ed |
  | ~sub_{scripted}ed~                   | sub_{scripted}ed |

  * Markup can span across multiple lines, by default no more than 2.
  * In general, markup cannot be ‚Äòin the middle‚Äô of a word.
+ New lines demarcate paragraphs
+ Use =\\= to force line breaks without starting a new paragraph
+ Use /at least/ 5 dashes, =-----=, to form a horizontal rule

badge:org-special-block-extras|2.0|informational|https://github.com/alhassy/org-special-block-extras|Gnu-Emacs
provides support for numerous other kinds of markup elements, such as ~red:hello~
which becomes ‚Äú red:hello ‚Äù.

--------------------------------------------------------------------------------

*Working with tables*
#+BEGIN_SRC org
#+ATTR_HTML: :width 100%
#+name: my-tbl
#+caption: Example table
| Who? | What? |
|------+-------|
| me   | Emacs |
| you  | Org   |
#+END_SRC

Note the horizontal rule makes a header row and is formed by typing [[kbd:doit][| -]] then
pressing kbd:TAB. You can kbd:TAB between cells.

--------------------------------------------------------------------------------

*Working with links*

Link syntax is =[[source url][description]]=; e.g., we can refer to the above
table with =[[my-tbl][woah]]=.
Likewise for images: =file:path-to-image.=

# The HTML has Up/Home on the right now ;-)
# +HTML_LINK_HOME: http://www.google.com
# +HTML_LINK_UP: http://www.bing.com

--------------------------------------------------------------------------------

*Mathematics*

#+BEGIN_org-demo
\[ \sin^2 x + \cos^2 x = \int_\pi^{\pi + 1} 1 dx = {3 \over 3} \]
#+END_org-demo

- Instead of ~\[...\]~, which displays a formula on its own line, centred, use
  ~$...$~ to show a formula inline.
- Captioned equations are numbered and can be referenced via links,
  as shown below.

#+BEGIN_org-demo :source-color green :result-color green
#+name: euler
\begin{equation}
e ^ {i \pi} + 1 = 0
\end{equation}

See equation [[euler]].
#+END_org-demo

--------------------------------------------------------------------------------

*Source code*
#+begin_org-demo :source-color custard :result-color custard
#+begin_src C -n
int tot = 1;                    (ref:start)
for (int i = 0; i != 10; i++)   (ref:loop)
   tot *= i;                    (ref:next)
printf("The factorial of 10 is %d", tot);
#+end_src
#+end_org-demo

The labels =(ref:name)= refer to the lines in the source code and can be
referenced with link syntax: ~[[(name)]]~. Hovering over the link, in the HTML
export, will dynamically highlight the corresponding line of code.  To strip-out
the labels from the displayed block, use ~-r -n~ in the header so it becomes
=#+begin_src C -r -n=, now the references become line numbers.

--------------------------------------------------------------------------------

Another reason to use Org:
If you use =:results raw=, you obtain *dynamic templates* that may use Org-markup:
#+begin_org-demo :source-color brown :result-color brown
#+BEGIN_SRC C :results raw replace
printf("*bold* +%d+ (strikethrough) /slanted/", 12345);
#+END_SRC

‚ôØ+RESULTS:
*bold* +12345+ (strikethrough) /slanted/
#+end_org-demo

The ~#+RESULTS:~ is obtained by pressing kbd:C-c_C-c on the ~src~ block, to execute
it and obtain its result.

Also: Notice that a C program can be run without a =main= ;-)

That is, we can write code /in between/ prose that is intended to be read like an
essay:

# This should be a URL, so that any includes will show the PNG.
# It does work locally too; but just in case...
# [[file:images/literate-programming.png]]
 [[file:https://alhassy.github.io/emacs.d/images/literate-programming.png]]

--------------------------------------------------------------------------------

+ badge:Lifemacs|CheatSheet|informational|https://alhassy.github.io/emacs.d/CheatSheet.pdf|Gnu-Emacs
  ‚áí A brief reference of Emacs keybindings; 2 pages
+ [[badge:Elisp|CheatSheet|success|https://alhassy.github.io/ElispCheatSheet/CheatSheet.pdf|Gnu-Emacs][Elisp cheat sheet]] ‚áí A /compact/ Emacs Lisp Reference; 7 pages

--------------------------------------------------------------------------------

*Single source of truth:* This mini-tutorial can be included into other Org files
by declaring
| ~#+include: ~/.emacs.d/init.org::#Mini-tutorial-on-Org-mode~ |

--------------------------------------------------------------------------------

For more, see https://orgmode.org/features.html.
#+end_details

** Intro to why Emacs                                               :ignore:
:PROPERTIES:
:CUSTOM_ID: Intro-to-why-Emacs
:END:

/Emacs is a flexible platform for developing end-user applications/
---unfortunately it is generally perceived as merely a text editor. Some people
use it specifically for one or two applications.

For example, [[https://www.youtube.com/watch?v=FtieBc3KptU][writers]] use it as an interface for Org-mode and others use it as an
interface for version control with Magit. [[https://orgmode.org/index.html#sec-4][Org]] is an organisation tool that can
be used for typesetting which subsumes LaTeX, generating many different formats
--html, latex, pdf, etc-- from a single source, keeping track of [[https://orgmode.org/worg/org-tutorials/index.html#orgff7b885][schedules]] &
task management, blogging, habit tracking, personal information management tool,
and [[http://orgmode.org/worg/org-contrib/][much more]].  Moreover, its syntax is so [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][natural]] that most people use it
without even knowing!  For me, Org allows me to do literate programming: I can
program and document at the same time, with no need to seperate the two tasks
and with the ability to generate multiple formats and files from a single file.

#+begin_quote
If you are a professional writer‚Ä¶Emacs outshines all other editing software
in approximately the same way that the noonday sun does the stars.
It is not just bigger and brighter; it simply makes everything else vanish.
‚Äî[[http://project.cyberpunk.ru/lib/in_the_beginning_was_the_command_line/][Neal Stephenson]], /In the beginning was the command line/
#+end_quote

  + Extensible ‚áí IDEs are generally optimised for one framework, unlike Emacs!
      # Emacs is a live interpreter for ELisp.
    - You can /program/ Emacs to /automate/ anything you want.
      # Even arrow keys and characters can be customised, via self-insert-command!
    - Hence, it's an /environment/, not just an editor.
    - ‚áí Unified keybinding across all tools in your environment.

    Users are given a high-level full-featured programming language,
    not just a small configuration language. For the non-programmers,
    there is Custom, a friendly point-and-click customisation interface.
    # with support for a large portion of Common Lisp
  + Self Documented ‚áí Simply [[kbd:M-x info-apropos]] or kbd:C-h_d to search all manuals or
    look up any function provided by Emacs!
  + [[https://en.wikipedia.org/wiki/Emacs#History][Mature]] ‚áí tool with over 40 years of user created features
    - Plugins for nearly everything!
    - No distinction between built-ins and user-defined features! (Lisp!)
    - You can alter others' code [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][without even touching the source]].
      * Advising functions and ‚Äòhooking‚Äô functionality onto events.
  + [[https://www.gnu.org/philosophy/free-sw.html][Free software]] ‚áí It will never die!
    - Emacs is one of the oldest open source projects still under developement.
    # - Unlike other certain editors, Emacs' source is completely open.

Of course Emacs comes with the basic features of a text editor, but it is much more;
for example, it comes with a powerful notion of ‚Äòundo‚Äô: Basic text editors have a single stream of undo,
yet in Emacs, we have a tree --when we undo and make new edits, we branch off in our editing stream
as if our text was being version controlled as we type! --We can even switch between such branches!

#+begin_src emacs-lisp :tangle no :noweb-ref undo-tree-setup
;; Allow tree-semantics for undo operations.
(use-package undo-tree
  :diminish                       ;; Don't show an icon in the modeline
  :bind ("C-x u" . undo-tree-visualize)
  :hook (org-mode . undo-tree-mode) ;; For some reason, I need this. FIXME.
  :config
    ;; Always have it on
    (global-undo-tree-mode)

    ;; Each node in the undo tree should have a timestamp.
    (setq undo-tree-visualizer-timestamps t)

    ;; Show a diff window displaying changes between undo nodes.
    (setq undo-tree-visualizer-diff t))

;; Execute (undo-tree-visualize) then navigate along the tree to witness
;; changes being made to your file live!
#+end_src
( The above snippet has a ~noweb-ref~: It is presented here in a natural
position, but is only executable once ~use-package~ is setup and so it
is weaved there! We can /present/ code in any order and /tangle/ it to
the order the compilers need it to be! )

/Emacs is an extensible editor: You can make it into the editor of your dreams!/
You can make it suited to your personal needs.
If there's a feature you would like, a behaviour your desire, you can simply code that into Emacs with
a bit of Lisp. As a programming language enthusiast, for me Emacs is my default Lisp interpreter
and a customisable IDE that I use for other programming languages
--such as C, Haskell, Agda, Lisp, and Prolog.
Moreover, being a Lisp interpreter, we can alter the look and feel of Emacs live, without having
to restart it --e.g., press kbd:C-x_C-e after the final parenthesis of ~(scroll-bar-mode 0)~
to run the code that removes the scroll-bar.

#+begin_quote
/I use Emacs every day. I rarely notice it. But when I do, it usually brings me joy./
‚îÄ[[https://so.nwalsh.com/2019/03/01/emacs][Norman Walsh]]
#+end_quote

I have used Emacs as an interface for developing [[https://github.com/alhassy/CheatSheet#cheatsheet-examples][cheat sheets]], for making my
blog, and as an application for ‚Äòinteractively learning C‚Äô. If anything Emacs is
more like an OS than just a text editor --‚Äúliving within Emacs‚Äù provides an
abstraction over whatever operating system my machine has: [[https://www.fugue.co/blog/2015-11-11-guide-to-emacs.html][It's so easy to take
everything with me.]] Moreover, the desire to mould Emacs to my needs has made me
a better programmer: I am now a more literate programmer and, due to Elisp's
documentation-oriented nature, I actually take the time and effort to make
meaningful documentation --even when the project is private and will likely only
be seen by me.

#+begin_quote
/Seeing Emacs as an editor is like seeing a car as a seating-accommodation./ -- [[https://karl-voit.at/2015/10/23/Emacs-is-not-just-an-editor/][Karl Voit]]
#+end_quote
# Comparing Emacs to an editor is like comparing GNU/Linux to a word processor. -- [[https://karl-voit.at/2015/10/23/Emacs-is-not-just-an-editor/][Karl Voit]]

** ¬† /Emacs is a flexible platform for developing end-user applications/
:PROPERTIES:
:CUSTOM_ID: Emacs-is-a-flexible-platform-for-developing-end-user-applications
:END:
Just as a web browser is utilised as a platform for deploying applications,
   or ‚Äòextensions‚Äô, written in JavaScript that act on HTML documents, Emacs is a
   platform for deploying applications written in Emacs Lisp that act on buffers
   of text.  In the same vein, people who say Emacs having Tetris is bloat are
   akin to non-coders who think their browser has bloat since it has a ‚Äúview
   page source‚Äù feature ---which nearly all browsers have, yet it's only useful
   to web developers. Unlike a web browser in which the user must get accustomed
   to its features, Emacs is customised to meet the needs of its user.  (
   Incidentally, Emacs comes bundled with a web browser. )

   #+begin_quote
   In the case of Emacs the boundary between user and programmer is blurred as
   adapting the environment to one‚Äôs needs is [[https://www.gnu.org/software/emacs/emacs-paper.html][already an act of programming with
   a very low barrier to entry.]]    ---[[https://elephly.net/posts/2016-02-14-ilovefs-emacs.html][rekado]]
   #+END_quote

   #+begin_box
   /Don't just get used to your tool, make it get used to you!/
   #+end_box

   Emacs is not just an editor, but a host for running Lisp applications!

   For example, Emacs is shipped as a language-specific IDE to a number of
   communities ---e.g., Oz, Common Lisp, and, most notably, Agda.  Emacs is a
   great IDE for a language ---one just needs to provide a ‚Äòmajor mode‚Äô and will
   then have syntax highlighting, code compleition, jumping to definitions, etc.
   There is no need to make an IDE from scratch.

** The Power of Text Manipulation
:PROPERTIES:
:CUSTOM_ID: The-Power-of-Text-Manipulation
:END:
 Emacs has ways to represent all kinds of information as text.

 E.g., if want to make a regular expression rename of files in a directory,
 there's no need to learn about a batch renaming tool:
 [[kbd:M-x dired ‚ü®RET‚ü© M-x wdired-change-to-wdired-mode]] now simply perform a /usual/
 find-and-replace, then save with the /usual/ kbd:C-x_C-s to effect the changes!

 Likewise for other system utilities and services (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

Moreover, as will be shown below, you can literally use [[https://github.com/zachcurry/emacs-anywhere/#usage][Emacs anywhere]]
for textually input in your operating system --no copy-paste required.

** Keyboard Navigation and Alteration
:PROPERTIES:
:CUSTOM_ID: Keyboard-Navigation-and-Alteration
:END:

Suppose you wrote a paragraph of text, and wanted to ‚Äòborder‚Äô it up for
emphasies in hypens. Using the mouse to navigate along with a copy-paste of the
hypens is vastely inferior to the incantation [[kbd:M-{ C-u 80 - RET M-} C-u 80 -
RET]].  If we want to border up the previous ùìÉ-many paragraphs, we simply prefix
kbd:M-{,} above with kbd:C-u_ùìÉ ---a manual approach would have us count ùìÉ and
slowly scroll.  ( Exercise: What incantation of keys ‚Äòunderlines‚Äô the current
line with /only/ the necessary amount of dashes?  ---Solution in the source
file. )
# =C-a C-k C-y RET C-y C-SPC C-a C-M-% . RET - RET !=

‚áí [[https://support.apple.com/en-ca/HT201236][MacOS supports]] many Emacs shortcuts, system-wide, such as kbd:C-a/e, kbd:C-d, kbd:C-k/y,
 kbd:C-o, kbd:C-p/n and even kbd:C-t for transposing two characters.  ‚áê

** Emacs Proverbs as Koan
:PROPERTIES:
:CUSTOM_ID: Emacs-Proverbs-as-Koan
:END:

Below is an extract from William Cobb's ‚ÄúReflections on the Game of Go‚Äù, with
minor personalised adjustements for Emacs. Enjoy!

The Japanese term /satori/ refers to the experience of enlightenment, the
realisation of how things really are that is the primary aim of practice and
meditation. However, the Zen tradition is famous for claiming that one cannot
say what it is that one realises, that is, one cannot articulate the content of
the enlightenment experience. Although it makes everything clear, it is an experience
beyond words. Instead of being given an explanation of how things are, the student of
Zen hears sayings called /koan/, often somewhat paradoxical in character, that come
from those who are enlightened:

+ ‚ÄúThere are no CTRL and META.‚Äù
+ ‚ÄúIf you meet an Emacs you dislike, kill it.‚Äù
+ ‚ÄúNo one knows Emacs.‚Äù
+ ‚ÄúOne can only learn Emacs by living within it.‚Äù
+ ‚ÄúTo know Org mode is to know oneself.‚Äù

It is important to realise that /koan/ are intended to move you off of one path
and onto another. They are not just attempts to mystify you. For example,
the first proverb is in regards to newcomers complaining about too many
keybinings ---eventually it's muscle memory---, whereas the second is about
using the right tool for the right task ---Emacs is not for everyone. The fourth
is, well, Emacs is an operating system.

** Possibly Interesting Reads
:PROPERTIES:
:CUSTOM_ID: Possibly-Interesting-Reads
:END:
+ [[https://www.gnu.org/software/emacs/tour/][The Emacs Tour]]
+ [[https://sachachua.com/blog/series/a-visual-guide-to-emacs/][How to Learn Emacs: A Hand-drawn One-pager for Beginners / A visual tutorial]]
+ [[http://emacsrocks.com/][Video Series on Why Emacs Rocks]] ---catch the enthusiasm!
+ [[https://www.gnu.org/software/emacs/emacs-paper.html][EMACS: The Extensible, Customizable Display Editor]]
     # - This paper was written by Richard Stallman in 1981 and delivered in the
     #  ACM Conference on Text Processing.
     ‚ÄúThe programmable editor is an outstanding opportunity to learn to program!‚Äù
+ [[https://www.gnu.org/philosophy/free-sw.html][What is free software?]]
   # + Link to emacs main site, [[https://www.gnu.org/software/emacs/][Emacs]] .
+ [[http://ehneilsen.net/notebook/orgExamples/org-examples.html#sec-18][Emacs org-mode examples and cookbook]]
+ [[https://m00natic.github.io/emacs/emacs-wiki.html][An Opinionated Emacs guide for newbies and beyond]]
+ [[https://tuhdo.github.io/emacs-tutor.html][Emacs Mini-Manual, Part I of III]]
  # + The [[http://tuhdo.github.io/emacs-tutor.html#orgheadline63][Emacs Mini Manual]], or
+ [[https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org][Org and R Programming]] ---a tutorial on literate programming, e.g., evaluating code within ~src~ bloc.
+ Reference cards for [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][GNU Emacs]], [[https://www.gnu.org/software/emacs/refcards/pdf/orgcard.pdf][Org-mode]], and [[https://github.com/alhassy/ElispCheatSheet/blob/master/CheatSheet.pdf][Elisp]].
+ [[https://www.reddit.com/r/emacs/comments/6fytr5/when_did_you_start_using_emacs/][‚ÄúWhen did you start using Emacs‚Äù discussion on Reddit]]
+ [[https://david.rothlis.net/emacs/howtolearn.html][‚ÄúHow to Learn Emacs‚Äù]]
+ [[https://orgmode.org/index.html#sec-4][The Org-mode Reference Manual]] or [[https://orgmode.org/worg/][Worg: Community-Written Docs]] which includes a [[https://orgmode.org/worg/org-tutorials/index.html][meta-tutorial]].
+ [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]: A community driven list of useful Emacs packages, libraries and others.
+ [[https://github.com/caisah/emacs.dz][A list of people's nice emacs config files]]
  #  + [[https://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][Stackexchange: Using org-mode to structure config files]]
+ [[http://emacslife.com/how-to-read-emacs-lisp.html][Read Lisp, Tweak Emacs: How to read Emacs Lisp so that you can customize Emacs]]
+ [[https://practicaltypography.com/why-racket-why-lisp.html][Why Racket? Why Lisp?]]

---If eye-candy, a sleek and beautiful GUI, would entice you then consider starting with [[http://spacemacs.org/][spacemacs]].
   Here's a helpful [[https://www.youtube.com/watch?v=hCNOB5jjtmc][installation video]], after which you may want to watch
   [[https://www.youtube.com/watch?v=PVsSOmUB7ic][Org-mode in Spacemacs]] tutorial---

Remember: Emacs is a flexible platform for developing end-user applications; e.g., this configuration file
is at its core an Emacs Lisp program that yields the editor of my dreams
--it encourages me to grow and to be creative, and I hope the same for all who use it;
moreover, it reflects my personality such as what I value and what I neglect in my workflow.

# why emacs ---not marching to someone-else's tune!
#+begin_quote org
I‚Äôm stunned that you, as a professional software engineer, would eschew inferior
computer languages that hinder your ability to craft code, but you put up with
editors that bind your fingers to someone else‚Äôs accepted practice. ---[[http://www.howardism.org/Technical/Emacs/why-emacs.html][Howard
Abrams]]
#+end_quote
** Fun commands to try out
:PROPERTIES:
:CUSTOM_ID: Fun-commands-to-try-out
:END:
Finally, here's some fun commands to try out:
+ ~M-x doctor~ ---generalising the idea of rubber ducks
+ ~M-x tetris~  or ~M-x gomoku~ or ~M-x snake~---a break with a classic
  - ~C-u ùìÉ M-x hanoi~ for the ùìÉ-towers of Hanoi
+ ~M-x butterfly~ ---in reference to [[https://xkcd.com/378/][‚Äúreal programmers‚Äù]]

# Then, ~M-x help-with-tutorial~ or ~C-h t~ to start the ~30 min tutorial.

A neat way to get started with Emacs is to solve a problem you have, such
as taking notes or maintaining an agenda ---both with Org-mode.

Before we get started‚Ä¶
** What Does Literate Programming Look Like?
:PROPERTIES:
:CUSTOM_ID: What-Does-Literate-Programming-Look-Like
:END:

Briefly put, literate programming in Emacs allows us to evaluate source code
within our text files, then using the results as values in other source
blocks. When presenting an algorithm, we can talk it out, with a full commentary
thereby providing ‚Äòreproducible research‚Äô: Explorations and resulting algorithms
are presented together in a natural style.

#+html: <p style="text-align:center">

:Src:
#+begin_src plantuml :file images/literate-programming.png :tangle no :exports results :eval never-export :results (progn (org-display-inline-images t t) "replace")
skinparam defaultTextAlignment center  /' Text alignment '/

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor red
skinparam titleBackgroundColor Aqua-CadetBlue
title Literate Programming with Org-Mode

actor You

You --> (Code) : Ideas
You --> (Text) : Ideas

[**Org Mode**] as Org

(Text) --> Org : Writing
(Code) --> Org : Writing

Org --[#green]> (Document) : ‚ÄòWeaving‚Äô
Org --[#green]> (RawCode)  : ‚ÄòTangeling‚Äô

database Computer as "**Computer**
---
interpreter
---
compiler"

cloud People {
:jasim:
:kathy:
}

(Document) --[#green]> People : PDF, HTML, Text
(RawCode) --[#green]> (Computer) : tex, java, c, py

center footer  ‚ô•‚Äø‚ô• Write once, generate many (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà
#+end_src
:End:
[[file:images/literate-programming.png]]
#
# (org-display-inline-images t t)
‚ü® This image was created in org-mode; details [[#Workflow-States][below]] or by looking at the source file üòâ ‚ü©
#+html: </p>

Here's an example of showing code in a natural style, but having the resulting
code appear in a style amicable to a machine. *Here's what you type:*
#+BEGIN_src org :tangle no
It's natural to decompose large problems,
,#+begin_src haskell :noweb-ref defn-of-f :tangle no
f = h ‚àò g
,#+end_src

But we need to define $g$ and $h$ /beforehand/ before we can use them. Yet it's
natural to ‚Äúmotivate‚Äù their definitions ---rather than pull a rabbit out of
hat. Org lets us do that!

Here's one definition,
,#+begin_src haskell :noweb-ref code-from-other-places :tangle no
g = ‚ãØ
,#+end_src

then the other.
,#+begin_src haskell :noweb-ref code-from-other-places :tangle no
h = ‚ãØ
,#+end_src

Of-course, we might also want a preamble:
,#+BEGIN_SRC haskell :tangle myprogram.hs
import ‚ãØ
,#+END_SRC

We can now tangle together the tagged code blocks in the order we want.
,#+BEGIN_SRC haskell :tangle myprogram.hs :comments none :noweb yes
<<code-from-other-places>>
<<defn-of-f>>
,#+END_SRC
( You can press ‚ÄúC-c C-v C-v‚Äù to see what this block expands into! )
#+END_src

Now kbd:C-c_C-v_C-t (doc:org-babel-tangle) yields a file named ~myprogram.hs~ with contents in an order
amicable to a machine.
#+BEGIN_SRC haskell :tangle no
import ‚ãØ

g = ‚ãØ
h = ‚ãØ
f = h ‚àò g
#+END_SRC

Interestingly, unlike certain languages, Haskell doesn't care too much about
declaration order.

*Warning!* If we have different language blocks tangled to the same file, then
they are tangled alphabetically ---e.g., if one of the blocks is marked
~emacs-lisp~ then its contents will be the very first one in the resulting source
file, since ~emacs-lisp~ begins with ~e~ which is alphabetically before ~h~ of
~haskell~.

+ [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming with Org-mode]]
+ [[http://ehneilsen.net/notebook/orgExamples/org-examples.html][Emacs org-mode examples and cookbook]]
+ [[https://leanpub.com/lit-config/read][Literate Config]] ---Online booklet

** Why a monolithic configuration?
:PROPERTIES:
:CUSTOM_ID: Why-a-monolithic-configuration
:END:

Why am I keeping my entire configuration ---from those involving cosmetics &
prose to those of agendas & programming--- in one file?  Being monolithic ---‚Äúa
large, mountain-sized, indivisible block of stone‚Äù--- is generally not ideal in
nearly any project: E.g., a book is split into chapters and a piece of software
is partitioned into modules. Using Org-mode, we can still partition our setup
while remaining in one file. An Emacs configuration is a personal, leisurely
project, and one file is a simple architecture: I don't have to worry about many
files and the troubles of moving content between them; instead, I have headings
and move content almost instantaneously ---org-refile by pressing ~w~ at the start
of the reader. Moreover, being one file, it is easy to distribute and to extract
artefacts from it ---such as the README for Github, the HTML for my blog, the
colourful PDF rendition, and the all-important Emacs Lisp raw code
file. Moreover, with a single ~#~ I can quickly comment out whole sections,
thereby momentarily disabling features.

There's no point in being modular if there's nothing explaining what's going on,
so I document.

The [[#Conclusion---Why-Configuration-Files-Should-be-Literate][concluding]] section of this read further argues the benefits of maintaining
literate, and monolithic, configuration files. As a convention, I will try to
motivate the features I set up and I will prefix my local functions with, well,
~my/~ ---this way it's easy to see all my defined functions, and this way I cannot
accidentally shadow existing utilities. Moreover, besides browsing the web, I do
nearly everything in Emacs and so the start-up time is unimportant to me: Once
begun, I have no intention of spawning another instance nor closing the current
one. ( Upon an initial startup using this configuration, it takes a total of
121 seconds to install all the packages featured here. )

                                     Enjoy!

* Booting Up
:PROPERTIES:
:CUSTOM_ID: Booting-Up
:END:

Let's decide on where we want to setup our declarations for personalising Emacs
to our needs. Then, let's bootstrap Emacs' primintive packaging mechanism with a
slick interface ---which not only installs Emacs packages but also programs at
the operating system level, all from inside Emacs!  Finally, let's declare who
we are and use that to setup Emacs email service.

** ¬† =~/.emacs= vs. =init.org=
:PROPERTIES:
:CUSTOM_ID: emacs-vs-init-org
:END:

/Emacs is extensible/: When Emacs is started, it tries to load a user's Lisp
program known as an *initialisation (‚Äòinit‚Äô) file* which specifies how Emacs
should look and behave for you.  Emacs looks for the init file using the
filenames =~/.emacs.el=, =~/.emacs=, or =~/.emacs.d/init.el= ---it looks for the first
one that exists, in that order; at least it does so on my machine.  Below we'll
avoid any confusion by /ensuring/ that only one of them is in our system.
Regardless, execute [[kbd:C-h o user-init-file]] to see the name of the init file
loaded. Having no init file is tantamount to have an empty init file.

+ One can read about the various Emacs initialisation files [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File][online]] or
  within Emacs by the sequence [[kbd:C-h i m emacs RET i init file RET]].
+ A /friendly/ tutorial on ‚Äòbeginning a =.emacs= file‚Äô can be read
  [[https://www.gnu.org/software/emacs/manual/html_node/eintr/Beginning-init-File.html#Beginning-init-File][online]] or within Emacs by [[kbd:C-h i m emacs lisp intro RET i .emacs RET]].
+ After inserting some lisp code, such as ~(set-background-color "salmon")~, and
  saving, one can load the changes with [[kbd:M-x eval-buffer]], doc:eval-buffer.
+ In a terminal, use ~emacs -Q~ to open emacs without any initialisation files.

# Emacs is a stateful Lisp-based machine!

Besides writing Lisp in an init file, one may use Emacs' customisation
interface, [[kbd:M-x customize]]: Point and click to change Emacs to your needs. The
resulting customisations are, by default, automatically thrown into your init
file ---=~/.emacs= is created for you if you have no init file.  This interface is
great for beginners.
# but one major drawback is that it's a bit difficult to
# share settings since it's not amicable to copy-pasting.
#
# Unless suggested otherwise, Emacs writes stuff to =~.emacs= automatically.

We shall use =~/.emacs.d/init.el= as the initialisation file so that /all/ of our
Emacs related files live in the /same/ directory: =~/.emacs.d/=.

A raw code file is difficult to maintain, especially for a /large/ system such as
Emacs. Instead, we're going with a ‚Äòliterate programming‚Äô approach: The
intialisation configuration is presented in an essay format, along with headings
and subheadings, intended for consumption by humans such as myself, that,
incidentally, can be ‚Äòtangled‚Äô into a raw code file that is comprehensible by a
machine. We achieve this goal using [[#Life-within-Org-mode][org-mode]] ---/Emacs' killer app/--- which is
discussed in great detail later on.

#+begin_details "/Adventure time!/ ‚ÄúHoney, where's my init?‚Äù"
link-here:Adventure-time-Honey-where's-my-init
Let's use the three possible locations for the initialisation files
to explore how Emacs finds them. Make the following three files.

_~/.emacs.el_
#+BEGIN_SRC emacs-lisp :tangle no
;; Emacs looks for this first;
(set-background-color "chocolate3")
(message-box ".emacs.el says hello")
#+END_SRC

_~/.emacs_
#+BEGIN_SRC emacs-lisp :tangle no
;; else; looks for this one;
(set-background-color "plum4")
(message-box ".emacs says hello")
#+END_SRC

_~/.emacs.d/init.el_
#+BEGIN_SRC emacs-lisp :tangle no
;; Finally, if neither are found; it looks for this one.
(set-background-color "salmon")
(message-box ".emacs.d/init.el says hello")
#+END_SRC

Now restart your Emacs to see how there super tiny initilaisation files
affect your editor. Delete some of these files in-order for others to take effect!
#+end_details

#+begin_details Adventure time! Using Emacs‚Äô Easy Customisation Interface
link-here:Adventure-time-Using-Emacs'-Easy-Customisation-Interface
We have chosen not to keep configurations in ~~/.emacs~ since
Emacs may explicitly add, or alter, code in it.

Let's see this in action!

Execute the following to see additions to the ~~/.emacs~ have been added by
‚Äòcustom‚Äô.
 1. [[kbd:M-x customize-variable RET line-number-mode RET]]
 2. Then press: kbd:toggle, kbd:state, then [[kbd:1]].
 3. Now take a look: [[kbd:C-x C-f ~/.emacs]]
#+end_details

#+begin_details Support for ‚ÄòCustom‚Äô
link-here:Support-for-Custom
Let the Emacs customisation GUI insert configurations into its own file, not
touching or altering my initialisation file.  For example, I tend to have local
variables to produce ~README.org~'s and other matters, so Emacs' Custom utility
will remember to not prompt me each time for the safety of such local variables.

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(ignore-errors (load custom-file)) ;; It may not yet exist.
#+end_src

:No_longer_true:
Speaking of local variables, let's always load ones we've already marked as safe
---see the bottom of the source of this file for an example of local variables.
( At one point, all my files had locals! )
#+BEGIN_SRC emacs-lisp :tangle no
(setq enable-local-variables :safe)
#+END_SRC
:End:
#+end_details

** Who am I?
:PROPERTIES:
:CUSTOM_ID: Who-am-I
:END:
Let's set the following personal Emacs-wide variables ---to be used locations
such as email.
#+begin_src emacs-lisp
(setq user-full-name    "Musa Al-hassy"
      user-mail-address "alhassy@gmail.com")
#+end_src

For some fun, run this cute method.
#+BEGIN_SRC emacs-lisp :tangle no
(animate-birthday-present user-full-name)
#+END_SRC

** Emacs Package Manager
:PROPERTIES:
:CUSTOM_ID: Emacs-Package-Manager
:END:
# Installing Emacs packages directly from source

There are a few ways to install packages ---run kbd:C-h_C-e for a short
overview.  The easiest, for a beginner, is to use the command
doc:package-list-packages then find the desired package, press [[kbd:i]] to mark it
for installation, then install all marked packages by pressing [[kbd:x]].

+ /Interactively/: [[kbd:M-x list-packages]] to see all melpa packages that can install
  - Press kbd:Enter on a package to see its description.
+ Or more quickly, to install, say, unicode fonts: [[kbd:M-x package-install RET
  unicode-fonts RET]].

‚ÄúFrom rags to riches‚Äù: Recently I switched to Mac ---first time trying the OS.
I had to do a few ~package-install~'s and it was annoying.  I'm looking for the
best way to package my Emacs installation ---including my installed packages and
configuration--- so that I can quickly install it anywhere, say if I go to
another machine.  It seems doc:use-package allows me to configure and auto
install packages.  On a new machine, when I clone my ~.emacs.d~ and start Emacs,
on the first start it should automatically install and compile all of my
packages through ~use-package~ when it detects they're missing. ‚ô•‚Äø‚ô•

First we load ~package~, the built-in package manager.  It is by default only
connected to the GNU ELPA (Emacs Lisp Package Archive) repository, so we
extended it with other popular repositories; such as the much larger [[https://melpa.org/#/][MELPA]]
([[https://github.com/melpa/melpa][Milkypostman's ELPA]]) ---it builds packages directly from the source-code
repositories of developers rather than having all packages in one repository.
#+BEGIN_SRC emacs-lisp
;; Make all commands of the ‚Äúpackage‚Äù module present.
(require 'package)

;; Internet repositories for new packages.
(setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                         ("gnu"       . "http://elpa.gnu.org/packages/")
                         ("melpa"     . "http://melpa.org/packages/")))

;; Update local list of available packages:
;; Get descriptions of all configured ELPA packages,
;; and make them available for download.
(package-refresh-contents)
#+END_SRC

- All installed packages are placed, by default, in =~/.emacs.d/elpa=.
- *Neato:* /If one module requires others to run, they will be installed automatically./

:Faq:
If there are issues with loading the archives, say, "Failed to download ‚Äògnu‚Äô
archive."  then ensure you can both read and write, recursively, to your
.emacs.d/ E.g., within emacs try to execute (package-refresh-contents) and
you'll observe a permissions error.
:End:

The declarative configuration tool [[https://github.com/jwiegley/use-package/][use-package]] is a macro/interface that manages
our packages and the way they interact.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

We can now invoke ~(use-package XYZ :ensure t)~ which should check for the ~XYZ~
package and makes sure it is accessible.  If the file is not on our system, the
~:ensure t~ part tells ~use-package~ to download it ---using the built-in ~package~
manager--- and place it somewhere accessible, in =~/.emacs.d/elpa/= by default.
By default we would like to download packages, since I do not plan on installing
them manually by downloading Lisp files and placing them in the correct places
on my system.
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

Notice that doc:use-package /allows us to tersely organise a package's
configuration/ ---and that it is /not/ a package manger, but we can make it one by
having it automatically install modules, when needed, using ~:ensure t~.

#+begin_details Super Simple ‚Äòuse-package‚Äô Mini-tutorial
link-here:Super-Simple-‚Äòuse-package‚Äô-Mini-tutorial
Here are common keywords we will use, in super simplified terms.

  - ~:init   f‚ÇÅ ‚Ä¶ f‚Çô~  /Always/ executes code forms ~f·µ¢~ /before/ loading a package.
  - ~:diminish str~  Uses /optional/ string ~str~ in the modeline to indicate
                   this module is active. Things we use often needn't take
                   real-estate down there and so no we provide no ~str~.
  - ~:config f‚ÇÅ ‚Ä¶ f‚Çô~ /Only/ executes code forms ~f·µ¢~ /after/ loading a package.

    The remaining keywords only take affect /after/ a module loads.

  - ~:bind ((k‚ÇÅ . f‚ÇÅ) ‚Ä¶ (k‚Çô . f‚Çô)~ Lets us bind keys ~k·µ¢~, such as
    ~"M-s o"~, to functions, such as =occur=.
    * When /n = 1/, the extra outer parenthesis are not necessary.
  - ~:hook ((m‚ÇÅ ‚Ä¶ m‚Çô) . f)~ Enables functionality ~f~ whenever we're in one of the
    modes ~m·µ¢~, such as ~org-mode~. The ~. f~, along with the outermost parenthesis,
    is optional and defaults to the name of the package ---Warning: Erroneous
    behaviour happens if the package's name is not a function provided by the
    package; a common case is when package's name does /not/ end in ~-mode~,
    leading to the invocation ~((m‚ÇÅ ‚Ä¶ m‚Çô) . <whatever-the-name-is>-mode)~ instead.
    # More generally, it let's us hook functions f·µ¢, which may depend on the
    # current mode, to modules m·µ¢.
    Additionally, when /n = 1/, the extra outer parenthesis are not necessary.

    Outside of =use-package=, one normally uses a ~add-hook~ clause.  Likewise, an
    ‚Äòadvice‚Äô can be given to a function to make it behave differently ---this is
    known as ‚Äòdecoration‚Äô or an ‚Äòattribute‚Äô in other languages.

  - ~:custom (k‚ÇÅ v‚ÇÅ d‚ÇÅ) ‚Ä¶ (k‚Çô v‚Çô d‚Çô)~ Sets a package's custom variables ~k·µ¢~ to have
    values ~v·µ¢~, along with /optional/ user documentation ~d·µ¢~ to explain to yourself,
    in the future, why you've made this decision.

    This is essentially ~setq~ within ~:config~.

  - Use the standalone keyword ~:disabled~ to turn off loading
      a module that, say, you're not using anymore.
#+end_details

We now bootstrap ~use-package~.

The use of ~:ensure t~ only installs absent modules, but it does no updating.
Let's set up [[https://github.com/rranelli/auto-package-update.el][an auto-update mechanism]].
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :config
  ;; Delete residual old versions
  (setq auto-package-update-delete-old-versions t)
  ;; Do not bother me when updates have taken place.
  (setq auto-package-update-hide-results t)
  ;; Update installed packages at startup if there is an update pending.
  (auto-package-update-maybe))
#+END_SRC

Here's another example use of ~use-package~.  Later on, I have a ‚Äúshow recent files
pop-up‚Äù command set to ~C-x C-r~; but what if I forget? This mode shows me all key
completions when I type ~C-x~, for example.  Moreover, I will be shown other
commands I did not know about! Neato :-)
#+BEGIN_SRC emacs-lisp
;; Making it easier to discover Emacs key presses.
(use-package which-key
  :diminish
  :config (which-key-mode)
          (which-key-setup-side-window-bottom)
          (setq which-key-idle-delay 0.05))
#+END_SRC
‚ü® Honestly, I seldom even acknowledge this pop-up; but it's always nice to show
to people when I'm promoting Emacs. ‚ü©

Above, the ~:diminish~ keyword indicates that we do not want the mode's name to be
shown to us in the modeline ---the area near the bottom of Emacs.  It does so by
using the ~diminish~ package, so let's install that.
#+begin_src emacs-lisp
(use-package diminish
  :defer 5
  :config ;; Let's hide some markers.
    (diminish org-indent-mode))
#+end_src

Here are other packages that I want to be installed onto my machine.
#+BEGIN_SRC emacs-lisp
;; Haskell's cool
(use-package haskell-mode :defer t)

;; Lisp libraries with Haskell-like naming.
(use-package dash)    ;; ‚ÄúA modern list library for Emacs‚Äù
(use-package s   )    ;; ‚ÄúThe long lost Emacs string manipulation library‚Äù.

;; Let's use the ‚Äús‚Äù library.
(defvar my/personal-machine?
  (not (s-contains? "MacBook-Pro" (shell-command-to-string "uname -a")))
  "Is this my personal machine, or my work machine?")

(ignore-errors (load-file "~/Desktop/work_secrets.el"))

;; Library for working with system files;
;; e.g., f-delete, f-mkdir, f-move, f-exists?, f-hidden?
(use-package f)
#+END_SRC

Note:
+ [[https://github.com/magnars/dash.el][dash]]: ‚ÄúA modern list library for Emacs‚Äù
  - E.g., ~(--filter (> it 10) (list 8 9 10 11 12))~
+ [[https://github.com/magnars/s.el][s]]: ‚ÄúThe long lost Emacs string manipulation library‚Äù.
  - E.g., ~s-trim, s-replace, s-join~.

Remember that snippet for ~undo-tree~ in the introductory section?
Let's activate it now, after ~use-package~ has been setup.
#+BEGIN_SRC emacs-lisp :noweb yes
  <<undo-tree-setup>>
#+END_SRC

#+begin_box DRY: Don't Repeat Yourself!
In the HTML export, above it /looks/ like I just copy-pasted the undo tree setup
from earlier, but that is not the case! All I did was *pink:declare* to Org that
I'd like that /named snippet/ to be tangled now, here in the resulting code file.
#+begin_src org :tangle no
,#+begin_src emacs-lisp :noweb yes
  <<undo-tree-setup>>
,#+end_src
#+end_src

You can press kbd:C-c_C-v_C-v, doc:org-babel-expand-src-block, to see what this
block expands into ---which is what was shown above.
#+end_box

--------------------------------------------------------------------------------

link-here:Quelpa
[[https://github.com/quelpa/quelpa-use-package][Quelpa]] allows us to build Emacs packages directly from source repositories.  It
derives its name from the German word /Quelle/, for /souce/ [code], adjoined to
ELPA.  Its ~use-package~ interface allows us to use ~use-package~ like normal but
when we want to install a file from souce we use the keyword ~:quelpa~.

# Example invocation.
# (quelpa '(discover-my-major :fetcher git :url "https://framagit.org/steckerhalter/discover-my-major.git"))
#+BEGIN_SRC emacs-lisp
(use-package quelpa
  :defer 5
  :custom (quelpa-upgrade-p t "Always try to update packages")
  :config
  ;; Get ‚Äòquelpa-use-package‚Äô via ‚Äòquelpa‚Äô
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package))
#+END_SRC

Let's use this to obtain an improved info-mode from the EmacsWiki. [Disabled for
now]
#+BEGIN_SRC emacs-lisp :tangle no
(use-package info+
  :disabled
  :quelpa (info+ :fetcher wiki :url "https://www.emacswiki.org/emacs/info%2b.el"))
#+END_SRC

** Installing OS packages, and automatically keeping my system up to data, from within Emacs
:PROPERTIES:
:CUSTOM_ID: Installing-OS-packages-and-automatically-keeping-my-system-up-to-data-from-within-Emacs
:END:

Sometimes Emacs packages depend on existing system binaries, ~use-package~ let's
us ensure these exist using the ~:ensure-system-package~ keyword extension.

- This is like ~:ensure t~ but operates at the OS level and uses your default
  OS package manager.

Let's obtain the extension.
#+BEGIN_SRC emacs-lisp
;; Auto installing OS system packages
(use-package use-package-ensure-system-package
  :defer 5
  :config (system-packages-update))

;; Please don't bother me when shell buffer names are in use, just make a new
;; buffer.
(setq async-shell-command-buffer 'new-buffer)

;; Display the output buffer for asynchronous shell commands only when the
;; command generates output.
(setq async-shell-command-display-buffer nil)

;; Don't ask me if I want to kill a buffer with a live process attached to it;
;; just kill it please.
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))

;; Ensure our operating system is always up to date.
;; This is run whenever we open Emacs & so wont take long if we're up to date.
;; It happens in the background ^_^
;;
;; After 5 seconds of being idle, after starting up.
#+END_SRC

After an update to Mac OS, one may need to [[https://emacs.stackexchange.com/questions/53026/how-to-restore-file-system-access-in-macos-catalina][restore file system access privileges
to Emacs]].

Here's an example use for Emacs packages that require OS packages:
#+BEGIN_SRC emacs-lisp :tangle no
(shell-command-to-string "type rg") ;; ‚áí rg not found
(use-package rg
  :ensure-system-package rg) ;; ‚áí There's a buffer *system-packages*
                             ;;   installing this tool at the OS level!
#+END_SRC
If you look at the ~*Messages*~ buffer, via ~C-h e~, on my machine it says
~brew install rg: finished~ ---it uses ~brew~ which is my OS package manager!

+ The [[https://github.com/jwiegley/use-package#use-package-ensure-system-package][use-package-ensure-system-package]] documentation for a flurry of use cases.

The extension makes use of [[https://gitlab.com/jabranham/system-packages][system-packages]]; see its documentation to learn
more about managing installed OS packages from within Emacs. This is itself
a powerful tool, however it's interface ~M-x system-packages-install~ leaves much
to be desired ---namely, tab-compleition listing all available packages,
seeing their descriptions, and visiting their webpages.
This is remedied by [[https://github.com/emacs-helm/helm-system-packages][M-x helm-system-packages]] then ~RET~ to see a system
package's description, or ~TAB~ for the other features!
/This is so cool!/

#+BEGIN_SRC emacs-lisp
;; An Emacs-based interface to the package manager of your operating system.
(use-package helm-system-packages :defer t)
#+END_SRC

The Helm counterpart is great for /discovarability/, whereas
the plain ~system-packages~ is great for /programmability/.

#+begin_src emacs-lisp
(setq system-packages-noconfirm :do-not-prompt-me-about-confirms)

;; After 1 minute after startup, kill all buffers created by ensuring system
;; packages are present.
(run-with-timer 60 nil
 (lambda () (kill-matching-buffers ".*system-packages.*" t :kill-without-confirmation)))
#+end_src

It is tedious to arrange my program windows manually, and as such I love tiling
window managers, which automatically arrange them.  I had been using [[https://xmonad.org][xmonad]]
until recently when I obtained a Mac machine and now use [[https://ianyh.com/amethyst/][Amethyst]] ---‚ÄúTiling
window manager for macOS along the lines of xmonad.‚Äù

#+BEGIN_SRC emacs-lisp
;; Unlike the Helm variant, we need to specify our OS pacman.
(when (eq system-type 'darwin)
  (setq system-packages-package-manager 'brew))

;; If the given system package doesn't exist; install it.
(when (eq system-type 'darwin)
  (system-packages-ensure "amethyst")) ;; This is a MacOS specific package.

(ignore-errors (system-packages-ensure "google-chrome")) ;; My choice of web browser
(system-packages-ensure "microsoft-teams") ;; For remote work meetings
;; Pack, ship and run any application as a lightweight container
(system-packages-ensure "docker")
;; Free universal database tool and SQL client
(system-packages-ensure "dbeaver-community")
;; Kubernetes IDE
(system-packages-ensure "lens")
;; Platform built on V8 to build network applications
;; Also known as: node.js, node@16, nodejs, npm
(system-packages-ensure "node") ;; https://nodejs.org/
;; Nice: https://nodesource.com/blog/an-absolute-beginners-guide-to-using-npm/
;; Manage multiple Node.js versions
(shell-command "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash")
;; According to https://github.com/nvm-sh/nvm, nvm shouldn't be installed via brew.
#+END_SRC
# +BEGIN_SRC emacs-lisp :tangle no
# ;; Use ‚Äúbrew cask install‚Äù instead of ‚Äúbrew install‚Äù for installing programs.
# (setf (nth 2 (assoc 'brew system-packages-supported-package-managers))
#      '(install . "brew cask install"))
#+END_SRC

# For instance, let's install a tiling window manager: https://ianyh.com/amethyst/
# brew install --cask amethyst
Amethyst requires some more setup: Open its preferences, then...
    - Then select: =Mouse: Focus follows mouse=.
    - Also: =Shortcuts=, then disable ‚Äòincrease/decrease main pane count‚Äô bindings
      since they override the beloved Emacs =M-<,>= keys.

Neato! Now I can live in Emacs even more ^_^

--------------------------------------------------------------------------------

(*Open Scripting Architecture (OSA) Scripts*) Amethyst is great, but it has a
problem of randomly not working.  Unfortunatley it has no command line
interface, so let's make one in Emacs: Now kbd:‚åò-a_r relaunches Amethyst.
#+begin_details
#+begin_src emacs-lisp
(defun ‚åò-quit (app)
  "Kill application APP; e.g., ‚Äúamethyst‚Äù or ‚ÄúSafari‚Äù"
  (shell-command (format "osascript -e 'quit app \"%s\"'" app)))

(defun ‚åò-open (app)
 "Open application APP; e.g., ‚Äúamethyst‚Äù or ‚ÄúSafari‚Äù"
  (async-shell-command (format "osascript -e 'launch app \"%s\"'" app)))

;; (bind-key "???-a r" #'my/relaunch-amethyst)
(defun my/relaunch-amethyst () (interactive)
       (‚åò-quit "amethyst")
       (‚åò-open "amethyst"))
#+end_src

We use the ~osascript~ command to ~tell~ the [[https://en.wikibooks.org/wiki/AppleScript_Programming/System_Events][System Events]] ~application~ to issue
keystrokes to other applications. I found out about by Googling ‚ÄúHow to send
keystrokes from terminal‚Äù.

#+begin_src emacs-lisp
;; (bind-key "???-a c" #'amethyst/cycle-layout)
(defun amethyst/cycle-layout ()
  (interactive)
  (shell-command "osascript -e 'tell application \"System Events\" to keystroke space using {shift down, option down}'"))
#+end_src

If you get:
#+begin_src shell :tangle no
36:51: execution error: System Events got an error: osascript is not allowed to send keystrokes. (1002)
#+end_src

Then: Go to Security & Privacy -> Privacy tab -> Accessibility -> Add osascript (/usr/bin/osascript)

You may need to restart Emacs.

Reads:
+ [[https://eastmanreference.com/complete-list-of-applescript-key-codes][Complete list of AppleScript key codes]]
+ [[https://eastmanreference.com/how-to-automate-your-keyboard-in-mac-os-x-with-applescript][How to automate your keyboard in Mac OS X with AppleScript]]
#+end_details

I enter ‚Äú‚åò‚Äù using a TeX input method setup below (called ‚ÄúAgda‚Äù).

** Syncing to the System's =$PATH=
:PROPERTIES:
:CUSTOM_ID: Syncing-to-the-System's-PATH
:END:

For one reason or another, on OS X it seems that an Emacs instance
begun from the terminal may not inherit the terminal's environment
variables, thus making it difficult to use utilities like ~pdflatex~
when Org-mode attempts to produce a PDF.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

See the [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] documentation for setting other environment variables.

:Explicit_solution:
#+BEGIN_SRC emacs-lisp :tangle no
;; https://emacs.stackexchange.com/questions/4090/org-mode-cannot-find-pdflatex-using-mac-os

(defun set-exec-path-from-shell-PATH ()
  "Sets the exec-path to the same value used by the user shell"
  (let ((path-from-shell
         (replace-regexp-in-string
          "[[:space:]\n]*$" ""
          (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

;; call function now
(set-exec-path-from-shell-PATH)
#+END_SRC
:End:
** Restarting Emacs ---Keeping buffers open across sessions?
:PROPERTIES:
:CUSTOM_ID: Restarting-Emacs-Keeping-buffers-open-across-sessions
:END:

Sometimes I wish to close then reopen Emacs; unsurprisingly someone's
thought of implementing that.
#+BEGIN_SRC emacs-lisp
;; Provides only the command ‚Äúrestart-emacs‚Äù.
(use-package restart-emacs
  ;; If I ever close Emacs, it's likely because I want to restart it.
  :bind ("C-x C-c" . restart-emacs)
  ;; Let's define an alias so there's no need to remember the order.
  :config (defalias 'emacs-restart #'restart-emacs))
#+END_SRC

The following is disabled. I found it a nuisance to have my files
open across sessions ---If I'm closing Emacs, it's for a good reason.
#+begin_example emacs-lisp
;; Keep open files open across sessions.
(desktop-save-mode 1)
(setq desktop-restore-eager 10)
#+end_example

Instead, let's try the following: When you visit a file, point goes to the last
place where it was when you previously visited the same file.
#+BEGIN_SRC emacs-lisp
(setq-default save-place  t)
(setq save-place-file "~/.emacs.d/etc/saveplace")
#+END_SRC

** ¬†‚ÄúBeing at the Helm‚Äù ---Completion & Narrowing Framework
:PROPERTIES:
:CUSTOM_ID: Being-at-the-Helm-Completion-Narrowing-Framework
:END:

Whenever we have a choice to make from a list, [[http://tuhdo.github.io/helm-intro.html][Helm]] provides possible
completions and narrows the list of choices as we type.  This is extremely
helpful for when switching between buffers, =C-x b=, and discovering & learning
about other commands!  E.g., press ~M-x~ to see recently executed commands and
other possible commands! Press ~M-x~ and just start typing, methods mentioning
what you've typed are suddenly listed!

| Remembrance comes with time, until then /ask/ Emacs! |

/Try and be grateful!/
#+BEGIN_SRC emacs-lisp
(use-package helm
 :diminish
 :init (helm-mode t)
 :bind (("M-x"     . helm-M-x)
        ("C-x C-f" . helm-find-files)
        ("C-x b"   . helm-mini)     ;; See buffers & recent files; more useful.
        ("C-x r b" . helm-filtered-bookmarks)
        ("C-x C-r" . helm-recentf)  ;; Search for recently edited files
        ("C-c i"   . helm-imenu) ;; C.f. ‚ÄúC-x t m‚Äù (imenu-list)
        ("C-u C-c i" . imenu-list)
        ("C-h a"   . helm-apropos)
        ;; Look at what was cut recently & paste it in.
        ("M-y" . helm-show-kill-ring)

        :map helm-map
        ;; We can list ‚Äòactions‚Äô on the currently selected item by C-z.
        ("C-z" . helm-select-action)
        ;; Let's keep tab-completetion anyhow.
        ("TAB"   . helm-execute-persistent-action)
        ("<tab>" . helm-execute-persistent-action)))
#+END_SRC

Helm provides generic functions for completions to replace
tab-completion in Emacs with no loss of functionality.

+ The =execute-extended-command=, the default ‚ÄúM-x‚Äù, is replaced with ~helm-M-x~
  which shows possible command completions.

  Likewise with ~apropos~, which is helpful for looking up commands.
  It shows all meaningful Lisp symbols whose names match a given pattern.

+ The ‚ÄòHelm-mini‚Äô, ~C-x b~, shows all buffers, recently opened files,
  bookmarks, and allows us to create new bookmarks and buffers!

+ The ‚ÄòHelm-imenu‚Äô, ~C-c i~, yields a a menu of all ‚Äútop-level items‚Äù in a file;
  e.g., functions and constants in source code or headers in an org-mode file.

  ‚ü≥ Nifty way to familarise yourself with a new code base, or one from a while
  ago.

+ When Helm is active, ~C-x~ lists possible course of actions on the currently
  selected item.

When ~helm-mode~ is enabled, even help commands make use of it.
E.g., ~C-h o~ runs ~describe-symbol~ for the symbol at point,
and ~C-h w~ runs ~where-is~ to find the key binding of the symbol at point.
Both show a pop-up of other possible commands.

                            Here's a nifty tutorial:
                     [[http://tuhdo.github.io/helm-intro.html][A package in a league of its own: Helm]]

Let's ensure ~C-x b~ shows us: Current buffers, recent files, and bookmarks
---as well as the ability to create bookmarks, which is via ~C-x r b~ manually.
For example, I press ~C-x b~ then type any string and will have the option of
making that a bookmark referring to the current location I'm working in, or
jump to it if it's an existing bookmark, or make a buffer with that name,
or find a file with that name.
#+BEGIN_SRC emacs-lisp
(setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-bookmark-set
                                    helm-source-buffer-not-found))
#+END_SRC

Incidentally, Helm even provides an [[http://tuhdo.github.io/helm-intro.html#orgheadline24][interface]] for the ~top~ program via
~helm-top~. It also serves as an interface to popular search engines
and over 100 websites such as ~google, stackoverflow, ctan~, and ~arxiv~.
#+begin_src emacs-lisp
(system-packages-ensure "surfraw")
; ‚áí  ‚ÄúM-x helm-surfraw‚Äù or ‚ÄúC-x c s‚Äù
#+end_src
If we want to perform a google search, with interactive suggestions,
then invoke ~helm-google-suggest~ ---which can be acted for other serves,
such as Wikipedia or Youtube by ~C-z~. For more google specific options,
there is the ~google-this~ package.

Let's switch to a powerful searching mechanism -- [[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]].  It allows us to
not only search the current buffer but also the other buffers and to make live
edits by pressing ~C-c C-e~ when a search buffer exists. Incidentally, executing
~C-s~ on a word, region, will search for that particular word, region; then make
changes with ~C-c C-e~ and apply them by ~C-x C-s~.
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :bind  (("C-s"     . 'helm-swoop)           ;; search current buffer
          ("C-M-s"   . 'helm-multi-swoop-all) ;; Search all buffer
          ;; Go back to last position where ‚Äòhelm-swoop‚Äô was called
          ("C-S-s" . 'helm-swoop-back-to-last-point)
          ;; swoop doesn't work with PDFs, use Emacs' default isearch instead.
          ; :map pdf-view-mode-map ("C-s" . isearch-forward)
          )
  :custom (helm-swoop-speed-or-color nil "Give up colour for speed.")
          (helm-swoop-split-with-multiple-windows nil "Do not split window inside the current window."))
#+END_SRC

+            ~C-u ùìÉ C-s~ does a search but showing ùìÉ contextual lines!
+               ~helm-multi-swoop-all~, ~C-M-s~, lets us grep files anywhere!

:ThisBecameMoreAnnoyingThanUseful:
#+BEGIN_SRC emacs-lisp :tangle no
  ;; If there is no symbol at the cursor, use the last used words instead.
  (setq helm-swoop-pre-input-function
      (lambda ()
        (let (($pre-input (thing-at-point 'symbol)))
          (if (eq (length $pre-input) 0)
              helm-swoop-pattern ;; this variable keeps the last used words
            $pre-input))))

#+END_SRC

Press ~M-i~ after a search has executed to enable it for all buffers.

We can also limit our search to org files, or buffers of the same mode,
or buffers belonging to the same project!

Note that on the Mac, I can still perform default Emacs search using
/Cmd+f/.
:End:
:Old_ivy_counsel_swiper_shenanigans:
+ There is a super duper neato search capability we can utilise -- ~swiper~.
+ We also use the ~counsel~, a collection of completion, ~ivy~, enhanced versions of
  common Emacs commands.
#+begin_src emacs-lisp :tangle no
(use-package ivy ;; More powerful but ugly looking completetion framework.
                 ;; Helm is prettier.
                 ;; Needed for Counsel, below.
 :config

  ;; add ‚Äòrecentf-mode‚Äô and bookmarks to ‚Äòivy-switch-buffer‚Äô.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; does not count candidates
  (setq ivy-count-format "")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil))

(use-package counsel
  :bind*                              ; load when pressed
  (("C-s"     . swiper)
   ;; ("C-x C-r" . counsel-recentf)     ; search for recently edited
   ("<f1> l"  . counsel-find-library)   ; find an Emacs Lisp library
   ("<f2> u"  . counsel-unicode-char))) ; insert a unicode symbol using a pop-up
#+end_src

~swiper~ is an alternative to Emacs' default incremental search.
It shows an overview of all matches --navigate using arrow keys.
There is also a helm based version of swiper.
:end:

Lets also use doc:helm-do-grep-ag ([[kbd:C-x c M-g a]]) *search all files in the current
   directory for a particular (regexp) string*
   - Shows matches live as you type
   - Very helpful when looking for a definition of something
#+begin_src emacs-lisp
(system-packages-ensure "ag")
#+end_src

Finally, note that there is now a ~M-x helm-info~ command to show documentation,
possibly with examples, of the packages installed. For example,
~M-x helm-info RET dash RET -parition RET~ to see how the parition function from the
dash library works via examples ;-)
** Org-Mode Administrivia
:PROPERTIES:
:CUSTOM_ID: Org-Mode-Administrivia
:END:
:Updating_FAQ:

#+BEGIN_SRC emacs-lisp :tangle no
(shell-command "rm ~/.emacs.d/elpa/org-9.3/*.elc")
(byte-recompile-directory "~/.emacs.d/elpa/org-9.3/")
#+END_SRC

Easiest way get latest version of org-mode:
~M-x package-list-packages~, then select ~org~, then ~install~.

https://stackoverflow.com/questions/31855904/emacs-sees-the-directory-with-the-new-org-mode-version-but-loads-the-old-versio

https://emacs.stackexchange.com/questions/27597/how-to-update-org-to-latest-version-using-package-repos-git-clone-in-ubuntu
:End:

# Let's setup Org-mode so
# that we can quickly move between headings and org-blocks ---~n,p~ on heading
# starts and ~s-n,p~ on blocks---, then let's prettify the leading stars of
# headings, Org's formatting delimiters, and even its blocks delimiters by making
# them less intrusive thereby ‚Äòfading into the background‚Äô and drawing minimal
# attention.  This has been useful when promoting Org-mode by sharing my screen
# with others.
#

Let's conclude this ‚Äòboot-up‚Äô by getting /Emacs' killer app/, Org-mode, setup;
along with the extras that allow us to ignore heading names, but still utilise
their contents ---e.g., such as a heading named ‚Äòpreamble‚Äô that contains
org-mode setup for a file.

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :diminish org-indent-mode
    :config (require 'ox-extra)
            (ox-extras-activate '(ignore-headlines)))
#+end_src

~org-plus-contrib~ contain the files that are included with Emacs plus all
contributions from the [[https://code.orgmode.org/bzg/org-mode/src/master/contrib][org-mode repository]].
+ Use the ~:ignore:~ tag on headlines you'd like to have ignored, while not
  ignoring their content.
+ Use the ~:noexport:~ tag to omit a headline /and/ its contents.

#+begin_src emacs-lisp
;; Replace the content marker, ‚Äú‚ãØ‚Äù, with a nice unicode arrow.
(setq org-ellipsis " ‚§µ")

;; Fold all source blocks on startup.
(setq org-hide-block-startup t)

;; Lists may be labelled with letters.
(setq org-list-allow-alphabetical t)

;; Avoid accidentally editing folded regions, say by adding text after an Org ‚Äú‚ãØ‚Äù.
(setq org-catch-invisible-edits 'show)

;; I use indentation-sensitive programming languages.
;; Tangling should preserve my indentation.
(setq org-src-preserve-indentation t)

;; Tab should do indent in code blocks
(setq org-src-tab-acts-natively t)

;; Give quote and verse blocks a nice look.
(setq org-fontify-quote-and-verse-blocks t)

;; Pressing ENTER on a link should follow it.
(setq org-return-follows-link t)
#+END_SRC

I rarely use tables, but here is a useful [[http://notesyoujustmightwanttosave.blogspot.com/][Org-Mode Table Editing Cheatsheet]] and
a [[http://www.howardism.org/Technical/Emacs/spreadsheet.html][friendly tutorial]].

Moreover, since I end up using org-mode most of the time, let's make that the
default mode.
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'org-mode)
#+END_SRC

Finally, let's get some extra Org-mode mark-up goodies, such as ~kbd:C-c_C-e~
which renders as kbd:C-c_C-e.  Documentations and screenshots at:
https://alhassy.github.io/org-special-block-extras/
#+BEGIN_SRC emacs-lisp
(use-package org-special-block-extras
  :hook (org-mode . org-special-block-extras-mode)
  :custom
    ;; The places where I keep my ‚Äò#+documentation‚Äô
    (org-special-block-extras--docs-libraries
     '("~/org-special-block-extras/documentation.org"))
    ;; Disable the in-Emacs fancy-links feature?
    (org-special-block-extras-fancy-links
     '(elisp badge kbd link-here doc tweet))
    ;; Details heading ‚Äúflash pink‚Äù whenever the user hovers over them?
    (org-html-head-extra (concat org-html-head-extra "<style>  summary:hover {background:pink;} </style>"))
    ;; The message prefixing a ‚Äòtweet:url‚Äô badge
    (org-special-block-extras-link-twitter-excitement
     "This looks super neat (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà:")
  :config
  ;; Use short names like ‚Äòdefblock‚Äô instead of the fully qualified name
  ;; ‚Äòorg-special-block-extras--defblock‚Äô
    (org-special-block-extras-short-names))

;; Let's execute Lisp code with links, as in ‚Äúelisp:view-hello-file‚Äù.
(setq org-confirm-elisp-link-function nil)
#+END_SRC

** Password-locking files  ---‚Äúencryption‚Äù
:PROPERTIES:
:CUSTOM_ID: Password-locking-files-encryption
:END:

With the following incantation, we name our files ~ùí≥.ùí¥.gpg~ where ùí≥ is the file
name and ùí¥ is the usual extension, then upon save we will be prompted for an
encryption method, we can press kbd:Enter on ~OK~ to just provide a password for
that file. You can open that file /without/ the passphrase for a limited amount of
time ---i.e., it's cached, saved, for your current computing session until
logout--- or force authentication by invoking ~gpgconf --kill gpg-agent~.

#+begin_src emacs-lisp
(system-packages-ensure "gnupg") ;; i.e.,  brew install gnupg

;; ‚Äúepa‚Äù ‚âà EasyPG Assistant

;; Need the following in init to have gpg working fine:
;; force Emacs to use its own internal password prompt instead of an external pin entry program.
(setq epa-pinentry-mode 'loopback)

;; https://emacs.stackexchange.com/questions/12212/how-to-type-the-password-of-a-gpg-file-only-when-opening-it
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
;; No more needing to enter passphrase at each save ^_^
;;
;; Caches passphrase for the current emacs session?
#+end_src

/The purpose of encrypting a file is so that an adversary/ ---e.g., an immoral
computer administrator or a thief who stole your computer--- /will have to spend
so much decrypting the data than the data is actually worth./ As such, one uses
GPG keys...!

#+begin_details GPG Details
Trivia: ‚Äúgpg‚Äù stands for GnuPG, which abbreviates GNU Privacy Guard.

To obtain encrypted messages from others, you will need a ‚ÄúGPG key‚Äù: They use
/your/ ‚Äúpublic key‚Äù (which others can see) to encrypt a file, which only /you/ can
open since you have the /associated/ ‚Äúprivate key‚Äù (which only you see).

Possibly interesting reads:
+ [[https://www.bytedude.com/gpg-in-emacs/][GPG In Emacs | Bytedude]]
+ [[https://softwareengineering.stackexchange.com/questions/212192/what-are-the-advantages-and-disadvantages-of-cryptographically-signing-commits-a][What are the advantages and disadvantages of cryptographically signing commits and tags in Git? | Software Engineering Stack Exchange]]
#+end_details

** Hydra: Supply a prefix only once
:PROPERTIES:
:CUSTOM_ID: Hydra-Supply-a-prefix-only-once
:END:

Sometimes we have keybindings that share a common prefix, say ~C-c j~ and ~C-c k~,
and we invoke them in an arbitrary sequence, it would be nice to invoke the
shared prefix /only once/ thereby having:
| ~C-c j C-c j C-c k C-c k M-3 C-c j M-5 C-c k~ | ‚âà | ~C-c jjkk3j5k~ |

- The [[https://github.com/abo-abo/hydra#the-one-with-the-least-amount-of-code][‚Äúhydra-zoom‚Äù]] example from the documentation really showcases this utility.
- After the prefix is supplied, all extensions are shown in a minibuffer.

#+BEGIN_SRC emacs-lisp
;; Invoke all possible key extensions having a common prefix by
;; supplying the prefix only once.
(use-package hydra)
#+END_SRC

# Outdated image.
# Center image
# +ATTR_HTML: :style margin-left: auto; margin-right: auto;
# [[file:images/hydra.png]]

From the [[https://github.com/abo-abo/hydra][Hydra]] repository is a ‚Äòdescription for poets‚Äô:
#+begin_quote
Once you summon the Hydra through the prefixed binding (the body + any one
head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head,
arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his
original purpose, calling his proper command. This makes the Hydra very
seamless, it's like a minor mode that disables itself auto-magically.
#+end_quote

‚áí The [[https://github.com/abo-abo/hydra/wiki][Hydra Wiki]] has many example hydras for common uses cases ‚áê

Below are two examples; one to simplify textual navigation and another for
window navigation.
Yet another possible hydra would be to avoid remembering word operations, such
as copying a word, upcasing it, killing a word from anywhere within it ---in
contrast ~kill-word~ kills /to the end/ of the word---, etc. Likewise for line
operations, such as copying a line from anywhere in it.  See [[#Taking-a-tour-of-one's-edits][Taking a tour of
one's edits]] below for another small and useful example.

When there are multiple actions, it's nice to see such a menu displayed in the
middle of the frame; so we use [[https://github.com/Ladicle/hydra-posframe#hydra-posframe][hydra-posframe]]. Moreover, it can be useful to
group related actions under a common heading ---e.g., textual navigation may
occur at the line level or word level or screen level--- we obtain a nice
interface by declaraing hydras using [[https://github.com/jerrypnz/major-mode-hydra.el#get-started][pretty-hydra-define]] ---this saves us the
trouble of [[https://github.com/abo-abo/hydra#the-impressive-looking-one][formating docstrings using classic hydra]].

#+begin_src emacs-lisp
;; Show hydras overlyaed in the middle of the frame
(use-package hydra-posframe
  :quelpa (hydra-posframe :fetcher git :url
                          "https://github.com/Ladicle/hydra-posframe.git")
  :hook (after-init . hydra-posframe-mode)
  :custom (hydra-posframe-border-width 5))

;; Neato doc strings for hydras
(use-package pretty-hydra)
#+end_src

To /actually/ define hydras, we make a helper function: doc:my/pretty-defhydra
---which combines doc:defhydra and doc:pretty-hydra-define.
#+begin_details Implementation
#+begin_src emacs-lisp
(defmacro my/pretty-defhydra (key title &rest body)
"Make a hydra whose heads appear in a pretty pop-up window.

KEY: Global keybinding for the new hydra.

TITLE: Either a string or a plist, as specified for pretty-hydra-define.
       The underlying Lisp function's name is derived from the TITLE;
       which is intentional since hydra's are for interactive, pretty, use.

       One uses a plist TITLE to specify what a hydra should do *before*
       any options, or to specify an alternate quit key (:q by default).

BODY: A list of columns and entries. Keywords indicate the title
      of a column; 3-lists (triples) indicate an entry key and
      the associated operation to perform and, optionally, a name
      to be shown in the pop-up. See DEFHYDRA for more details.

For instance, the verbose mess:

    ;; Use ijkl to denote ‚Üë‚Üê‚Üì‚Üí arrows.
    (global-set-key
     (kbd \"C-c w\")
     (pretty-hydra-define my/hydra/\\t\\tWindow\\ Adjustment
       (:title \"\t\tWindow Adjustment\" :quit-key \"q\")
       (\"Both\"
        ((\"b\" balance-windows                 \"balance\")
         (\"s\" switch-window-then-swap-buffer  \"swap\"))
        \"Vertical adjustment\"
        ((\"h\" enlarge-window                  \"heighten\")
         (\"l\" shrink-window                   \"lower\"))
        \"Horizontal adjustment\"
        ((\"n\" shrink-window-horizontally      \"narrow\")
         (\"w\" enlarge-window-horizontally \"widen\" )))))

Is replaced by:

    ;; Use ijkl to denote ‚Üë‚Üê‚Üì‚Üí arrows.
    (my/pretty-defhydra \"C-c w\" \"\t\tWindow Adjustment\"
       :Both
       (\"b\" balance-windows                 \"balance\")
       (\"s\" switch-window-then-swap-buffer  \"swap\")
       :Vertical_adjustment
       (\"h\" enlarge-window                  \"heighten\")
       (\"l\" shrink-window                   \"lower\")
       :Horizontal_adjustment
       (\"n\" shrink-window-horizontally      \"narrow\")
       (\"w\" enlarge-window-horizontally     \"widen\"))"
  (let ((name (intern (concat "my/hydra/"
                              (if (stringp title)
                                  title
                                (plist-get title :title))))))
    `(global-set-key
      (kbd ,key)
      (pretty-hydra-define ,name
        ,(if (stringp title)
             (list :title title :quit-key "q")
           title)
        ,(thread-last body
           (-partition-by-header #'keywordp)
           (--map (cons (s-replace "_" " " (s-chop-prefix ":" (symbol-name (car it)))) (list (cdr it))))
           (-flatten-n 1))))))
#+end_src
#+end_details
*** Textual Navigation ---‚ÄúLook Ma, no CTRL key!‚Äù
:PROPERTIES:
:CUSTOM_ID: Textual-Navigation-Look-Ma-no-CTRL-key
:END:

Basic movement commands ---without having to hold the control key!

=C-n= moves us to the next line, as it should; but it now /also/ let's us press
=n,p,f,‚Ä¶= for other movement commands. Unlisted keys insert themselves, whereas ~q~
close the pop-up menu.

#+begin_src emacs-lisp
(my/pretty-defhydra "C-n" "\t\t\t\t\tTextual Navigation"
   :Line
   ("n" next-line)
   ("p" previous-line)
   ("a" beginning-of-line)
   ("e" move-end-of-line)
   ("g" goto-line)
   :Word
   ("f" forward-word "Next")
   ("b" backward-word "Previous")
   ("{" org-backward-element "Next Element")
   ("}" org-forward-element "Previous Element")
   :Screen
   ("v" scroll-up-command "Scroll Down")
   ("V" scroll-down-command "Scroll Up")
   ("l" recenter-top-bottom "Center Page")
   ("r" move-to-window-line-top-bottom "Relocate Point")
   ("m" helm-imenu "Textual Menu"))
#+end_src
#  (:body-pre (next-line) :title "\t\t\t\t\tTextual Navigation" :quit-key "q")

/Along with the ‚Äúpop-up window‚Äù, this is a useful way to (re)learn about Emacs' features./

For ‚Äúkey-based navigation‚Äù, consider ‚ÄòEVIL-mode‚Äô or ‚ÄòSpacemacs‚Äô, or
[[#Letter-based-Navigation][ace-jump-mode]] (below).

*** Window Navigation
:PROPERTIES:
:CUSTOM_ID: Window-Navigation
:END:
It can be difficult to remember the incantations to adjust
windows, so we can make a hydra to alleviate the trouble.
#+begin_src emacs-lisp
;; Use ijkl to denote ‚Üë‚Üê‚Üì‚Üí arrows.
(my/pretty-defhydra "C-c w" "\t\tWindow Adjustment"
   :Both
   ("b" balance-windows                 "balance")
   ("s" switch-window-then-swap-buffer  "swap")
   :Vertical_adjustment
   ("h" enlarge-window                  "heighten")
   ("l" shrink-window                   "lower")
   :Horizontal_adjustment
   ("n" shrink-window-horizontally      "narrow")
   ("w" enlarge-window-horizontally     "widen"))

;; Provides a *visual* way to choose a window to switch to.
;; (use-package switch-window :defer t)
;; :bind (("C-x o" . switch-window)
;;        ("C-x w" . switch-window-then-swap-buffer))

;; Have a thick ruler between vertical windows
(window-divider-mode)
#+end_src
* Staying Sane
:PROPERTIES:
:CUSTOM_ID: Staying-Safe
:END:

# See [[https://jeremykun.com/2020/01/14/the-communicative-value-of-using-git-well/][The Communicative Value of Using Git Well]]

Install quick file sharing utility ---[[https://www.dropbox.com/install][Dropbox]]--- as well as a backup
service, [[https://mega.nz/fm][Mega]] ---I use this for my =backups= directory: Keep reading.
# +begin_src shell
# brew install --cask dropbox
# brew install --cask megasync
# +end_src
#+begin_src emacs-lisp
(system-packages-ensure "dropbox")
(system-packages-ensure "megasync")
#+end_src

** Undo-tree: Very Local Version Control
:PROPERTIES:
:CUSTOM_ID: Undo-tree-Very-Local-Version-Control
:END:
 doc:undo-tree-visualize, kbd:C-x_u, gives a /visual/ representation of the
 current buffer's edit history.
#+BEGIN_SRC emacs-lisp :noweb yes :tangle no
  <<undo-tree-setup>>
#+END_SRC

( We're just showing the ~<<undo-tree-setup>>~ from earlier since this is a good
place for such a setup. More importantly, we are /not/ copy-pasting the setup: /It
is written only once; in a single source of truth!/ )

#+begin_src emacs-lisp
;; By default C-z is suspend-frame, i.e., minimise, which I seldom use.
(global-set-key (kbd "C-z")
  (lambda () (interactive)
   (undo-tree-mode) ;; Ensure the mode is on
   (undo-tree-visualize)))
#+end_src

** Automatic Backups
:PROPERTIES:
:CUSTOM_ID: Automatic-Backups
:END:

By default, Emacs saves backup files ---those ending in =~=--- in the current
directory, thereby cluttering it up. Let's place them in ~~/.emacs.d/backups~, in
case we need to look for a backup; moreover, let's keep old versions since
there's disk space to go around ---what am I going to do with 500gigs when nearly
all my ‚Äòsoftware‚Äô is textfiles interpreted within Emacs üòº

#+BEGIN_SRC emacs-lisp
;; New location for backups.
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; Silently delete execess backup versions
(setq delete-old-versions t)

;; Only keep the last 1000 backups of a file.
(setq kept-old-versions 1000)

;; Even version controlled files get to be backed up.
(setq vc-make-backup-files t)

;; Use version numbers for backup files.
(setq version-control t)
#+END_SRC

Why backups? Sometimes I may forget to submit a file, or edit, to my
version control system, and it'd be nice to be able to see a local
automatic backup. Whenever ‚ÄòI need space,‚Äô then I simply empty
the backup directory, if ever. That the backups are numbered is so sweet ^_^

Like package installations, my backups are not kept in any version control
system, like git; only locally.

*** What changed?
:PROPERTIES:
:CUSTOM_ID: What-changed
:END:

Let's use an elementary diff system for backups.
#+BEGIN_SRC emacs-lisp
(use-package backup-walker
  :commands backup-walker-start)
#+END_SRC

In a buffer that corresponds to a file, invoke ~backup-walker-start~ to see a
visual diff of changes /between/ versions.  By default, you see the changes
‚Äòbackwards‚Äô: Red means delete these things to get to the older version; i.e.,
the red ‚Äò-‚Äô are newer items.

There is also doc:diff-backup for comparing a file with its backup.

# To create backups explicitly use save-buffer (C-x C-s) with prefix arguments.
#
#          =diff-backup= compares a file with its backup or vice versa.
# But there is no function to restore backup files.

*** Save ‚âà Backup
:PROPERTIES:
:CUSTOM_ID: Save-Backup
:END:

Emacs only makes a backup the very first time a buffer is saved; I'd prefer
Emacs makes backups everytime I save! ---If I saved, that means I'm at an
important checkpoint, so please check what I have so far as a backup!
#+BEGIN_SRC emacs-lisp
;; Make Emacs backup everytime I save

(defun my/force-backup-of-buffer ()
  "Lie to Emacs, telling it the curent buffer has yet to be backed up."
  (setq buffer-backed-up nil))

(add-hook 'before-save-hook  'my/force-backup-of-buffer)

;; [Default settings]
;; Autosave when idle for 30sec or 300 input events performed
(setq auto-save-timeout 30
      auto-save-interval 300)
#+END_SRC
# See the name of the latest backup, which is appeneded by a number for each save ;-)
# (file-newest-backup "~/.emacs.d/init.org")

It is intestesting to note that the above snippet could be modified to [[https://stackoverflow.com/a/6918217/3550444][make our
own backup system]], were Emacs lacked one, by having our function simply save
copies of our file ---on each save--- where the filename is augmented with a
timestamp.

** ¬† =magit= ---Emacs' porcelain interface to git
:PROPERTIES:
:CUSTOM_ID: magit-Emacs'-porcelain-interface-to-gitq
:END:

Let's setup an Emacs ‚Äòporcelain‚Äô interface to git ---it makes working with
version control tremendously convenient.
# Moreover, I add a little pop-up so that I don't forget to commit often!

(Personal reminder: If using 2FA [two factor authentication], then when you do
git operations, such as ~git push~, [[https://webkul.com/blog/github-push-with-two-factor-authentication/][you must use your PAT]] [personal access token]
/instead/ of your password! Also: Install [[https://github.com/sindresorhus/refined-github][refined-github: Browser extension that
simplifies the GitHub interface and adds useful features]]!)

#+BEGIN_SRC emacs-lisp
;; Bottom of Emacs will show what branch you're on
;; and whether the local file is modified or not.
(use-package magit
  :bind (("C-c g" . magit-file-dispatch))
  :custom ;; Do not ask about this variable when cloning.
    (magit-clone-set-remote.pushDefault t))
#+END_SRC
# :config (global-set-key (kbd "C-x g") 'magit-status)

Why use ~magit~ as the interface to the git version control system?  In a ~magit~
buffer nearly everything can be acted upon: Press =return=, or =space=, to see
details and =tab= to see children items, usually.

+ kbd:C-x_g, doc:magit-status, gives you a nice buffer with an overview
  of the Git repo that you're buffer is currently visiting.
+ kbd:C-c_M-g, doc:magit-file-dispatch, lets you invoke Git actions on the
  current file directly; e.g., following up with [[kbd:b]]lame, [[kbd:l]]og, [[kbd:d]]iff,
  [[kbd:s]]tage, or [[kbd:c]]ommit the current file.

  For ease, above, we have also bound this to kbd:C-c_g ---reminiscent of kbd:C-x_g :smile:

+ Blame, doc:magit-blame, is super nice: The buffer gets annotations for each chunk
  of text, regarding who authoured it, when, and their commit title.
  Then [[kbd:q]] to quit the blame.

  Likewise, doc:magit-log-buffer-file is super neat!

#+begin_details Super Simple ‚Äòmagit‚Äô Mini-tutorial
link-here:Super-Simple-‚Äòmagit‚Äô-Mini-tutorial
Below is my personal quick guide to working with magit ---for a full tutorial
see [[http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html.html][jr0cket's blog]].

+ ~dired~ :: See the contents of a particular directory.

+ ~magit-init~ :: Put a project under version control.
  The mini-buffer will prompt you for the top level folder version.
  A ~.git~ folder will be created there.

+ ~magit-status~ , ~C-x g~ :: See status in another buffer.
   Press ~?~ to see options, including:
  - g :: Refresh the status buffer.
     # The status buffer may be refereshed using ~g~, and all magit buffers by ~G~.
  - TAB ::  See collapsed items, such as what text has been changed.
  - ~q~ :: Quit magit, or go to previous magit screen.
  - ~s~ :: Stage, i.e., add, a file to version control.
         Add all untracked files by selecting the /Untracked files/ title.

    [[https://softwareengineering.stackexchange.com/a/119807/185815][The staging area is akin to a pet store; commiting is taking the pet home.]]

  - ~k~ :: Kill, i.e., delete a file locally.
  - ~K~ :: This' ~(magit-file-untrack)~ which does ~git rm --cached~.
  - ~i~ :: Add a file to the project ~.gitignore~ file. Nice stuff =)
  - ~u~ :: Unstage a specfif staged change highlighed by cursor.
           ~C-u s~ stages everything --tracked or not.
  - ~c~ :: Commit a change.
    * A new buffer for the commit message appears, you write it then
      commit with ~C-c C-c~ or otherwise cancel with ~C-c C-k~.
      These commands are mentioned to you in the minibuffer when you go to commit.
    * You can provide a commit to /each/ altered chunk of text!
      This is super neat, you make a series of local such commits rather
      than one nebulous global commit for the file. The ~magit~ interface
      makes this far more accessible than a standard terminal approach!
    * You can look at the unstaged changes, select a /region/, using ~C-SPC~ as usual,
      and commit only that if you want!
    * When looking over a commit, ~M-p/n~ to efficiently go to previous or next altered sections.
    * Amend a commit by pressing ~a~ on ~HEAD~.

  - ~d~ :: Show differences, another ~d~ or another option.
    - This is magit! Each hunk can be acted upon; e.g., ~s~ or ~c~ or ~k~ ;-)
  - ~v~ :: Revert a commit.
  - ~x~ :: Undo last commit. Tantamount to ~git reset HEAD~~ when cursor is on most recent
           commit; otherwise resets to whatever commit is under the cursor.
  - ~l~ :: Show the log, another ~l~ for current branch; other options will be displayed.
    - Here ~space~ shows details in another buffer while cursour remains in current
      buffer and, moreover, continuing to press ~space~ scrolls through the other buffer!
      Neato.
  - ~P~ :: Push.
  - ~F~ :: Pull.
  - ~:~ :: Execute a raw git command; e.g., enter ~whatchanged~.

Notice that every time you press one of these commands, a ‚Äòpop-up‚Äô of realted
git options appears! Thus not only is there no need to memorise many of them,
but this approach makes /discovering/ other commands easier.

# Use ~M-x magit-list-repositories RET~ to list local repositories:
#+end_details

#+begin_details [Disabled] Homemade ‚Äòuncomitted changes‚Äô Notification
Let's always notify ourselves of a file that has [[https://tpapp.github.io/post/check-uncommitted/][uncommited changes]]
---we might have had to step away from the computer and forgotten to commit.
#+begin_src emacs-lisp :tangle no
(require 'magit-git)

(defun my/magit-check-file-and-popup ()
  "If the file is version controlled with git
  and has uncommitted changes, open the magit status popup."
  (let ((file (buffer-file-name)))
    (when (and file (magit-anything-modified-p t file))
      (message "This file has uncommited changes!")
      (when nil ;; Became annyoying after some time.
      (split-window-below)
      (other-window 1)
      (magit-status)))))

;; I usually have local variables, so I want the message to show
;; after the locals have been loaded.
(add-hook 'find-file-hook
  '(lambda ()
      (add-hook 'hack-local-variables-hook 'my/magit-check-file-and-popup)))
#+end_src
:Lets_try_this_out:
#+BEGIN_EXAMPLE emacs-lisp
(progn (eshell-command "echo change-here >> ~/dotfiles/.emacs")
       (find-file "~/dotfiles/.emacs"))
#+END_EXAMPLE
:End:
# In doubt, execute ~C-h e~ to jump to the ~*Messages*~ buffer.
#+end_details

*** Credentials: I am who I am
:PROPERTIES:
:CUSTOM_ID: Credentials-I-am-who-I-am
:END:
First, let's setup our git credentials.
#+BEGIN_SRC emacs-lisp
;; See here for a short & useful tutorial:
;; https://alvinalexander.com/git/git-show-change-username-email-address
(when (equal "" (shell-command-to-string "git config user.email "))
  (shell-command (format "git config --global user.name \"%s\"" user-full-name))
  (shell-command (format "git config --global user.email \"%s\"" user-mail-address)))

;; Also need to customise email routes per organization
;; https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/configuring-notifications#customizing-email-routes-per-organization
(unless my/personal-machine?
  (shell-command "git config --global user.email \"musa@weeverapps.com\""))

;; If we ever need to use Git in the terminal, it should be done with Emacs as
;; the underlying editor
(shell-command "git config --global core.editor emacs")
#+END_SRC

*** Encouraging useful commit messages
:PROPERTIES:
:CUSTOM_ID: Encouraging-useful-commit-messages
:END:
Let's try our best to have a [[https://chris.beams.io/posts/git-commit/][useful & consistent commit log]]:
#+begin_src emacs-lisp
(defun my/git-commit-reminder ()
  (insert "\n\n# The commit subject line ought to finish the phrase:
# ‚ÄúIf applied, this commit will ‚ü™your subject line here‚ü´.‚Äù ")
  (beginning-of-buffer))

(add-hook 'git-commit-setup-hook 'my/git-commit-reminder)
#+end_src

Super neat stuff!

*** Maybe clone ... everything?
:PROPERTIES:
:CUSTOM_ID: Maybe-clone-everything
:END:

Below are the git repos I'd like to clone ---along with a function to do so
quickly.
#+begin_src emacs-lisp
(cl-defun maybe-clone (remote &optional (local (concat "~/" (file-name-base remote))))
  "Clone a REMOTE repository if the LOCAL directory does not exist.

Yields ‚Äòrepo-already-exists‚Äô when no cloning transpires,
otherwise yields ‚Äòcloned-repo‚Äô.

LOCAL is optional and defaults to the base name; e.g.,
if REMOTE is https://github.com/X/Y then LOCAL becomes ‚àº/Y."
  (defvar magit-repository-directories nil) ;; Define it, if it's not yet loaded
  (add-to-list 'magit-repository-directories `(,local . 0))
  (if (file-directory-p local)
      'repo-already-exists
    (async-shell-command (concat "git clone " remote " " local))
    'cloned-repo))

(maybe-clone "https://github.com/alhassy/emacs.d" "~/.emacs.d")
(maybe-clone "https://github.com/alhassy/alhassy.github.io" "~/blog")
(maybe-clone "https://github.com/alhassy/holy-books")
#+end_src

#+begin_details Many more repos to clone
#+begin_src emacs-lisp

(maybe-clone "https://github.com/alhassy/melpa")
(maybe-clone "https://github.com/alhassy/org-special-block-extras")


;; (maybe-clone "https://github.com/alhassy/next-700-module-systems-proposal.git" "~/thesis-proposal")
;; (maybe-clone "https://github.com/JacquesCarette/MathScheme")
;; (maybe-clone "https://github.com/alhassy/gentle-intro-to-reflection" "~/reflection/")
;; (maybe-clone "https://github.com/alhassy/org-agda-mode")
;; (maybe-clone "https://github.com/JacquesCarette/TheoriesAndDataStructures")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/RATH/RATH-Agda"     "~/RATH-Agda")
;; (maybe-clone "https://github.com/alhassy/MyUnicodeSymbols") ;; Deleted?

(maybe-clone "https://github.com/alhassy/islam")
(maybe-clone "https://github.com/alhassy/CheatSheet")
(maybe-clone "https://github.com/alhassy/ElispCheatSheet")
;; (maybe-clone "https://github.com/alhassy/CatsCheatSheet")
;; (maybe-clone "https://github.com/alhassy/OCamlCheatSheet")
;; (maybe-clone "https://github.com/alhassy/AgdaCheatSheet")
(maybe-clone "https://github.com/alhassy/RubyCheatSheet")
;; (maybe-clone "https://github.com/alhassy/PrologCheatSheet")
;; (maybe-clone "https://github.com/alhassy/FSharpCheatSheet")


;; (maybe-clone "https://gitlab.cas.mcmaster.ca/armstmp/cs3mi3.git" "~/3mi3")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/alhassm/CAS781" "~/cas781") ;; cat adventures
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/carette/cs3fp3.git" "~/3fp3")
;; (maybe-clone "https://github.com/alhassy/interactive-way-to-c")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/assignment-distribution.git" "~/3ea3/assignment-distribution")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/notes.git" "~/3ea3/notes")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/assignment-development.git" "~/3ea3/assignment-development")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/kandeeps.git" "~/3ea3/sujan")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/horsmane.git" "~/3ea3/emily")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/3ea3-winter2019/anderj12.git" "~/3ea3/jacob")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/alhassm/3EA3.git" "~/3ea3/_2018")
;; (maybe-clone "https://gitlab.cas.mcmaster.ca/2DM3/LectureNotes.git" "~/2dm3")
#+end_src
#+end_details

This doc:maybe-clone utility has genuinely
made it easier for me to learn about new projects and codebases from Github:
I type it in with the repo's address, then kbd:C-x_C-e ---doc:eval-last-sexp---
and then I can view it in my beloved Emacs ~(‚îÄ‚Äø‚Äø‚îÄ)~.

Moreover, this handy tool makes it so that you can
list your Git repositories with doc:magit-list-repositories:
It marks modified repos as ‚Äúred:dirty‚Äù.

It may be useful to know that ~(magit-anything-modified-p t file)~ can be used to
check if ~file~ has been modified (doc:magit-anything-modified-p), whereas
~(magit-status repo)~ checks the status of a repository (doc:magit-status).
# (magit-anything-modified-p t "~/ElispCheatSheet/CheatSheet.org")
# (magit-status "~/ElispCheatSheet")

*** Gotta love that time machine
:PROPERTIES:
:CUSTOM_ID: Gotta-love-that-time-machine
:END:

Finally, one of the main points for using version control is to have access to
historic versions of a file. The following utility allows us to
kbd:M-x_git-timemachine on a file and use kbd:p/n/g/q to look at previous, next,
goto arbitrary historic versions, or quit.
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine :defer t)
#+END_SRC
If we want to roll back to a previous version, we just doc:write-file or
kbd:C-x_C-s as usual! The power of text!

--------------------------------------------------------------------------------

doc:vc-annotate is also very useful to go through history and work out when
things went wrong.

** Version Control with SVN ---Using Magit!
:PROPERTIES:
:CUSTOM_ID: Version-Control-with-SVN-Using-Magit
:END:

Let's use git as an interface to subversion repositories so that we can continue
to use =magit= as our version control interface.  The utility to do so is called
=git svn= ---note =git ùí≥= on a MacOS is the same as =git-ùí≥= on other systems.

#+begin_src emacs-lisp
(use-package magit-svn
  :hook (magit-mode . magit-svn-mode))
#+end_src

Here's an example. The following command checksout an SVN repo; afterwhich we may open a file
there and do =M-x magit-status= to get the expected porcelain git interface  ^_^
#+begin_src emacs-lisp :tangle no
(async-shell-command "mkdir ~/2fa3; git svn clone --username alhassm https://websvn.mcmaster.ca/csse2fa3/2019-2020_Term2 ~/2fa3/")
#+end_src

In the magit buffer, we may now use the ~N~ key which wraps the =git svn=
subcommands =fetch, rebase, dcommit, branch, tag=. For example:

1. Make changes to a file.
2. ‚ÄòStage‚Äô them with ~s~ and ‚Äòcommit‚Äô them with ~c~.
3. ‚ÄòPush‚Äô changes with ~N c~.

We get to pretend we're using ~git~ even though the underlying mechanism is ~svn~!
# Indeed, in a terminal ~git svn log~ will show an ~svn~ log with single pushed commits.

For move on =git svn=, see [[https://gist.github.com/rickyah/7bc2de953ce42ba07116][A simple guide to git-svn]] or [[https://www.viget.com/articles/effectively-using-git-with-subversion/][Effectively using Git
  with Subversion]].

‚ü® If I need to work with svn repos often enough, I'd extend my ~maybe-clone~
  utility above to account for them. ‚ü©

** Highlighting TODO-s & Showing them in Magit
:PROPERTIES:
:CUSTOM_ID: Highlighting-TODO-s-Showing-them-in-Magit
:END:

Sometimes it's nice to flag a chunk of text by its author, such as ‚Äò [[color:#dc8cc3][MA]] ‚Äô for
‚ÄòM‚Äôusa ‚ÄòA‚Äôl-hassy, or ‚Äò [[color:#d0bf8f][HACK]] ‚Äô for text that needs to be improved.  Such flags
stand out from other text by being coloured and bold.

#+BEGIN_SRC emacs-lisp
;; NOTE that the highlighting works even in comments.
(use-package hl-todo
  ;; I want todo-words highlighted in prose, not just in code fragements.
  :hook (org-mode . hl-todo-mode)
  :config
    ;; Adding new keywords
    (cl-loop for kw in '("TEST" "MA" "WK" "JC")
             do (add-to-list 'hl-todo-keyword-faces (cons kw "#dc8cc3")))
    ;; Enable it everywhere.
    (global-hl-todo-mode))
#+END_SRC

We've added few to the default flag keywords so that in total we have the
following flags ---where any sequence of at least 3 [[color:#cc9393][XXX]] are considered flags.
#+BEGIN_SRC emacs-lisp :results replace raw value :exports results :eval no-export :tangle no
(loop for (k . f) in hl-todo-keyword-faces
      collect (format "[[color:%s][%s]]" f k))
#+END_SRC

#+RESULTS:
([[color:#dc8cc3][JC]] [[color:#dc8cc3][WK]] [[color:#dc8cc3][MA]] [[color:#dc8cc3][TEST]] [[color:#d0bf8f][HOLD]] [[color:#cc9393][TODO]] [[color:#dca3a3][NEXT]] [[color:#dc8cc3][THEM]] [[color:#7cb8bb][PROG]] [[color:#7cb8bb][OKAY]] [[color:#5f7f5f][DONT]] [[color:#8c5353][FAIL]] [[color:#afd8af][DONE]] [[color:#d0bf8f][NOTE]] [[color:#d0bf8f][KLUDGE]] [[color:#d0bf8f][HACK]] [[color:#d0bf8f][TEMP]] [[color:#cc9393][FIXME]] [[color:#cc9393][XXX+]])

:Alternate_approach_using_font_lock:
#+begin_src emacs-lisp
(defun add-watchwords () "Add TODO: words to font-lock keywords."
  (font-lock-add-keywords nil
                          '(("\\(\\<TODO\\|\\<FIXME\\|\\<HACK\\|@.+\\):" 1
                             font-lock-warning-face t))))

(add-hook 'prog-mode-hook #'add-watchwords)

#+end_src
:End:

Lest these get buried in mountains of text, let's have them [[https://github.com/alphapapa/magit-todos][become mentioned]] in
a magit status buffer ---which uses the keywords from ~hl-todo~.
#+BEGIN_SRC emacs-lisp
;; MA: The todo keywords work in code too!
(use-package magit-todos
  :after magit
  :after hl-todo
  ;; :hook (org-mode . magit-todos-mode)
  :config
  ;; For some reason cannot use :custom with this package.
  (custom-set-variables
    '(magit-todos-keywords (list "TODO" "FIXME" "MA" "WK" "JC")))
  ;; Ignore TODOs mentioned in exported HTML files; they're duplicated from org src.
  (setq magit-todos-exclude-globs '("*.html"))
  (magit-todos-mode))
#+END_SRC

+ Note that such [[color:#cc9393][TODO]] keywords are not propagated from sections that are
  *[[purple:COMMENT]]*-ed out in org-mode.
+ Ensure you exclude generated files, such as the Emacs backups directory, from
  being consulted. Using ~magit~, press [[kbd:i]] to mark items to be ignored.
+ This feature also works outside of git repos.

Open a Magit status buffer, or run doc:magit-todos-list to show a dedicated
to-do list buffer. You can then peek at items with space, or jump to them with
enter.

#+begin_box
Seeing the [[color:#cc9393][TODO]] list with each commit is an incentive to actually tackle the
items there (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà
#+end_box

# Add these to the version control hydra.
# #+BEGIN_SRC emacs-lisp
# (defhydra hydra-version-control (global-map "C-x v")
#   ("t" helm-magit-todos "Show TODOs lists for this repo."))
# #+END_SRC
#

* Literate Programming
:PROPERTIES:
:CUSTOM_ID: Literate-Programming
:END:

Org-mode lets us run chunks of code anywhere, then feed their outputs to other
chunks of code in /possibly different/ programming languages: Org is a
meta-(programming language).

Importantly, this means we can write text and whenever we need the result of
some computation, we can place it there and then and only request its result
appear in PDF/HTML export. The result is a single document.

** High Speed Literate Programming
:PROPERTIES:
:CUSTOM_ID: High-Speed-Literate-Programming
:END:

*** Manipulating Sections
:PROPERTIES:
:CUSTOM_ID: Manipulating-Sections
:END:

#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC

This enables the [[http://notesyoujustmightwanttosave.blogspot.com/2011/12/org-speed-keys.html][Org Speed Keys]] so that when the cursor is at the beginning of a
headline, we can perform fast manipulation & navigation using the standard Emacs
movement controls, such as:
+ [[kbd:#]] toggle ~COMMENT~-ing for an org-header.
+ [[kbd:s]] toggles [[doc:narrow-to-region][‚Äúnarrowing‚Äù]] to a subtree; i.e., hide the rest of the document.

  If you narrow to a subtree then any export, kbd:C-c_C-e, will joyously only
  consider the narrowed detail.
+ [[kbd:u]] for going to upwards to parent heading
  * [[kbd:i]] insert a new same-level heading below current heading.
+ [[kbd:c]] for cycling structure below current heading, or ~C~ for cycling global structure.
+ [[kbd:w]] refile current heading; options list pops-up to select which heading to move
  it to. Neato!
  - [[kbd:g]] to go to another heading, without refiling anything.
    #+begin_src emacs-lisp
;; [Default]
;; When refiling, only show me top level headings
(setq org-refile-targets
      '((nil :maxlevel . 1))) ;; Sometimes 2 is useful.

;; Maybe I want to refile into a new heading; confirm with me.
(setq org-refile-allow-creating-parent-nodes 'confirm)

;; Use full outline paths for refile targets
;; When refiling, using Helm, show me the hierarchy paths
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-use-outline-path 'file-path)
  #+end_src
+ kbd:n/p for next/previous /visible/ heading.
+ kbd:f/b for jumping forward/backward to the next/previous /same-level/ heading.
+ kbd:D/U move a heading down/up.
+ kbd:L/R recursively promote (move leftwards) or demote (more rightwards) a heading.
+ kbd:I/O clock In/Out to the task defined by the current heading.
  - Keep track of your work times!
  - [[kbd:v]] view agenda.
+ kbd:t/,/:/e to add a TODO state, priority level, tag, or effort estimate
  * kbd:1/2/3 to mark a heading with priority, highest to lowest.
+ [[kbd:^]] sort children of current subtree; brings up a list of sorting options.
+ kbd:k/@/a to kill or mark or archive the current subtree
+ [[kbd:o]] to open a link mentioned in the subtree then go to the link; a pop-up of
  links appears.

We can add our own speed keys by altering the ~org-speed-commands-user~
association list variable; e.g.,
#+begin_src emacs-lisp
(add-to-list 'org-speed-commands-user (cons "P" #'org-set-property))
;; Use ‚Äò:‚Äô and ‚Äòe‚Äô to set tags and effort, respectively.
#+end_src

#  To see the commands available, execute  ~M-x org-speed-command-help~.
| ‚áí Moreover, [[kbd:?]] to see a complete list of keys available. ‚áê |

*** Seamless Navigation Between Source Blocks
:PROPERTIES:
:CUSTOM_ID: Seamless-Navigation-Between-Source-Blocks
:END:

The ‚Äúsuper key‚Äù ---aka the command or windows key--- can be used to jump to the
previous, next, or toggle editing org-mode source blocks.
#+begin_src emacs-lisp
;; Overriding keys for printing buffer, duplicating gui frame, and isearch-yank-kill.
;;
(use-package org
  :bind (:map org-mode-map
              ("s-p" . org-babel-previous-src-block)
              ("s-n" . org-babel-next-src-block)
              ("s-e" . org-edit-special)
         :map org-src-mode-map
              ("s-e" . org-edit-src-exit)))
#+end_src

#                       Interestingly, ~s-l~ is ‚Äúgoto line‚Äù.

Note that we could have bound kbd:‚åò+e to doc:org-edit-src-code /
doc:org-edit-src-exit, but instead chose the more general doc:org-edit-special
since, well, look at the tooltip documentation: This allows us to use kbd:‚åò+e to
‚Äòe‚Äôdit all kinds of Org entities ---including footnotes and export blocks.  (
Footnotes can be quickly produced with doc:org-footnote-new. )

*** Modifying [[kbd:‚ü®return‚ü©]]
:PROPERTIES:
:CUSTOM_ID: Modifying-return
:END:

+  [[kbd:C-‚ü®return‚ü©]] ,  [[kbd:C-S-‚ü®return‚ü©]]  make a new heading where the latter marks it as a ~TODO~.
+ By default  [[kbd:M-‚ü®return‚ü©]] makes it easy to work with existing list items, headings,
  tables, etc by creating a new item, heading, etc.

Usually we want a newline then we indent, let's make that the default.
   #+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook '(lambda ()
   (local-set-key (kbd "<return>") 'org-return-indent))
   (local-set-key (kbd "C-M-<return>") 'electric-indent-just-newline))
#+END_SRC

   Notice that I've also added another kind of return, for when I want to
   break-out of the indentation approach and start working at the beginning of
   the line.

In summary:
| key              | method                                      | behaviour                         |
|------------------+---------------------------------------------+-----------------------------------|
| [[kbd:‚ü®return‚ü©]]     | doc:org-return-indent                       | Newline with indentation          |
| [[kbd:M-‚ü®return‚ü©]]   | doc:org-meta-return                         | Newline with new org item         |
| [[kbd:C-M-‚ü®return‚ü©]] | doc:electric-indent-just-newline            | Newline, cursor at start          |
| [[kbd:C-‚ü®return‚ü©]]   | doc:org-insert-heading-respect-content      | New heading /after/ current content |
| [[kbd:C-S-‚ü®return‚ü©]] | doc:org-insert-todo-heading-respect-content | Ditto, but with a ~TODO~ marker     |

*** COMMENT ¬† ~C-a,e,k~ and Yanking of sections :Does_not_work:
:PROPERTIES:
:CUSTOM_ID: C-a-e-k-and-Yanking-of-sections
:END:

On an org-heading, kbd:C-a goes to /after/ the star, heading markers.  To use
speed keys, run kbd:C-a_C-a to get to the star markers.

kbd:C-e goes to the end of the heading, not including the tags.
#+begin_src emacs-lisp
(setq org-special-ctrl-a/e t)
#+end_src

kbd:C-k no longer removes tags, if activated in the middle of a heading's name.
#+begin_src emacs-lisp
(setq org-special-ctrl-k t) ;; MA: Does not work ‚Ä¶!
#+end_src

When you yank a subtree and paste it alongside a subtree of depth /‚Äòd‚Äô/, then the
yanked tree's depth is adjusted to become depth /‚Äòd‚Äô/ as well.  If you don't want
this, then refile instead of copy-pasting.
#+begin_src emacs-lisp
(setq org-yank-adjusted-subtrees t)
#+end_src
** Executing code from ~src~ blocks
:PROPERTIES:
:CUSTOM_ID: Executing-code-from-src-blocks
:END:

For example, to execute a shell command in Emacs, write a ~src~ with a shell
command, then ~C-c c-c~ to see the results.  Emacs will generally query you to
ensure you're confident about executing the (possibly dangerous) code block;
let's stop that:
#+BEGIN_SRC emacs-lisp
;; Seamless use of babel: No confirmation upon execution.
;; Downside: Could accidentally evaluate harmful code.
(setq org-confirm-babel-evaluate nil)

;; Never evaluate code blocks upon export and replace results when evaluation does occur.
;; For a particular language ùë≥, alter ‚Äòorg-babel-default-header-args:ùë≥‚Äô.
(setq org-babel-default-header-args
      '((:results . "replace")
        (:session . "none")
        (:exports . "both")
        (:cache .   "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        (:eval . "never-export")))
#+END_SRC

# A worked out example can be obtained as follows: ~<g TAB~ then ~C-c C-C~ to make a nice
# simple graph ---the code for this is in the next section.

Some initial languages we want org-babel to support:
#+BEGIN_SRC emacs-lisp
 (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell      . t)
     (python     . t)
     (haskell    . t)
     (ruby       . t)
     (ocaml      . t)
     (C          . t)  ;; Captial ‚ÄúC‚Äù gives access to C, C++, D
     (dot        . t)
     (latex      . t)
     (org        . t)
     (makefile   . t)))

;; Preserve my indentation for source code during export.
(setq org-src-preserve-indentation t)

;; The export process hangs Emacs, let's avoid this.
;; MA: For one reason or another, this crashes more than I'd like.
;; (setq org-export-in-background t)
#+END_SRC

More languages can be added using doc:add-to-list.

** Executing all =#+name: startup-code= for local configurations
:PROPERTIES:
:CUSTOM_ID: Executing-all-name-startup-code-for-local-configurations
:END:

Sometimes my Org-files contain configurations that are local to the file,
so I name all such =src= blocks =#+name: startup-code= and place =# -*- eval: (my/execute-startup-blocks) -*-= at the top of the file so that such
blocks are evaluated when the file opens up.
- The =-*- ... -*-= notation is for making local configurations.
- Use =M-x add-file-local-variable-prop-line= to have them inserted interactively.
#+begin_src emacs-lisp
(defun my/execute-startup-blocks ()
  "Execute all startup blocks, those named ‚Äòstartup-code‚Äô.

I could not use ORG-BABEL-GOTO-NAMED-SRC-BLOCK since it only goes
to the first source block with the given name, whereas I'd like to
visit all blocks with such a name."
  (interactive)
  (save-excursion
    (goto-char 0)
    (while (ignore-errors (re-search-forward "^\\#\\+name: startup-code"))
      (org-babel-execute-src-block))))
#+end_src

The following setup enables this feature in a safe fashion ---e.g., we do not
want to avoid evaluating a random person's potentially dangerous code when we
only want to look at it.
#+BEGIN_SRC emacs-lisp
;; Please ask me on a file by file basis whether its local variables are ‚Äòsafe‚Äô
;; or not. Use ‚Äò!‚Äô to mark them as permanently ‚Äòsafe‚Äô to avoid being queried
;; again for the same file.
(setq enable-local-variables t)
#+END_SRC

I have been using a combination of =(org-babel-goto-named-src-block ‚ãØ)= in
multi-line local-variable declarations ---=M-x add-file-local-variable-prop=---
for a while in many files using a dedicated =* footer :noexport:= section, but
this new approach frees from having such sections and instead to having a single
line at the top of the file. Moreover, being at the top of the file, such a line
is a nice *[[green:‚Äòin your face‚Äô]]* reminder that there is local configuration that
should have been loaded.
# - E.g., this init file has local configuration for making the corresponding
#  =init.el= file and generating the =README.org= file.
** Quickly pop-up a terminal, run a command, close it ---and zsh
:PROPERTIES:
:CUSTOM_ID: Quickly-pop-up-a-terminal-run-a-command-close-it-and-zsh
:END:

/Pop up a terminal, do some work, then close it using the same command./

[[https://github.com/kyagi/shell-pop-el][Shell-pop]] uses only one key action to work: If the buffer exists, and we're in
it, then hide it; else jump to it; otherwise create it if it doesn't exit.  Use
universal arguments, e.g., ~C-u 5 C-t~, to have multiple shells and the same
universal arguments to pop those shells up, but ~C-t~ to pop them away.

#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :custom
    ;; This binding toggles popping up a shell, or moving cursour to the shell pop-up.
    (shell-pop-universal-key "C-t")

    ;; Percentage for shell-buffer window size.
    (shell-pop-window-size 30)

    ;; Position of the popped buffer: top, bottom, left, right, full.
    (shell-pop-window-position "bottom")

    ;; Please use an awesome shell.
    (shell-pop-term-shell "/bin/zsh"))
#+END_SRC
# There are also a number of hooks for shell-pop. E.g., to unconditionally kill the buffer afterwards.

#+begin_details Oh My Zsh
Now that we have access to quick pop-up for a shell, let's get a pretty and
practical shell: [[https://www.howtogeek.com/362409/what-is-zsh-and-why-should-you-use-it-instead-of-bash/][zsh]] along with the [[https://ohmyz.sh/][Oh My Zsh]] community configurations give us:

1. ~brew install zsh~
2. ~sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"~

   This installs everything ^_^

#+BEGIN_SRC emacs-lisp
;; Be default, Emacs please use zsh
;; E.g., M-x shell
(setq shell-file-name "/bin/zsh")
#+END_SRC

Out of the box, zsh comes with
+ git support; the left side indicates which branch we're on and
  whether the repo is dirty, ‚úó.
+ Recursive path expansion; e.g., ~/u/lo/b TAB~ expands to ~/usr/local/bin/~
+ Over [[https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins#apache2-macports][250+ Plugins]] and [[https://github.com/ohmyzsh/ohmyzsh/wiki/Themes][125+ Themes]] that are enabled by simply
  mentioning their name in the ~.zshrc~ file.

The defaults have been good enough for me, for now ---as all else is achieved
via Emacs ;-)
#+end_details

Also, there's the [[https://tldr.sh/][tldr]] tool which aims to be like terse manuals for
commandline-tools in the style of practical example uses cases: ~tldr ùí≥~ yields a
number of ways you'd actually use ùí≥. ( In Emacs, [[kbd:C-t tldr ùí≥ ‚ü®return‚ü©]]. )
#+BEGIN_SRC emacs-lisp
(system-packages-ensure "tldr")
#+END_SRC

** Jumping to extreme semantic units
:PROPERTIES:
:CUSTOM_ID: Jumping-to-extreme-semantic-units
:END:
[[https://github.com/DamienCassou/beginend][Sometimes it's unreasonable]] for ~M-<~ to take us to the actual start of a buffer;
instead it'd be preferable to go to the first ‚Äúsemantic unit‚Äù in the buffer. For
example, when directory editing with ~dired~ we should jump to the first file,
with version control with ~magit~ we should jump to the first section, when
composing mail we should jump to the first body line, and in the agenda we
should jump to the first entry.
#+BEGIN_SRC emacs-lisp
;; M-< and M-> jump to first and final semantic units.
;; If pressed twice, they go to physical first and last positions.
(use-package beginend
  :diminish 'beginend-global-mode
  :config (beginend-global-mode)
    (cl-loop for (_ . m) in beginend-modes do (diminish m)))
#+END_SRC
** Snippets ---Template Expansion
:PROPERTIES:
:CUSTOM_ID: Snippets-Template-Expansion
:END:

It is common that there is a sequence of text that we tend to repeat
often, possibly with a name or some other parameter altered.
Such a ‚Äòsnippet‚Äô could be written once then provided by a simple
Lisp insert command with the parameters being queried. Luckily, others
have written such pleasant utilities.

Besides snippets, there are words that we may want to repeat often but it can be
tedious to write them out in full. As such, we employ *[[green: word completion]]*;
which we also use to expand our snippets.
# For instance, I knew someone who writes ‚ÄòU‚Äô all over the place
# since the word ‚Äúuniverse‚Äù is too long to write
# and Emacs doesn't come with word completion.

*** Word Completion
:PROPERTIES:
:CUSTOM_ID: Word-Completion
:END:

Let's enable [[https://company-mode.github.io/][‚Äúcomplete anything‚Äù mode]] ---it ought to start in half a second and
only need two characters to get going, which means word suggestions are provided
and so I need only type partial words then tab to get the full word!
#+begin_src emacs-lisp
(use-package company
  :diminish
  :config
  (global-company-mode 1)
  (setq ;; Only 2 letters required for completion to activate.
   company-minimum-prefix-length 2

   ;; Search other buffers for compleition candidates
   company-dabbrev-other-buffers t
   company-dabbrev-code-other-buffers t

   ;; Show candidates according to importance, then case, then in-buffer frequency
   company-transformers '(company-sort-by-backend-importance
                          company-sort-prefer-same-case-prefix
                          company-sort-by-occurrence)

   ;; Flushright any annotations for a compleition;
   ;; e.g., the description of what a snippet template word expands into.
   company-tooltip-align-annotations t

   ;; Allow (lengthy) numbers to be eligible for completion.
   company-complete-number t

   ;; M-‚ü™num‚ü´ to select an option according to its number.
   company-show-numbers t

   ;; Show 10 items in a tooltip; scrollbar otherwise or C-s ^_^
   company-tooltip-limit 10

   ;; Edge of the completion list cycles around.
   company-selection-wrap-around t

   ;; Do not downcase completions by default.
   company-dabbrev-downcase nil

   ;; Even if I write something with the ‚Äòwrong‚Äô case,
   ;; provide the ‚Äòcorrect‚Äô casing.
   company-dabbrev-ignore-case nil

   ;; Immediately activate completion.
   company-idle-delay 0)

  ;; Use C-/ to manually start company mode at point. C-/ is used by undo-tree.
  ;; Override all minor modes that use C-/; bind-key* is discussed below.
  (bind-key* "C-/" #'company-manual-begin)

  ;; Bindings when the company list is active.
  :bind (:map company-active-map
              ("C-d" . company-show-doc-buffer) ;; In new temp buffer
              ("<tab>" . company-complete-selection)
              ;; Use C-n,p for navigation in addition to M-n,p
              ("C-n" . (lambda () (interactive) (company-complete-common-or-cycle 1)))
              ("C-p" . (lambda () (interactive) (company-complete-common-or-cycle -1)))))

;; It's so fast that we don't need a key-binding to start it!
#+end_src
Note that ~M-/~ goes through a sequence of completions ---and ~C-/~ manually begins
company mode at point.  Besides the arrow keys, we can also use ~M-~ with ~n, p~ to
navigate the options /or/ use ~C-s~ to search the list of suggestions.

+ Company backends are available as separate packages.
+ Note that [[https://github.com/company-mode/company-mode/issues/360][by default]] company mode does not support completion for phrases
  containing hyphens ---this can be altered, if desired.

Besides boring word completion, let's add support for [[https://github.com/dunn/company-emoji][emojis]].
#+begin_src emacs-lisp
(use-package company-emoji
  :config (add-to-list 'company-backends 'company-emoji))
#+end_src

For example: ü•û üíª üêµ ‚úâÔ∏èüòâ üê¨ üåµ.

‚û°Ô∏èOn a new line, write ~:~ then any letter to have a tool-tip appear.
All emoji names are lowercase. ‚óÄ

+ On MacOS, ~C-‚åò-SPC~ brings up an emoji picker, where one drags desired emojis to
  textual areas.
+ [[https://gist.github.com/rxaviers/7360908][Here]] is a list of emoji ---all supported by Github.

The libraries ~emojify~ and ~emojify-logos~ provides cool items like =:haskell:
:emacs: :org: :ruby: :python:=.  Unfortunately they do not easily export to html
with org-mode, so I'm not using them.
:Alternatives:
#+BEGIN_SRC emacs-lisp
(use-package emojify
 :config (setq emojify-display-style 'image)
 :init (global-emojify-mode 1)) ;; Will install missing images, if need be.
#+END_SRC

(use-package emojify-logos
:after emojify)

For example,
#+begin_src emacs-lisp :tangle no
 :emacs: :haskell: :org: :c: :wink: :ruby: :python: :c: :html5:
#+end_src
Yields :emacs: :haskell: :org: :c: :wink: :ruby: :python: :c: :html5:. Run ~(emojify-insert-emoji)~ to see more.

Rather than remember all of these, let's install [[https://github.com/syohex/emacs-ac-emoji][ac-emoji]]
for completion of emoji names.

(use-package ac-emoji
  :init (ac-emoji-setup)
)
:End:

*** Intro to Snippets
:PROPERTIES:
:CUSTOM_ID: Intro-to-Snippets
:END:

A *snippet, template, mechanism* is a tool that when you press some keystrokes
inserts some text, possibly with some fields (‚Äòblanks‚Äô) to fill in.  Possibly
interesting read:
+ [[https://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/index.html][Snippet Expansion With Yasnippet: Save Yourself Keystrokes and Headaches]]
  ---a nice before introduction to Yasnippet (‚ÄúYet another snippet‚Äù)
+ [[https://jpace.wordpress.com/2012/10/20/tweaking-emacs-snippets/][Tweaking Emacs: Snippets]] ---a brief article on using snippets for uniformity
  across languages and to mitigate verbosity of weak languages (i.e., those
  without macros).

--------------------------------------------------------------------------------

[[http://joaotavora.github.io/yasnippet/snippet-development.html][Yasnippet]] is a pleasant utility for template expansion with the alluring
feature to allow arbitrary Lisp code to be executed during expansion.
The declaration of templates is verbose, requiring a particular file
hierarchy, as such I utilise [[https://github.com/Kungsgeten/yankpad][Yankpad]] which allows me to employ
an Org-mode approach: Each template corresponds to an org heading of
the form ~Key:Words:For:Expansion:Here: name of snippet here~ and the
template body is then the body of the org heading.
Any of ~Key, Words, For, Expansion, Here~ will rewrite into the body
of the org tree. This is much more terse, and I even don't bother
with that; instead preferring to tangle my templates using yankpad
as a mere interface. It is important to note that Yankpad also provides
features that are not in Yassnippet, such as allowing arbitrary language
code to be executed ---one simply uses an org-src block!

There can only be one major completion backend for any mode, but
other backends can serve as secondary ones. Here's a function to
make ~company-yankpad~ a secondary of all existing backends.
#+begin_src emacs-lisp
;; Add yasnippet support for all company backends
;;
(cl-defun my/company-backend-with-yankpad (backend)
  "There can only be one main completition backend, so let's
   enable yasnippet/yankpad as a secondary for all completion
   backends.

   Src: https://emacs.stackexchange.com/a/10520/10352"

  (if (and (listp backend) (member 'company-yankpad backend))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yankpad))))
#+end_src

#+begin_src emacs-lisp
;; Yet another snippet extension program
(use-package yasnippet
  :diminish yas-minor-mode
  :config
    (yas-global-mode 1) ;; Always have this on for when using yasnippet syntax within yankpad
    ;; respect the spacing in my snippet declarations
    (setq yas-indent-line 'fixed))

;; Alternative, Org-based extension program
(use-package yankpad
  :diminish
  :config
    ;; Location of templates
    (setq yankpad-file "~/.emacs.d/yankpad.org")

    ;; Ignore major mode, always use defaults.
    ;; Yankpad will freeze if no org heading has the name of the given category.
    (setq yankpad-category "Default")

    ;; Load the snippet templates ---useful after yankpad is altered
    (yankpad-reload)

    ;; Set company-backend as a secondary completion backend to all existing backends.
    (setq company-backends (mapcar #'my/company-backend-with-yankpad company-backends)))
#+end_src

With these settings, along with the ~company~ backend, I may type a keyword then
kbd:TAB it into expansion.

Yankpad requires we have an org file that contains our templates, so we /tangle/
such a file ~~/.emacs.d/yankpad.org~, and have all of our templates be globally
accessible. Here is the start of my file:
#+BEGIN_SRC org :tangle "~/.emacs.d/yankpad.org"  :comments none
,#+Description: This is file is generated from my init.org; do not edit.

,* Default                                           :global:
#+end_src

#+begin_details Fully discussed example: Using the clipboard for Org-links
Here's an example of a common template I perform by hand ---no more!  I have the
expected habit of /copying (to clipboard)/ a URL from someplace then forming a
link to it by writing ~[[URL] [description]]~, since the URL & syntax are already
known, let's expand those and place the cursour at the only unknown ---the
description.
#+begin_src org :tangle "~/.emacs.d/yankpad.org" :comments none
,** my_org_insert_link: cleverly insert a link copied to clipboard
 [[${1:`(clipboard-yank)`}][$2]] $0
#+end_src

What's going on here? ( The above, verbatim: ~[[${1:`(clipboard-yank)`}][$2]] $0~. )
0. This template is expanded with the keyword ~my-org-insert-link~, then kbd:TAB.
1. The cursour lands at position ~$1~, which has default text being the result
  of evaluating ~(clipboard-yank)~.
  # I've ‚Äòdocumented‚Äô this default as being the url.

  # If I leave out the ~$(clipboard-yank)~ part, the default would simply be ~url~ pasted in.

  We may evaluate Lisp code anywhere by enclosing it in backticks.

  # `(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`

2. If we're satisfied with the current field, we simply tab to the next field.
   Otherwise, we simply write text ---which overwrites the default text.

3. After enough tabbing we complete the template and the cursour lands
   at position ~$0~.

‚ü™ Having default or mirrored text for ~$2~ would not allow me to see the URL
field, lest I wish to change it or at least confirm it's what I want.
Hence, the ~$2~ field has no default. ‚ü´

Let's overwrite the usual way to insert such links, via ~C-c C-l~.
#+BEGIN_SRC emacs-lisp
(cl-defun org-insert-link ()
  "Makes an org link by inserting the URL copied to clipboard and
  prompting for the link description only.

  Type over the shown link to change it, or tab to move to the
  description field.

  This overrides Org-mode's built-in ‚Äòorg-insert-link‚Äô utility;
  whence C-c C-l uses the snippet."
  (interactive)
  (insert "my_org_insert_link")
  (yankpad-expand))
#+END_SRC
#+end_details

/Warning!/ Snippet names cannot have hypens in them ---in this setup at least.

The [[http://joaotavora.github.io/yasnippet/snippet-development.html][Yasnippet manual]] is an accessible read, as is the [[https://github.com/Kungsgeten/yankpad][Yankpad manual]], and
 showcases many other utilities; such as having certain snippets being
 enabled only in particular modes or on demand. Of note is that field ~$n~ can be
 accessed in code with the invocation ~(yas-field-value n)~.

Incidentally, I used this snippet setup to [[https://www.youtube.com/watch?v=NYOOF9xKBz8&feature=youtu.be][demo]] the idea of repetitious code in
grouping constructs within dependently-typed languages, which was accepted and
led to my doctoral research on a [[https://alhassy.github.io/next-700-module-systems/][‚Äòdo it yourself module system‚Äô]].

The rest of this section is other templates, not much for now,
concluding with actually loading this snippet mechanism globally.

         The remaining subsections discuss contents of my yankpad file.

*** Org-mode Templates ---A reason I ‚Äúgenerate‚Äù templates ;)
:PROPERTIES:
:CUSTOM_ID: Org-mode-Templates-A-reason-I-generate-templates
:END:

This produces a pop-up list of org-mode block types, if ~src~ is selected, then a
list of my commonly used languages pops-up.  Alternatively, ignore the pop-up
menu and write any block or language name.
#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** begin: produce an org-mode block
,#+begin_${1:environment$(let*
    ((block '("src" "example" "quote" "verse" "center" "latex" "html" "ascii"))
     (langs '("c" "emacs-lisp" "lisp" "latex" "python" "sh" "haskell" "plantuml" "prolog"))
     (type (yas-choose-value block)))
     (concat type (when (equal type "src") (concat " " (yas-choose-value langs)))))}
 $0
,#+end_${1:$(car (split-string yas-text))}
#+end_src
In this case, ~yas-text~ is equivalent to (~yas-field-value 1)~;
it generally refers to the value of the field being mirrored with ~${n: ‚ãØyas-text‚ãØ}~.

However, going through pop-ups takes precious time ---besides being slightly annyoing.
Let's introduce a template for my most utilised kind of language blocks.
#+begin_example
,** s_org: src block for org
,#+begin_src org
$0
,#+end_src
#+end_example

However, doing this for each language I want is a waste of time and textual
space. Why? *The purpose of templates is to reduce repetition,* yet the above
block would be repeated with only 3 parts ‚Äòunknown‚Äô: The expansion keyword, the
description, and the org-mode source block name.  Whence, the template /text/ is
generated by the following basic loop ---whose source block is named
~my-org-lang-templates~.
#+name: my-org-lang-templates
#+begin_src emacs-lisp :tangle no :wrap "src org :tangle ~/.emacs.d/yankpad.org" :exports code :results replace drawer
;; We make an org BLOCK snippet template for each LANG the user has declared.
;;
(cl-loop for (shortcut block takes-language-argument? default-text)
      in '(("s_" "src" t)
           ("is_" "inline source" t)  ;; Treated specially below
           ("e_" "example" t)
           ("q_" "quote")
           ("v_" "verse")
           ("c_" "center")
           ("ex_" "export") ;; only HTML and LATEX
           ;; https://alhassy.github.io/org-special-block-extras/#Summary
           ("p_"  "parallel" nil "\n$0\n#+columnbreak:\n")
           ("d_"  "details"  nil "${1:title}\n$0")
           ("ed_" "edcomm"   nil  "${1:editor}\n$0")
           ("doc_" "documentation" nil "${1: mandatory entry name}\n$0")
           ("def_" "latex-definitions"))
      for languages = (if takes-language-argument?
                          (-cons* "org" "agda2" "any" ;; Extra ‚Äòlanguages‚Äô
                                  ;; Also include whatever languages we've loaded for literate programming.
                                  (--map (symbol-name (car it)) org-babel-load-languages))
                        '("")) ;; The ‚Äúempty language‚Äù
      concat (cl-loop for lang in languages
                   for key         = (concat shortcut
                                       (if (s-blank? lang) block lang))
                   for description =  (if (s-blank? lang)
                                          block
                                        (concat
                                         block " for " lang))
                   concat (if (equal "is_" shortcut)
                              (concat "\n** " key ": " description
                                      "\nsrc_" lang "[:exports code]{$1} $0")
                            (concat "\n** " key ": " description
                                    "\n#+begin_" block " " lang
                                    (or default-text "\n$0")
                                    "\n#+end_" block "\n"))))
#+end_src

The /resulting text/ of this block, generated below, is tangled to our yankpad by
utilising a [[https://www.gnu.org/software/emacs/manual/html_node/org/Noweb-reference-syntax.html][noweb]] source block invocation. An example of the resulting text is
the above ~s_org~ block. The result is (last I checked) *83* template expansions
---that would have been a bit much to write by hand.
#+begin_example org
,#+begin_src org :tangle "~/.emacs.d/yankpad.org" :noweb yes
<<my-org-lang-templates()>>
,#+end_src
#+end_example
# ActuallyDoIt
#+begin_src org  :tangle "~/.emacs.d/yankpad.org" :noweb yes :comments none
<<my-org-lang-templates()>>
#+end_src

# The ‚Äú:eval never-export‚Äù means that this block is never tangled on document
# export, C-c C-e.

#+begin_box
Now ~s_~, due to company mode, brings up a list of languages that I can then
scroll down through, then ‚Äúenter‚Äù upon to expand. Moreover, the prefix ~s_~ means
that the key is mostly irrelevant, since I needn't remember it because
company-mode immediately lists possible completions /along/ with the /descriptions/
for the snippets. Likewise for examples with ~e_~ or quotes with ~q_~.  Super neat
stuff :-)

                 Ain't this reminiscent of meta-programming ;-)
#+end_box
Using =noweb= invocations, any time the tangling is performed, the yankpad
is kept up to date ---no personal intervention from myself.

# Neat, but not what I want.
# https://github.com/abo-abo/auto-yasnippet

:Fun_albeit_useless_exercise:

Let's push this frontier a bit more ‚Ä¶

In expressive languages like Agda, one can not only be type polymorphic but also
‚Äòlevel polymorphic‚Äô ---since types constitute a hierarchy where a ‚Äòtype‚Äô is
uninterestingly an ‚Äòelement‚Äô of a higher ‚Äòtype‚Äô, ad infinitum.  For example, the
type of a level polymorphic ‚Ä≤choice‚Äô function would be ~{a : Level} (A : Set a) ‚Üí A~
---note that such a choice function cannot exist since for any type ~A~ it returns
an element of ~A~, then what of the empty type. Anyhow, the template ~{${1:a} :
Level} ‚Üí (${2:A} : Set $1) ‚Üí $0~ would suffice to make this happen. Yet, what if
we wanted /n/-many sets?

Make a function that takes /n ‚â§ 26/ as input, produces a list of
levels, then uses each level to produce a list of type names ;-)
:End:

With the advent of org-special-block-extras, I've made increased usage of links
--such as ~green:hello~ which yields green:hello and ~[[kbd:][green]]~ which yields
[[kbd:][green]].
#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** ll_make_a_link: insert a link template
${1:`(let* ((œÑ (read-string "Link type: "))
            (Œ¥ (read-string "Link Description: "))
            (‚ä§ (if (s-contains? ":" œÑ) œÑ (s-concat œÑ ":"))))
       (format "[[%s][%s]]" ‚ä§ Œ¥))`} $0
#+END_SRC

*** Work Templates

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** ll_console_log: Log some JS variables

console.log("%c ******* LOOK HERE *******", "color: green; font-weight: bold;");
console.log({ ${1:List the variables here whose values you want to log} });
$0

,** uuidgen: Insert the result of ‚Äúuuidgen‚Äù and copy it to the clipboard

${1:`(-let [it (shell-command-to-string "uuidgen | tr '[:upper:]' '[:lower:]' |
pbcopy; pbpaste")] (message "Copied to clipboard, uuid: %s" it) it)`}
#+end_src

*** Elisp Templates
:PROPERTIES:
:CUSTOM_ID: Elisp-Templates
:END:

The following snippets were rather useful as I began learning Lisp to construct
my editor of choice ---I love Emacs so much. Admittedly, I still need the first
one below and usually beat around the bush by using ~(cl-loop for ‚ãØ do ‚ãØ)~, (doc:cl-loop), which is
‚Äònoisier‚Äô but easier to remember and to read for non-Lispers.
#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** loop:  Elisp's for each loop
(dolist (${1:var} ${2:list-form})
        ${3:body})

,** defun: Lisp functions
(cl-defun ${1:fun-name} (${2:arguments})
  "${3:documentation}"
  $0)

,** cond: Elisp conditionals
(cond (${1:scenario‚ÇÅ} ${2:response‚ÇÅ})
      (${3:scenario‚ÇÇ} ${4:response‚ÇÇ}))
#+end_src

*** Equational Templates
:PROPERTIES:
:CUSTOM_ID: Equational-Templates
:END:

To show ~‚Ñí = ‚Ñõ~, one starts at the complicated side, say /‚Ñí/, then, with the aim of
simplification, tries to end at the simpler side, /ùì°/.  Along the way, one
justifies each step of the calculation. This approach is popular in the proof
assistant Agda; [[https://alhassy.github.io/PathCat/][Examples]]. Read more about [[http://www.mathmeth.com/][informal calculational proofs]].

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** fun: Function declaration with type signature

${1:fun-name} : ${2:arguments}
$1 ${3:args} = ?$0

,** eqn_begin: Start a ‚â°-Reasoning block in Agda

begin
  ${1:complicated-side}
$0‚â°‚ü® ${3:reason-for-the-equality} ‚ü©
 ${2:simpler-side}
‚àé

,** eqn_step: Insert a step in a ‚â°-Reasoning block in Agda
‚â°‚ü® ${2:reason-for-the-equality} ‚ü©
  ${1:new-expression}
$0
#+end_src

One expands ~eqn_begin~, tabs to fill in the three main locations, then
/immediately/ types ~eqn_step~ to produce a new step in a calculational proof.

*** Fixed replies
:PROPERTIES:
:CUSTOM_ID: Fixed-replies
:END:

Here are some replies that I sometimes need to produce; e.g., to people who
insist their way is the right way.

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** reply_opinionated_pantomath: What to say to, e.g., an arrogant academic

Your certainty inspires me to continuing exploring, and I may arrive at your
point of view, but I'm going to need more evidence first.

,** reply_em_dashes: Why use em dashes for parenthetical remarks?

According to the ‚ÄúCanadian Style Guide‚Äù (CSG):

   The em is an expansive, attention-seeking dash. It supplies much stronger
   emphasis than the comma, colon or semicolon it often replaces. Positioned
   around interrupting elements, em dashes have the opposite effect of
   parentheses‚Äîem dashes emphasize; parentheses minimize.

From ‚ÄúA Logical Approach to Discrete Math‚Äù (LADM), page ix:

   We place a space on one side of an em dash ---here are examples--- in
   order to help the reader determine whether the em dash begins or ends
   a parenthetical remark. In effect, we are creating two symbols from one.
   In longer sentences---and we do write long sentences from time to time---the
   lack of space can make it difficult to see the sentence structure---especially
   if the em dash is used too often in one sentence. Parenthetical remarks
   delimited by parentheses (like this one) have a space on one side of each
   parenthesis, so why not parenthetical remarks delimited by em dashes?

Interestingly, according to the CSG, there should be no space before or after an
em dash.  As such, it appears that the spacing is mostly stylistic; e.g., some
people surround em-s with spaces on both sides.  In particular, when em-s are
unmatched, I make no use of additional space ---indeed this form of one-sided
parentheses without a space is how LADM is written, as can be seen at the top of
page 3.
#+end_src

*** COMMENT Misc Templates
:PROPERTIES:
:CUSTOM_ID: Misc-Templates
:END:

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** remark: top-level literate comment

{{{remark(${1:thoughts})}}} $0
#+end_src

Where my local use contains ~#+MACRO: remark  @@latex: \fbox{\textbf{Comment: $1 }}@@~.

*** Emojis
:PROPERTIES:
:CUSTOM_ID:
:END:

#+NAME: my-emoji-templates
#+begin_src emacs-lisp :tangle no :wrap "src org :tangle ~/.emacs.d/yankpad.org" :exports code :results replace drawer
;;
;; https://emojipedia.org/people/
(cl-loop for (emoji name description)
         in '((üòÄ "Grinning Face"
                  "Often conveys general pleasure and good cheer or humor.")

              (üòÉ "Grinning Face with Big Eyes"
                  "Often conveys general happiness and good-natured amusement.
                   Similar to üòÄ Grinning Face but with taller,
                   more excited eyes.")

              (üòÑ "Grinning Face with Smiling Eyes"
                  "Often conveys general happiness and good-natured amusement.
                   Similar to üòÄ Grinning Face and üòÉ Grinning
                   Face With Big Eyes, but with warmer, less
                   excited eyes.")

              (üòÅ "Beaming Face with Smiling Eyes"
                  "Often expresses a radiant, gratified
                  happiness. Tone varies, including warm, silly,
                  amused, or proud.")

              (üòÜ "Grinning Squinting Face"
                  "Often conveys excitement or hearty laughter.
                   Similar to üòÄ Grinning Face but with eyes that
                   might say ‚ÄòSquee!‚Äô or ‚ÄòAwesome!‚Äô An emoji form of
                   the >< or xD emoticons.")

              (üòÖ "Grinning Face with Sweat"
                  "Intended to depict nerves or discomfort but
                  commonly used to express a close call, as if
                  saying ‚ÄòWhew!‚Äô and wiping sweat from the
                  forehead. ")

              (ü§£ "Rolling on the Floor Laughing"
                  "Often conveys hysterical laughter more intense
                  than üòÇ Face With Tears of Joy.")

              (üòÇ "Face with Tears of Joy")
              (üôÇ "Slightly Smiling Face")
              (üôÉ "Upside-Down Face")
              (üòâ "Winking Face")
              (üòä "Smiling Face with Smiling Eyes")
              (üòá "Smiling Face with Halo")
              (ü•∞ "Smiling Face with Hearts")
              (üòç "Smiling Face with Heart-Eyes")
              (ü§© "Star-Struck")
              (üòò "Face Blowing a Kiss")
              (üòó "Kissing Face")
              (‚ò∫Ô∏è "Smiling Face")
              (üòö "Kissing Face with Closed Eyes")
              (üòô "Kissing Face with Smiling Eyes")
              (ü•≤ "Smiling Face with Tear")
              (üòã "Face Savoring Food")
              (üòõ "Face with Tongue")
              (üòú "Winking Face with Tongue")
              (ü§™ "Zany Face")
              (üòù "Squinting Face with Tongue")
              (ü§ë "Money-Mouth Face")
              (ü§ó "Hugging Face")
              (ü§≠ "Face with Hand Over Mouth")
              (ü§´ "Shushing Face")
              (ü§î "Thinking Face")
              (ü§ê "Zipper-Mouth Face")
              (ü§® "Face with Raised Eyebrow")
              (üòê "Neutral Face")
              (üòë "Expressionless Face")
              (üò∂ "Face Without Mouth")
              (üòè "Smirking Face")
              (üòí "Unamused Face")
              (üôÑ "Face with Rolling Eyes")
              (üò¨ "Grimacing Face")
              (ü§• "Lying Face")
              (üòå "Relieved Face")
              (üòî "Pensive Face")
              (üò™ "Sleepy Face")
              (ü§§ "Drooling Face")
              (üò¥ "Sleeping Face")
              (üò∑ "Face with Medical Mask")
              (ü§í "Face with Thermometer")
              (ü§ï "Face with Head-Bandage")
              (ü§¢ "Nauseated Face")
              (ü§Æ "Face Vomiting")
              (ü§ß "Sneezing Face")
              (ü•µ "Hot Face")
              (ü•∂ "Cold Face")
              (ü•¥ "Woozy Face")
              (üòµ "Dizzy Face")
              (ü§Ø "Exploding Head")
              (ü§† "Cowboy Hat Face")
              (ü•≥ "Partying Face")
              (ü•∏ "Disguised Face")
              (üòé "Smiling Face with Sunglasses")
              (ü§ì "Nerd Face")
              (üßê "Face with Monocle")
              (üòï "Confused Face")
              (üòü "Worried Face")
              (üôÅ "Slightly Frowning Face")
              (‚òπÔ∏è "Frowning Face")
              (üòÆ "Face with Open Mouth")
              (üòØ "Hushed Face")
              (üò≤ "Astonished Face")
              (üò≥ "Flushed Face")
              (ü•∫ "Pleading Face")
              (üò¶ "Frowning Face with Open Mouth")
              (üòß "Anguished Face")
              (üò® "Fearful Face")
              (üò∞ "Anxious Face with Sweat")
              (üò• "Sad but Relieved Face")
              (üò¢ "Crying Face")
              (üò≠ "Loudly Crying Face")
              (üò± "Face Screaming in Fear")
              (üòñ "Confounded Face")
              (üò£ "Persevering Face")
              (üòû "Disappointed Face")
              (üòì "Downcast Face with Sweat")
              (üò© "Weary Face")
              (üò´ "Tired Face")
              (ü•± "Yawning Face")
              (üò§ "Face with Steam From Nose")
              (üò° "Pouting Face")
              (üò† "Angry Face")
              (ü§¨ "Face with Symbols on Mouth")
              )
         for nom  = (s-replace " " "_" name)
         for desc = (s-collapse-whitespace (or description ""))
         concat (concat
                 ;; f_‚Ä¶ ‚áí get emoji from company menu showing only name & emoji
                 (format "\n** f_%s: %s %s \n%s" nom emoji "" emoji)
                 ;; fd_‚Ä¶ ‚áí get emoji from company menu showing name, emoji, & ‚Äòd‚Äôescription
                 (format "\n** fd_%s: %s %s \n%s" nom emoji desc emoji)))
#+end_src

#+begin_src emacs-lisp
;; Get all unicode emojis to appear within Emacs
;; See also: https://emacs.stackexchange.com/questions/5689/force-a-single-font-for-all-unicode-glyphs?rq=1
(set-fontset-font t nil "Apple Color Emoji")
#+end_src

#+begin_src org :tangle "~/.emacs.d/yankpad.org" :noweb yes :exports none
<<my-emoji-templates()>>
#+end_src

*** ¬† =my_‚ãØ= Templates to obtain User Information
:PROPERTIES:
:CUSTOM_ID: my-Templates-to-obtain-User-Information
:END:

Let's add templates for links to common user information ^_^

#+begin_src org :tangle "~/.emacs.d/yankpad.org"  :comments none
,** my_name: User's name
`user-full-name`

,** my_email: User's email address
`user-mail-address`

,** my_github: User's Github repoistory link
https://github.com/alhassy/

,** my_emacsdrepo: User's version controlled Emacs init file
https://github.com/alhassy/emacs.d

,** my_blog: User's blog website
https://alhassy.github.io/

,** my_webpage: User's organisation website
http://www.cas.mcmaster.ca/~alhassm/

,** my_twitter: User's Twitter profile
https://twitter.com/musa314

,** my_masters_thesis
A Mechanisation of Internal Galois Connections In Order Theory Formalised Without Meets
https://macsphere.mcmaster.ca/bitstream/11375/17276/2/thesis.pdf
#+end_src

It may be useful to also have Org-link variants of these ‚Ä¶

*** Templates from other places in my init
:PROPERTIES:
:CUSTOM_ID: Activate-templates-from-other-places-in-my-init
:END:

In this setup, I have some templates appear elsewhere, tagged with =:noweb-ref
templates-from-other-places-in-my-init=. They are presented in natural
positions, but can only occur to the machine after template expansion is setup.
Using org-mode, we are able to /present/ code in any order and /tangle/ it to
the order the compilers need it to be!

Let's activate all such templates, now after template expansion has been setup.
#+begin_src org :tangle no
,#+begin_src org :noweb yes :tangle "~/.emacs.d/yankpad.org" :comments none
<<templates-from-other-places-in-my-init>>
,#+end_src
#+end_src

You can press kbd:C-c_C-v_C-v, doc:org-babel-expand-src-block, to see what this
block expands into...
#+begin_details Expansion
# This is also live.
#+begin_src org :noweb yes :tangle "~/.emacs.d/yankpad.org" :comments none
<<templates-from-other-places-in-my-init>>
#+end_src
#+end_details

Note: Since I've insisted that Org blocks are space sensative, any whitespace
before the ~<<‚ãØ>>~ will propogate to the resulting extracted code.

#+begin_box Warning! :background-color red
This section had
#+begin_src org :tangle no
:PROPERTIES:
:CUSTOM_ID: Templates-from-other-places-in-my-init
:END:
#+end_src
Which, as of Org 9.4, led to the entire section being tangled: This is what the
above incantation requested, but I thought it only worked on src blocks, having
the specified ~:noweb-ref~, not on ~:CUSTOM_ID:~ incidentally having the same
name.
#+end_box

* Life within Org-mode
:PROPERTIES:
:CUSTOM_ID: Life-within-Org-mode
:END:

It's hard to estimate how long a task takes if you don't keep track of time
spent by ‚Äòclocking-in and clocking-out‚Äô of tasks. We can ‚Äòcapture‚Äô todos right
in the middle of a task /without/ context-switching; e.g., no opening a todos
file!  After some reflection on the relative importance of the tasks, we can
schedule them into our ‚Äòagenda‚Äô.

                                 Let's do this!

** Using Org-Mode as a Day Planner
:PROPERTIES:
:CUSTOM_ID: Using-Org-Mode-as-a-Day-Planner
:END:

     ‚ü™ This section is based on a dated, yet delightful, tutorial
                 of the same title by [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][John Wiegley]]. ‚ü´

We want a day-planner with the following use:
0. ‚ÄúMindlessly‚Äù & rapidly create new tasks.
1. Schedule and archive tasks at the end, or start, of the work day.
2. Glance at a week's tasks, shuffle if need be.
3. Prioritise the day's tasks. Aim for ‚â§15 tasks.
4. Progress towards completion of ~A~ tasks by documenting work completed.
5. Repeat! During the day, if anything comes up, capture it and intentionally
   forget about it.

#+begin_box :background-color orange
#+begin_center
badge:Workflow|CheatSheet|informational|https://alhassy.github.io/emacs.d/Workflow.pdf

A 1-page, 3-column, PDF summarising the ideas and keybindings of this section
~(‡∏á‡≤†_‡≤†)‡∏á~
#+end_center
#+end_box

*** Capturing ideas & notes without interrupting the current workflow
:PROPERTIES:
:CUSTOM_ID: Capturing-ideas-notes-without-interrupting-the-current-workflow
:END:

[[https://orgmode.org/org.html#Setting-up-capture][Capture]] lets me quickly make notes & capture ideas, with associated reference
material, without any interruption to the current work flow. Without losing
focus on what you're doing, quickly jot down a note of something important that
just came up.

#+begin_details ‚Äòmy/org-capture‚Äô Implementation
#+begin_src emacs-lisp
(cl-defun my/org-capture-buffer (&optional keys no-additional-remarks
                                           (heading-regexp "Subject: \\(.*\\)"))
  "Capture the current [narrowed] buffer as a todo/note.

This is mostly intended for capturing mail as todo tasks ^_^

When NO-ADDITIONAL-REMARKS is provided, and a heading is found,
then make and store the note without showing a pop-up.
This is useful for when we capture self-contained mail.

The HEADING-REGEXP must have a regexp parenthesis construction
which is used to obtain a suitable heading for the resulting todo/note."
  (interactive "P")
  (let* ((current-content (substring-no-properties (buffer-string)))
         (heading         (progn (string-match heading-regexp current-content)
                                 (or (match-string 1 current-content) ""))))
    (org-capture keys)
    (insert heading "\n\n\n\n" (s-repeat 80 "-") "\n\n\n" current-content)

    ;; The overtly verbose conditions are for the sake of clarity.
    ;; Moreover, even though the final could have ‚Äút‚Äù, being explicit
    ;; communicates exactly the necessary conditions.
    ;; Being so verbose leads to mutual exclusive clauses, whence order is irrelevant.
    (cond
     ((s-blank? heading)
        (beginning-of-buffer) (end-of-line))
     ((and no-additional-remarks (not (s-blank? heading)))
        (org-capture-finalize))
     ((not (or no-additional-remarks (s-blank? heading)))
        (beginning-of-buffer) (forward-line 2) (indent-for-tab-command)))))
#+end_src
With that in-hand, we use a wrapper to ~org-capture~ to make use of it.
#+begin_src emacs-lisp
(defun my/org-capture (&optional prefix keys)
  "Capture something!

      C-c c   ‚áí Capture something; likewise for ‚ÄúC-u‚Åø C-c c‚Äù where n ‚â• 3.
C-u   C-c c   ‚áí Capture current [narrowed] buffer.
C-u 5 C-c c   ‚áí Capture current [narrowed] buffer without adding additional remarks.
C-u C-u C-c c ‚áí Goto last note stored."
  (interactive "p")
  (case prefix
    (4     (my/org-capture-buffer keys))
    (5     (my/org-capture-buffer keys :no-additional-remarks))
    (t     (org-capture prefix keys))))
#+end_src
#+end_details

#+begin_src emacs-lisp :results raw replace :exports results :wrap box
(s-join "\n" (--map (concat "+  [[kbd:" (s-replace "‚áí" "]]" it))  (cddr (s-split "\n" (documentation #'my/org-capture)))))
#+end_src

#+RESULTS:
#+begin_box
+  [[kbd:      C-c c   ]] Capture something; likewise for ‚ÄúC-u‚Åø C-c c‚Äù where n ‚â• 3.
+  [[kbd:C-u   C-c c   ]] Capture current [narrowed] buffer.
+  [[kbd:C-u 5 C-c c   ]] Capture current [narrowed] buffer without adding additional remarks.
+  [[kbd:C-u C-u C-c c ]] Goto last note stored.
#+end_box

E.g., I have a task, or something I wish to note down, rather than opening some
file, then making a heading, then writing it; instead, I press kbd:C-c_c_t and a
pop-up appears, I make my note, and it disappears ---with my notes file(s) now
being altered! Moreover, by default it provides a timestamp and a link to the
file location where I made the note ---helpful for tasks, tickets, to be tackled
later on.

#+begin_src emacs-lisp
;; Location of my todos/notes file
(setq org-default-notes-file "~/Dropbox/todo.org")

;; ‚ÄúC-c c‚Äù to quickly capture a task/note
(define-key global-map "\C-cc" #'my/org-capture) ;; See below.
#+end_src

#+begin_details "By default we only get a ‚Äòtasks‚Äô form of capture, let's add some more."
#+begin_src emacs-lisp
(cl-defun my/make/org-capture-template
   (shortcut heading &optional (no-todo nil) (description heading) (scheduled nil))
  "Quickly produce an org-capture-template.

  After adding the result of this function to ‚Äòorg-capture-templates‚Äô,
  we will be able perform a capture with ‚ÄúC-c c ‚Äòshortcut‚Äô‚Äù
  which will have description ‚Äòdescription‚Äô.
  It will be added to the tasks file under heading ‚Äòheading‚Äô.

  ‚Äòno-todo‚Äô omits the ‚ÄòTODO‚Äô tag from the resulting item; e.g.,
  when it's merely an interesting note that needn't be acted upon.

  Default for ‚Äòdescription‚Äô is ‚Äòheading‚Äô. Default for ‚Äòno-todo‚Äô is ‚Äònil‚Äô.

  Scheduled items appear in the agenda; true by default.

  The target is ‚Äòfile+headline‚Äô and the type is ‚Äòentry‚Äô; to see
  other possibilities invoke: C-h o RET org-capture-templates.
  The ‚Äú%?‚Äù indicates the location of the Cursor, in the template,
  when forming the entry.
  "
  `(,shortcut ,description entry
      (file+headline org-default-notes-file ,heading)
         ,(concat "*" (unless no-todo " TODO") " %?\n"
                (when nil ;; this turned out to be a teribble idea.
                  ":PROPERTIES:\n:"
                (if scheduled
                    "SCHEDULED: %^{Any time ‚âà no time! Please schedule this task!}t"
                  "CREATED: %U")
                "\n:END:") "\n\n ")
      :empty-lines 1 :time-prompt t))
#+end_src

#+begin_src emacs-lisp
(setq org-capture-templates
      (cl-loop for (shortcut heading)
            in (-partition 2 '("t" "Tasks, Getting Things Done"
                               "r" "Research"
                               "2" "2FA3"
                               "m" "Email"
                               "e" "Emacs (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà"
                               "i" "Islam"
                               "b" "Blog"
                               "a" "Arbitrary Reading and Learning"
                               "l" "Programming Languages"
                               "p" "Personal Matters"))
            collect  (my/make/org-capture-template shortcut heading)))
#+end_src

Rather than adding notes to particular Org headings in my =todo.org= file, I could
defer such a choice by having only one template and have ~C-c a~ automatically use
it. Then I could ‚Äòrefile‚Äô tasks to their appropriate parent headings with ~w~.
This allows us to seperate the concerns of capturing ideas from doing any form
of processing. Something to consider.

#+begin_src emacs-lisp
;; Update: Let's schedule tasks during the GTD processing phase.
;;
;; For now, let's automatically schedule items a week in advance.
;; TODO: FIXME: This overwrites any scheduling I may have performed.
;; (defun my/org-capture-schedule ()
;;   (org-schedule nil "+7d"))
;;
;; (add-hook 'org-capture-before-finalize-hook 'my/org-capture-schedule)
#+end_src
#+end_details

For now I capture everything into a single file.  One would ideally keep
separate client, project, information in its own org file.
+ ‚áí Org capture actually lets us add /any/ type of entry, ‚Äòprogrammable template‚Äô,
  to /any/ type of file!  ‚áê
  * Look at doc:my/make/org-capture-template, above, to notice that capture
    actually lets you add /any/ type of item to /any/ file.
+ ( For now, I'm only using it to add entries to my tasks lists. )
+ Org-protocol is a way to create capture notes in org-mode from other applications.

Let's also ensure *[[orange:TODO]]*-s respect hierarchical structure.
#+BEGIN_SRC emacs-lisp
;; Cannot mark an item DONE if it has a  TODO child.
;; Conversely, all children must be DONE in-order for a parent to be DONE.
(setq org-enforce-todo-dependencies t)
#+END_SRC

*Where am I currently capturing?*
+ During meetings, when a nifty idea pops into my mind, I quickly capture it.
  - I've found taking my laptop to meetings makes me an active listener
    and I get much more out of my meetings since I'm taking notes.
+ Through out the day, as I browse the web, read, and work; random ideas pop-up, and I capture them indiscriminately.
+ I envision that for a phone call, I would open up a capture to make note of what the call entailed so I can review it later.
+ Yet another place to capture content is from mail, such as for reference
  material, or self-contained tasks.
  # See [[#Capturing-Mail-as-Todo-Notes][above]] for this discussion.
+ Anywhere you simply want to make a note, for the current heading, just press
  ~C-c C-z~. The notes are just your remarks along with a timestamp; they are
  collected at the top of the tree, under the heading.

  #+begin_src emacs-lisp
  ;; Ensure notes are stored at the top of a tree.
  (setq org-reverse-note-order nil)
  #+end_src

Anyhow‚Ä¶
*** Step 1: When new tasks come up
:PROPERTIES:
:CUSTOM_ID: Step-1-When-new-tasks-come-up
:END:

Isn't it great that we can squirrel away info into some default location
then immediately return to what we were doing before ---with speed & minimal distraction! ‚ô•‚Äø‚ô•
Indeed, if our system for task management were slow then we may not produce
tasks and so forget them altogether! ~—â(„Çú„É≠„Çú—â)~

+ Entering tasks is a desirably impulsive act; do not make any further
  scheduling considerations.

  The next step, the review stage occurring at the end or the start of the
  workday, is for processing.

#+begin_quote
The reason for this is that entering new tasks should be impulsive, not reasoned.
Your reasoning skills are required for the task at hand, not every new tidbit.
You may even find that during the few hours that transpire between creating a
task and categorizing it, you‚Äôve either already done it or discovered it doesn‚Äôt
need to be done at all! ---[[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][John Wiegley]]
#+end_quote

When my computer isn't handy, I'll make a note on my phone then transfer it later.
*** Step 2: Filing your tasks
:PROPERTIES:
:CUSTOM_ID: Step-2-Filing-your-tasks
:END:
At a later time, a time of reflection, we go to our tasks list and actually
schedule time to get them done by kbd:C-c_C-s, doc:org-schedule, then pick a
date by entering a number in the form ~+ùìÉ~ to mean that task is due ~ùìÉ~ days from
now.

+ Tasks with no due date are ones that ‚Äúcould happen anytime‚Äù, most likely no time at all.
+ At least schedule tasks reasonably far off in the future, then reassess when the time comes.
+ An uncompleted task is by default rescheduled to the current day, each day, along with how overdue it is.
  - Aim to consciously reschedule such tasks!

  Let's keep track of how many times, and when, we have pushed events to other dates.
   #+BEGIN_SRC emacs-lisp
;; Add a note whenever a task's deadline or scheduled date is changed.
(setq org-log-redeadline 'time)
(setq org-log-reschedule 'time)
#+END_SRC

#+begin_box custard
  With time, it will become clear what is an unreasonable day
  verses what is an achievable day.
#+end_box

[[https://orgmode.org/manual/Repeated-tasks.html][Repeat tasks]] by a repeater such as ‚Äò+1m‚Äô or ‚Äò+7d‚Äô in their timestamps; e.g.,
~DEADLINE: <2005-10-01 Sat +1m>.~

--------------------------------------------------------------------------------

A ‚Äòproject‚Äô is a task that has multiple steps, each as a checkbox item. It can
be given a percentage marker to show progress: Place ~[%]~ after its name, then
press [[kbd:C-c_#]] ---doc:org-update-statistics-cookies--- on the name to see a
completion percentage ---press kbd:C-c_C-c on a checkbox item to toggle its
completion state.

*** Step 3: Quickly review the upcoming week
:PROPERTIES:
:CUSTOM_ID: Step-3-Quickly-review-the-upcoming-week
:END:

The next day we begin our work, we press kbd:C-c_a_a to see the scheduled tasks
for this week ---kbd:C-c_C-s to re-schedule the task under the cursor and [[kbd:r]]
to refresh the agenda.
#+begin_src emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
#+end_src

+ Show the next ùìÉ days schedule ‚áê =C-u ùìÉ C-c a a=.

# The next section, [[Super Agenda]], will discuss acting on entries in the agenda
# buffer.

--------------------------------------------------------------------------------

Org agenda is an interactive tool for generating summary reports from Org data
---e.g., commonly, the weekly task list is generated from todo tasks.

The agenda dispatch menu, ~C-c a~, has options for displaying tasks ---e.g., ~C-c a
m~ generates a list of entries having the same tags.  new ways to view tasks by
altering the ~org-agenda-custom-commands~ variable ---e.g., above we added two,
one for completed tasks and one for unscheduled tasks.

# Moreover, we can overlay due dates and priorities to tasks in a non-intrusive
# way that is easy to edit by hand.
#+begin_details "Let's setup the basics of our agenda."
#+begin_src emacs-lisp
;; List of all the files & directories where todo items can be found. Only one
;; for now: My default notes file.
(setq org-agenda-files (list org-default-notes-file))

;; Display tags really close to their tasks.
(setq org-agenda-tags-column -10)

;; How many days ahead the default agenda view should look
(setq org-agenda-span 'day)
;; May be any number; the larger the slower it takes to generate the view.
;; One day is thus the fastest ^_^

;; How many days early a deadline item will begin showing up in your agenda list.
(setq org-deadline-warning-days 14)

;; In the agenda view, days that have no associated tasks will still have a line showing the date.
(setq org-agenda-show-all-dates t)

;; Scheduled items marked as complete will not show up in your agenda view.
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done  t)
#+end_src
#+end_details

#+begin_details Super Simple ‚Äòagenda‚Äô Mini-tutorial
link-here:Super-Simple-‚Äòagenda‚Äô-Mini-tutorial

The agenda view, like nearly all Emacs entities, is interactive:
+ =ùìÉ f,b= ‚áí Look forward at next week's agenda, or backward to a previous week.
  - The optional $ùìÉ$ means do the action =ùìÉ=-many times;
    it defaults to 1.
+ =w, d= ‚áí toggle week view, or day view; use ~v~ to see possible views.
  - E.g., ~C-u 2017 v y~ shows us the specific year 2017.
+ =ùìÉ n,p= to navigate to next and previous entries.
+ =t= ‚áí cycle TODO state of the current entry.
+ =¬±= ‚áí cycle priority state.
+ =ùìÉ S-‚áÜ= ‚áí Shift date time by $ùìÉ$ days; 1 day by default.
+ =C-c C-s= ‚áí Reschedule an entry; prefix it with ~C-u~ to remove a scheduled entry.
  - [[https://orgmode.org/manual/Repeated-tasks.html][Repeat tasks]] by a repeater such as ‚Äò+1m‚Äô or ‚Äò+7d‚Äô
  in their timestamps; e.g., ~DEADLINE: <2005-10-01 Sat +1m>.~
+ =s= ‚áí save all agenda buffers; i.e., save the org-files where the agenda items live.
+ =g= ‚áí Rebuild agenda according to any changes made thus far.
+ =F= ‚áí Toggle ‚Äòfollow mode‚Äô: As you go up/down entries, you can see their
  details in an adjacent window.
  - =SPC= ‚áí Show details of a single entry in other window; stay in Agenda.
+ =RET, TAB= ‚áí Go to the current entry in the current window or in a new
  adjacent window, so as to alter task details.

# ;; Easy way to capture tasks when in agenda view.
# (define-key org-agenda-mode-map "c" #'org-capture)

#+end_details

The agenda view ‚Äì--even in the 7-days-at-a-time view--‚Äì will always begin on the
current day.  This is important, since while using org-mode as a day planner,
you never want to think of days gone past. That‚Äôs something you do in other
ways, such as when reviewing completed tasks.
#+begin_src emacs-lisp
(setq org-agenda-start-on-weekday nil)
#+end_src

#+begin_details Grouping agenda entries together
Instead of having the day's tasks all in one field, org-super-agenda allows us
to use predicates to group entries together; e.g., by considering an entry's
=:tags:= or its priority level. Since I'm placing all my tasks in a single file,
under appropriate parent headings, I want entries to be shown according to their
parent heading. Of-course, the top-most grouping, the important tasks, should be
pulled out of their group and placed at the top.
#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  ;; :hook (org-agenda-mode . origami-mode) ;; Easily fold groups via TAB.
  ;; :bind (:map org-super-agenda-header-map ("<tab>" . origami-toggle-node))
  :config
  (org-super-agenda-mode)
  (setq org-super-agenda-groups
        '((:name "Important" :priority "A")
          (:name "Personal" :habit t)
          ;; For everything else, nicely display their heading hierarchy list.
          (:auto-map (lambda (e) (org-format-outline-path (org-get-outline-path)))))))

;; MA: No noticable effect when using org-super-agenda :/
;;
;; Leave new line at the end of an entry.
;; (setq org-blank-before-new-entry '((heading . t) (plain-list-item . t)))
#+END_SRC

:OlderSetup:
#+BEGIN_SRC emacs-lisp :tangle no
        ;; Default order is 0, first come first serve.
        ;; Items are ‚Äúor‚Äù-ed by default.
        '((:name "Important"
                 :tag "PackageFormer"
                 :tag "PF"
                 :tag "research"
                 :and (:tag "JC" :priority "A")
                 :and (:tag "WK" :priority "A")
                 :priority "A")

          ;; Groups supply their own section names when none are given
          (:name "Living the dream!" :tag "personal")
          (:name "Discrete Mathematics" :tag "2fa3")
          (:name "Emacs Init" :tag "init")
          ;; (:priority<= "B" :order 1)
          ;; Everything else automatically gets its own group
          (:auto-category t)
          )))
#+END_SRC
:End:
# + Origami mode ---see below in [[Text Folding with Origami-mode]]---
#   works well with super-agenda. Just ~M-x origami-mode~ then ~C-c f~ to
#   enable the folding hydra.
#
The [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] homepage shows complex configurations and pleasant
screenshots contrasting with and without the system.
E.g., you can change how entries in particular headings are displayed and coloured.
#+end_details
*** Step 4: Getting ready for the day
:PROPERTIES:
:CUSTOM_ID: Step-4-Getting-ready-for-the-day
:END:
After having seen our tasks for the week, we press [[kbd:d]] to enter daily view for
the current day. Now we decide whether the items for today are ~A~: of high
urgency & important; ~B~: of moderate urgency & importance; or ~C~: Pretty much
optional, or very quick or fun to do.
+ ~A~ tasks should be both important /and/ urgently done on the day they were scheduled.
  - Such tasks should be relatively rare!
  - If you have too many, you're anxious about priorities and rendering
    priorities useless.
+ ~C~ tasks can always be scheduled for another day without much worry.
  - Act! If the thought of rescheduling causes you to worry, upgrade it to a
    ~B~ or ~A~.
+ As such, most tasks will generally be priority ~B~:
  Tasks that need to be done, but the exact day isn't as critical as with an
  ~A~ task. These are the ‚Äúbread and butter‚Äù tasks that make up your day to day
  life.

On a task item, or any org-heading, press [[kbd:,]] then one of [[kbd:A/B/C]] to set its
priority.  Then [[kbd:r]] to refresh.

#+begin_details Pretty Prioritisation Markers
link-here:Pretty-Prioritisation-Markers
Let's set four priority levels and their colours: The more intense colours
are for more urgent tasks.
#+begin_src emacs-lisp
(setq org-lowest-priority ?D) ;; Now org-speed-eky ‚Äò,‚Äô gives 4 options
(setq org-priority-faces
'((?A :foreground "red" :weight bold)
  (?B . "orange")
  (?C . "yellow")
  (?D . "green")))
#+end_src

+ ~C-c ,~ anywhere to set the priority of the current heading.
  - We may press ~A-D~ or ~SPC~ to an remove existing priority.

Priority markers are of the form ~[#ùí≥]~, the [[https://github.com/harrybournis/org-fancy-priorities][fancy priorities]] package visually
renders them as words or icons.
#+begin_src emacs-lisp
(use-package org-fancy-priorities
  :diminish org-fancy-priorities-mode
  :hook   (org-mode . org-fancy-priorities-mode)
  :custom (org-fancy-priorities-list '("HIGH" "MID" "LOW" "OPTIONAL")))
#+end_src
#+end_details

*** Step 5: Doing the work
:PROPERTIES:
:CUSTOM_ID: Step-5-Doing-the-work
:END:

Since ~A~ tasks are the important and urgent ones, if you do all of the ~A~ tasks and
nothing else today, no one would suffer. It's a good day (‚îÄ‚Äø‚Äø‚îÄ).

There should be no scheduling nor prioritising at this stage.
You should not be touching your tasks file until your next review session:
Either at the end of the day or the start of the next.

+ Leverage priorities! E.g., When a full day has several ~C~ tasks, reschedule
  them for later in the week without a second thought.
  - You've already provided consideration when assigning priorities.

*** Step 6: Moving a task toward completion
:PROPERTIES:
:CUSTOM_ID: Step-6-Moving-a-task-toward-completion
:END:

My workflow states are described in the section
[[Workflow States]] and contain states: ~TODO, STARTED, WAITING, ON_HOLD, CANCELLED, DONE~.
+ Tasks marked ~WAITING~ are ones for which we are awaiting some event, like someone
  to reply to our query. As such, these tasks can be rescheduled until I give up
  or the awaited event happens ---in which case I go to ~STARTED~ and document
  the reply to my query.
+ The task may be put off indefinitely with ~ON_HOLD~, or I may choose never to do it
  with ~CANCELLED~. Along with ~DONE~, these three mark a task as completed
  and so it needn't appear in any agenda view.

I personally clock-in and clock-out of tasks ---keep reading---, where upon
clocking-out I'm prompted for a note about what I've accomplished so far.
Entering a comment about what I've done, even if it's very little, feels like
I'm getting something done. It's an explicit marker of progress.

In the past, I would make a ‚Äúcaptain's log‚Äù at the end of the day, but that's
like commenting code after it's written, I didn't always feel like doing it and
it wasn't that important after the fact. The continuous approach of noting after
every clock-out is much more practical, for me at least.

*** Step 7: Archiving Tasks
:PROPERTIES:
:CUSTOM_ID: Step-7-Archiving-Tasks
:END:
During the review state, when a task is completed, ‚Äòarchive‚Äô it with
doc:org-archive-subtree or kbd:C-c_C-x_C-s: This marks it as done, adds a time
stamp, and moves it to a local ~*.org_archive~ file. What was our *[[red:‚Äòto do‚Äô]]* list
becomes a *[[green:‚Äòta da‚Äô]]* list showcasing all we have done (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

Archiving keeps task lists clutter free, but unlike deletion it allows us,
possibly rarely, to look up details of a task or what tasks were completed in a
certain time frame ---which may be a motivational act, to see that you have
actually completed more than you thought, provided you make and archive tasks
regularly. We can use [[doc:org-search-view][~M-x org-search-view~]] to search an org file /and/ the
archive file too, if we enable it so.
#+BEGIN_SRC emacs-lisp
;; C-c a s ‚û© Search feature also looks into archived files.
;; Helpful when need to dig stuff up from the past.
(setq org-agenda-text-search-extra-files '(agenda-archives))
#+END_SRC

#+begin_src emacs-lisp
;; Invoking the agenda command shows the agenda and enables
;; the org-agenda variables.
;; ‚û© Show my agenda upon Emacs startup.
(when my/personal-machine?
  (org-agenda "a" "a")) ;; Need this to have ‚Äúorg-agenda-custom-commands‚Äù defined.
#+end_src

Let's install some helpful views for our agenda.

+ ~C-c a c~: See completed tasks at the end of the day and archive them.
   #+begin_src emacs-lisp
;; Pressing ‚Äòc‚Äô in the org-agenda view shows all completed tasks,
;; which should be archived.
(add-to-list 'org-agenda-custom-commands
  '("c" todo "DONE|ON_HOLD|CANCELLED" nil))
#+end_src

+ ~C-c a u~: See unscheduled, undeadlined, and undated tasks in my todo files.
  Which should then be scheduled or archived.
   #+begin_src emacs-lisp
(add-to-list 'org-agenda-custom-commands
  '("u" alltodo ""
     ((org-agenda-skip-function
        (lambda ()
              (org-agenda-skip-entry-if 'scheduled 'deadline 'regexp  "\n]+>")))
              (org-agenda-overriding-header "Unscheduled TODO entries: "))))
#+end_src

/At the end of the day, let's schedule at least 3 things that must be done the
next day; i.e., have priority =A=./

** Tag! You're it!
:PROPERTIES:
:CUSTOM_ID: Tag-You're-it
:END:

Even when items are categorised under their own parent headings, they may be
related in some way and that can made explicit by adding a ~:tag:~ to their
headings; e.g., two entries both have the ~:jasim:@work:~ tags, then looking for
the ~:@work:~ tag shows me all entries that are tagged as ‚Äúat work‚Äù.

            | Tags provide a cross-section of one's entries. |

Tags let us find related stuff quickly, even though they're differently
categorised.

/After calling ~org-agenda~, we may select ~m~ to match for tags, or use
~org-tags-view~ to search for tags./

*What to tag?* Common tags are =:@laptop:, :@work:, :@home:= to identify the
location where tasks take place ---Use: When I'm at a particular place, I need
only consider tasks that apply to that place ;-) Other tags I use are =:ùë≠ùë≥:= to
identify remarks or email or request from person ùë≠irstname ùë≥astname; or
something that might be interesting to that person.  I also use ~:video:, :book:,
:paper:~; which let me quickly find all videos!  Finally, I also use
=:project_name:= to identify notes that may be of interest to a particular
project, but are more appropriately categorised elsewhere ---e.g., when learning
about an Emacs feature, I may tag my notes with another project's name to
consider whether that feature could be useful there.

*How to tag?*

You can just add a ~:tag‚ÇÅ:‚ãØ:tag‚Çô:~ after a heading. If you press space, before the
tags, then they are automatically indented flushright to column 77; postive
numbers do not flushright but use exact column number.
#+BEGIN_SRC emacs-lisp
 (setq org-tags-column -77) ;; the default
#+END_SRC

Use ~C-c C-q~, or ~org-set-tags-command~, on a heading or just the speed key ~:~ on
the asterisks of a heading to set the tags of an item ---as usual, with Helm we
obtain a window of all existing tags to select from. Unfortunatley, this only
supports having one tag; for more, you can add them in manually or ‚Ä¶

#+begin_src emacs-lisp
(use-package helm-org) ;; Helm for org headlines and keywords completion.
(add-to-list 'helm-completing-read-handlers-alist
             '(org-set-tags-command . helm-org-completing-read-tags))

;; Also provides: helm-org-capture-templates
#+end_src

Now ~:~ or ~C-c C-q~ will show existing tags for the current heading, press ~TAB~ to
obtain a list of all exisiting tags, press ~C-SPC~ to select the desired tags,
then =TAB= or =RET= to confirm the resulting tag list, and ~RET~ to finish or ~TAB~ to
select more tags.

Let's render tags by Unicode symbols.
#+begin_src emacs-lisp
(use-package org-pretty-tags
  :diminish org-pretty-tags-mode
  :demand t
  :config
   (setq org-pretty-tags-surrogate-strings
         '(("Neato"    . "üí°")
           ("Blog"     . "‚úç")
           ("Audio"    . "‚ô¨")
           ("Video"    . "üì∫")
           ("Book"     . "üìö")
           ("Running"  . "üèÉ")
           ("Question" . "‚ùì")
           ("Wife"     . "üíï")
           ("Text"     . "üí¨") ; üì® üìß
           ("Friends"  . "üë™")
           ("Self"     . "üçÇ")
           ("Finances" . "üí∞")
           ("Car"      . "üöó") ; üöô üöó üöò
           ("Urgent"   . "üî•"))) ;; üì• üì§ üì¨
   (org-pretty-tags-global-mode 1))
#+end_src

** Automating [[https://en.wikipedia.org/wiki/Pomodoro_Technique][Pomodoro]] ---‚ÄúCommit for only 25 minutes!‚Äù
:PROPERTIES:
:CUSTOM_ID: Automating-https-en-wikipedia-org-wiki-Pomodoro-Technique-Pomodoro-Commit-for-only-25-minutes
:END:

Effort estimates are for an entire task.
Yet, sometimes it's hard to even get started on some tasks.

+ The code below ensures a 25 minute timer is started whenever clocking in happens.

    - The timer is in the lower right of the modeline.

+ When the timer runs out, we get a notification.

+ We may have the momentum to continue on the difficult task, or clock-out and
  take a break after documenting what was accomplished.

#+BEGIN_SRC emacs-lisp
;; Tasks get a 25 minute count down timer
(setq org-timer-default-timer 25)

;; Use the timer we set when clocking in happens.
(add-hook 'org-clock-in-hook
  (lambda () (org-timer-set-timer '(16))))

;; unless we clocked-out with less than a minute left,
;; show disappointment message.
(add-hook 'org-clock-out-hook
  (lambda ()
  (unless (s-prefix? "0:00" (org-timer-value-string))
     (message-box "The basic 25 minutes on this difficult task are not up; it's a shame to see you leave."))
     (org-timer-stop)))
#+END_SRC

Note that this does not conflict with the total effort estimate for the task.

‚ü® I'm told there's a package already made for this ---maybe I need to stop writing
code, and do more searches; then again, I've learned a lot by writing code. ‚ü©

** Journaling
:PROPERTIES:
:CUSTOM_ID: Journaling
:END:

*** Intro to why even journal                                      :ignore:
:PROPERTIES:
:CUSTOM_ID: Intro-to-why-even-journal
:END:

Thus far I've made it easy to quickly capture ideas and tasks, not so much on
the analysis phase:

- What was accomplished today?
- What are some notably bad habits? Good habits?
- What are some future steps?

Rather than overloading the capture mechanism for such thoughts, let's employ
~org-journal~ ---journal entries are stored in files such as ~journal/20190407~,
where the file name is simply the date, or only one file per year as I've set it
up below.  Each entry is the week day, along with the date, then each child tree
is an actual entry with a personal title preceded by the time the entry was
made.  Unlike capture and its agenda support, journal ensures entries are
maintained in chronological order with calendar support.

Since org files are plain text files, an entry can be written anywhere and later
ported to the journal. Or, written directly in the journal file if we add the
necessary Org-header: Asterisks and time.

The separation of concerns is to emphasise the capture stage as being quick and
relatively mindless, whereas the journaling stage as being mindful.  Even though
we may utilise capture to provide quick support for including journal entries, I
have set my journal to be on a yearly basis ---one file per year--- since I want
to be able to look at previous entries when making the current entry; after all,
it's hard to compare and contrast easily unless there's multiple entries opened
already.

As such, ideally at the end of the day, I can review what has happened, and what
has not, and why this is the case, and what I intend to do about it, and what
problems were encountered and how they were solved ---in case the problem is
encountered again in the future.  *Consequently, if I encounter previously
confronted situations, problems,* *all I have to do is reread my journal to get an
idea of how to progress.* Read more about [[https://www.google.com/search?q=on+the+importance+of+reviwing+your+day+daily&oq=on+the+importance+of+reviwing+your+day+daily&aqs=chrome..69i57.367j0j7&sourceid=chrome&ie=UTF-8][the importance of reviewing your day on
a daily basis]].

Moreover, by journaling with Org on a daily basis, it can be relatively easy to
produce a report on what has been happening recently, at work for example. I'd
like to have multiple journals, for work and for personal life, as such I will
utilise a prefix argument to obtain my work specific entries.

*** The Setup
:PROPERTIES:
:CUSTOM_ID: The-Setup
:END:

Anyhow, the setup:
#+begin_src emacs-lisp
(defun my/org-journal-new-entry (prefix)
  "Open today‚Äôs journal file and start a new entry.

  With a prefix, we use the work journal; otherwise the personal journal."
  (interactive "P")
  (-let [org-journal-file-format (if prefix "Work-%Y-%m-%d" org-journal-file-format)]
    (org-journal-new-entry nil)
    (org-mode)
    (org-show-all)))

(use-package org-journal
  ;; C-u C-c j ‚áí Work journal ;; C-c C-j ‚áí Personal journal
  :bind (("C-c j" . my/org-journal-new-entry))
  :config
  (setq org-journal-dir         "~/Dropbox/journal/"
        org-journal-file-type   'yearly
        org-journal-file-format "Personal-%Y-%m-%d"))
#+end_src

# Convenient org-journal Snippet Extensions
# Kill journal buffer after saving buffer (By @dhruvparamhans)
# (defun org-journal-save-entry-and-exit()
#   "Simple convenience function.
#   Saves the buffer of the current day's entry and kills the window
#   Similar to org-capture like behavior"
#   (interactive)
#   (save-buffer)
#   (kill-buffer-and-window))
# (define-key org-journal-mode-map (kbd "C-x C-s")
# 'org-journal-save-entry-and-exit)
#

*** Super Terse Tutorial
:PROPERTIES:
:CUSTOM_ID: Super-Terse-Tutorial
:END:

Bindings available in ~org-journal-mode~, when journaling:
+ ~C-c C-j~: Insert a new entry into the current journal file.
   - Note that keys for ~org-journal-new-entry~ shadow those for ~org-goto~.
+ ~C-c C-s~: Search the journal for a string.
  - Note that keys for ~org-journal-search~ shadow those for ~org-schedule~.

# C-c C-f - go to the next journal file.
# C-c C-b - go to the previous journal file.

# Some key-bindings in org-journal overwrite org-mode key bindings

# Major modes are supposed to only use key bindings of the form C-c C-?, where ?
# can be any letter. With org-mode already using most interesting keys,
# collisions are inevitable. Currently, org-journal overwrites
#
# C-c C-f (org-forward-heading-same-level) with org-journal-open-next-entry
# C-c C-b (org-backward-heading-same-level) with org-journal-open-previous-entry
#

All journal entries are registered in the Emacs Calendar.  To see available
journal entries do ~M-x calendar~.  Bindings available in the calendar-mode:

+ ~j~: View an entry in a new buffer.
     # C-j - view an entry but do not switch to it.
+ ~i j~: ‚ÄòI‚Äônsert a new ‚Äòj‚Äôournal entry into the day‚Äôs file.
+ ~f w/m/y/f/F~: ‚ÄòF‚Äôind, search, in all entries of the current week, month, year, all of time,
  of in all entries in the future.
#
# [ - go to previous day with journal entries.
# ] - go to next day with journal entries.



All journal entries are registered in the Emacs Calendar. To see available journal entries do M-x calendar. Bindings available in the calendar-mode:
- [[kbd: j d]] display an entry; use [[kbd: j r]] to jump to the new reading buffer;
  reading is in doc:view-mode: [[kbd:q]] to quit reading and [[kbd:SPC]] to scroll.
+ [[kbd: j s w/m/y/f]] search the journal entries of the current
  week/month/year or for all time
+ ~[/]~ go the previous/next day with journal entries

--------------------------------------------------------------------------------

*** Guided Journaling
:PROPERTIES:
:CUSTOM_ID: Guided-Journaling
:END:

Sometimes it can be tough to journal, but filling in a template can be a way to
get started. Later on, we will setup [[Snippets ---Template Expansion]] which will
allow us to write =journal_guided= then ~TAB~ to obtain the template below. Each =$ùìÉ=
indicates a position that we may input text, after which we ~TAB~ to move to next
location.

Just like the ~undo-tree~ setup at the start of this read, we use a =noweb-ref=
to present this template in a natural position; then later when template
expansion it setup, we request it to be tangled.

#+begin_src org :noweb-ref templates-from-other-places-in-my-init :tangle no
,** journal_guided: Introspection & Growth
I'm writing from ${1:location}.

Gut answer, today I feel ${2:scale}/10.
‚áí ${3:Few words or paragraphs to explain what's on your mind.}

${4: All things which cause us to groan or recoil are part of the tax of
life. These things you should never hope or seek to escape.  Life is a battle,
and to live is to fight.

‚ü® Press TAB once you've read this mantra. ‚ü©
$(when yas-moving-away-p "")
}
`(progn
  (eww "https://www.dailyinspirationalquotes.in/")
  (sit-for 2) (when nil let eww load)
  (read-only-mode -1)
  (goto-line 52)
  (kill-line)
  (kill-buffer)
  (yank))`
${7:
Self Beliefs:
+ I am working on a healthier lifestyle, including a low-carb diet.

  - I‚Äôm also investing in a healthy, long-lasting relationship.

  ‚û© These are what I want and are important to me. ‚á¶

+ I will not use any substances to avoid real issues in my life. I must own them.

+ Everything I‚Äôm searching for is already inside of me.

+ Progress is more important than perfection.

‚ü® Press TAB once you've read these beliefs. ‚ü©
$(when yas-moving-away-p "")
}

*Three things I'm grateful for:*
1. ${8:??? ‚Ä¶ e.g., old relationship, something great yesterday, an opportunity I
   have today, something simple near me within sight}
2. ${9:??? ‚Ä¶ e.g., old relationship, something great yesterday, an opportunity I
   have today, something simple near me within sight}
3. ${10:??? ‚Ä¶ e.g., old relationship, something great yesterday, an opportunity I
   have today, something simple near me within sight}

*Three things that would make today great:*
1. ${11:???}
2. ${12:???}
3. ${13:???}

*What one thing is top of mind today?*
${14:???}

*What‚Äôs one opportunity I want to go after?*
${15:???}

*What‚Äôs one thing I‚Äôm really proud of OR I‚Äôm amazed and in awe of?*
${16:???}

$0
#+end_src

Besides a bit of webscraping to obtain a daily inspirational quote image, and
the necessary yasnippet code, this template was taken from a discussion on
[[https://news.ycombinator.com/item?id=20849148][Hacker news: ‚ÄúI find journaling indispensable‚Äù]].  In time, I will likely alter it
to meet my needs, but I like it as it is right now (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

** Workflow States
:PROPERTIES:
:CUSTOM_ID: Workflow-States
:END:

Here are some of my common workflow states, ---the ‚ÄòX/Y‚Äô indicates to do action ‚ÄòX‚Äô
when entering a state and ‚ÄòY‚Äô when leaving it, with ‚Äò!‚Äô denoting a timestamp
should be generated and ‚Äò@‚Äô denoting a user note should be made.
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s@/!)" "|" "DONE(d/!)")
        (sequence "WAITING(w@/!)" "ON_HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

;; Since DONE is a terminal state, it has no exit-action.
;; Let's explicitly indicate time should be noted.
(setq org-log-done 'time)
#+end_src

The ~@~ brings up a pop-up to make a local note about why the state changed.
*Super cool stuff!*

In particular, we transition from ~TODO~ to ~STARTED~ once 15 minutes, or a
reasonable amount, of work has transpired.  Since all but one state are marked
for logging, we could use the ~lognotestate~ logging facility of org-mode, which
prompts for a note every time a task‚Äôs state is changed.

Entering a comment about what I've done, even if it's very little, feels like
I'm getting something done. It's an explicit marker of progress and motivates me
to want to change my task's states more often until I see it marked ~DONE~.

Here's how they are coloured,
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(("TODO"      :foreground "red"          :weight bold)
        ("STARTED"   :foreground "blue"         :weight bold)
        ("DONE"      :foreground "forest green" :weight bold)
        ("WAITING"   :foreground "orange"       :weight bold)
        ("ON_HOLD"   :foreground "magenta"      :weight bold)
        ("CANCELLED" :foreground "forest green" :weight bold)))
#+end_src

Now we press ~C-c C-t~ then the letter shortcut to actually make the state of an org heading.
#+begin_src emacs-lisp
(setq org-use-fast-todo-selection t)
#+end_src

We can also change through states using Shift- left, or right.
# (setq org-treat-S-cursor-todo-selection-as-state-change nil)

Let's draw a state diagram to show what such a workflow looks like.

[[http://plantuml.com/index][PlantUML]] supports drawing diagrams in a tremendously simple format
---it even supports Graphviz/DOT directly and many other formats.
Super simple setup instructions can be found [[http://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html][here]]; below are a bit more
involved instructions. Read the manual [[http://plantuml.com/guide][here]].

#+begin_src emacs-lisp
;; Install the tool
; (async-shell-command "brew tap adoptopenjdk/openjdk; brew cask install adoptopenjdk13") ;; Dependency
; (async-shell-command "brew install plantuml")

;; Tell emacs where it is.
;; E.g., (async-shell-command "find / -name plantuml.jar")
(setq org-plantuml-jar-path
      "/usr/local/Cellar/plantuml/1.2020.19/libexec/plantuml.jar")

;; Enable C-c C-c to generate diagrams from plantuml src blocks.
(add-to-list 'org-babel-load-languages '(plantuml . t) )
(require 'ob-plantuml)

; Use fundamental mode when editing plantuml blocks with C-c '
(add-to-list 'org-src-lang-modes '("plantuml" . fundamental))
#+end_src
#
# (async-shell-command "cp workflow.png ~/alhassy.github.io/assets/img/")

Let's use this!
# The source block is replaced with the generated image in-place, by default.
# #+begin_src plantuml :file workflow.png :exports code :cache (progn (async-shell-command "cp workflow.png ~/alhassy.github.io/assets/img/") "yes")
#+begin_src plantuml :file images/workflow.png :tangle no :exports both :eval never-export :results replace
skinparam defaultTextAlignment center  /' Text alignment '/

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor red
skinparam titleBackgroundColor Aqua-CadetBlue
title My Personal Task States

[*] -> Todo          /' This is my starting state '/
Done -right-> [*]    /' This is an end state      '/
Cancelled -up-> [*]  /' This is an end state      '/

/'A task is ‚ÄúTodo‚Äù, then it's ‚Äústarted‚Äù, then finally it's ‚Äúdone‚Äù. '/
Todo    -right-> Started
Started -down->  Waiting
Waiting -up->    Started
Started -right-> Done

/'Along the way, I may pause the task for some reason then
  return to it. This may be since I'm ‚ÄúBlocked‚Äù since I need
  something, or the task has been put on ‚Äúhold‚Äù since it may not
  be important right now, and it may be ‚Äúcancelled‚Äù eventually.
'/

Todo    -down-> Waiting
Waiting -up-> Todo
Waiting -up-> Done

Todo -down-> On_Hold
On_Hold -> Todo

On_Hold -down-> Cancelled
Waiting -down-> Cancelled
Todo    -down-> Cancelled

/' The Org-mode shortcuts for these states are as follows. '/
Todo      : t
On_Hold   : h
Started   : s
Waiting   : w
Cancelled : c
Done      : d

/' If a task is paused, we should document why this is the case. '/
note right  of Waiting:   Note what is\nblocking us.
note right  of Cancelled: Note reason\nfor cancellation.
note bottom of On_Hold:   Note reason\nfor reduced priority.

center footer  ‚ô•‚Äø‚ô• Org-mode is so cool (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà
/' Note that we could omit the ‚Äúcenter, left, right‚Äù if we wished,
   or used a ‚Äúheader‚Äù instead.'/
#+end_src

#+RESULTS:
[[file:images/workflow.png]]

# (org-display-inline-images t t)
# (shell-command "rm workflow.png")
# +HTML: <img src="../assets/img/workflow.png" alt="My Personal Task States">

Of note:

+ Multiline comments are with ~/' comment here '/~, single quote starts a one-line comment.

+ Nodes don't need to be declared, and their names may contain spaces if they are enclosed in double-quotes.

+ One forms an arrow between two nodes by writing a line with ~x ->[label here] y~
  or ~y <- x~; or using ~-->~ and ~<--~ for dashed lines. The label is optional.

  To enforce a particular layout, use ~-X->~ where ~X ‚àà {up, down, right, left}~.

+ To declare that a node ~x~ has fields ~d, f~ we make two new lines having
  ~x : f~ and ~x : d~.

+ One adds a note near a node ~x~ as follows: ~note right of x: words then newline\nthen more words~.

  Likewise for notes on the ~left, top, bottom~.

  - A note can be on several lines. It's terminated by ~end note~.

+ Interesting sprites and many other things can be done with PlantUML. Read the docs.

This particular workflow is inspired by [[http://doc.norang.ca/org-mode.html][Bernt Hansen]] ---while quickly searching
through the PlantUML [[http://plantuml.com/guide][manual]]: The above is known as an ‚Äúactivity diagram‚Äù and
it's covered in ¬ß4.

Org-mode may be used with PlantUML:
+  See ¬ß11,12 for using Org-mode notation to form ‚Äòmindmaps‚Äô and ‚Äòwork breakdown
  structures‚Äô.

+ Org-mode text formatters are also acknowledged but the delimiters must be
  doubled; see ¬ß16.1.

You can quickly write and see the resulting UMLs using
https://liveuml.com/, for the most part.

** Clocking Work Time
:PROPERTIES:
:CUSTOM_ID: Clocking-Work-Time
:END:

Let's keep track of the time we spend working on tasks that we may have captured
for ourselves the previous day.  Such statistics provides a good idea of how
long it actually takes me to accomplish a certain task in the future and it lets
me know where my time has gone.

+ Clock in :: on a heading with ~I~, or in the subtree with ~C-c C-x C-i~.
+ Clock out :: of a heading with ~O~, or in the subtree with ~C-c C-x C-o~.
+ Clock report :: See clocked times with ~C-c C-x C-r~.

After clocking out, the start and end times, as well as the elapsed time, are
added to a drawer to the heading. We can punch in and out of tasks as many times
as desired, say we took a break or switched to another task, and they will all
be recorded into the drawer.

#+begin_src emacs-lisp
;; Record a note on what was accomplished when clocking out of an item.
(setq org-log-note-clock-out t)
#+end_src

To get started, we could estimate how long a task will take and clock-in; then
clock-out and see how long it actually took.

# To review the day‚Äôs accomplishments, type ‚Äòl‚Äô
# (org-agenda-log-mode) from the agenda view.

Sometimes, at the beginning at least, I would accidentally invoke the transposed
command ~C-x C-c~, which saves all buffers and quits Emacs. So here's a helpful
way to ensure I don't quit Emacs accidentally.
#+begin_src emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+end_src

A few more settings:
#+begin_src emacs-lisp
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)

;; Show lot of clocking history
(setq org-clock-history-length 23)

;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)

;; Sometimes I change tasks I'm clocking quickly ---this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)

;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)

;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)

;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
#+end_src

*** Finding tasks to clock in
:PROPERTIES:
:CUSTOM_ID: Finding-tasks-to-clock-in
:END:
Use one of the following options, with the top-most being the first to be tried.
+ From anywhere, ~C-u C-c C-x C-i~ yields a pop-up for recently clocked in tasks.
+ Pick something off today's agenda scheduled items.
+ Pick a ~Started~ task from the agenda view, work on this unfinished task.
+ Pick something from the ~TODO~ tasks list in the agenda view.

# Reporting activities
# C-c C-x i

~C-c C-x C-d~ also provides a quick summary of clocked time for the current org file.

*** Estimates versus actual time
:PROPERTIES:
:CUSTOM_ID: Estimates-versus-actual-time
:END:
Before clocking into a task, add to the properties drawer ~:Effort: 1:25~ or ~C-c
C-x C-e~, for a task that you estimate will take an hour and twenty-five minutes,
for example. Now the modeline will mention the time elapsed alongside the task
name. *Woah!*

#+begin_src emacs-lisp
 (push '("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
       org-global-properties)
#+end_src

#+begin_quote org
Use speed keys ~e/E~ to insert an effort estimate, with the above being provided
  options, or to increment the current effort to the next one in the above list.
#+end_quote

This is also useful when you simply want to put a time limit on a task that
  wont be completed anytime soon, say writing a thesis or a long article, but
  you still want to work on it for an hour a day and be warned when you exceed
  such a time constraint.

  :Not_working_for_me:
  Even if you switch tasks then clock into this task again, the alarm will ring
  again, nagging you to actual listen to yourself and work on other matters.

  #+begin_src emacs-lisp
(setq org-clock-sound "~/.emacs.d/school-bell.wav")
#+end_src
   :end:

  When you've gone above your estimate time, the modeline colours it red.

** Habit Formation
:PROPERTIES:
:CUSTOM_ID: Habit-Formation
:END:

/The/ reason to use habits is that they come with a graph indicating consistency
by colour, and the goal of the game is to have [[https://lifehacker.com/jerry-seinfelds-productivity-secret-281626][the longest possible chain]] ---no
red days!

A ‚Äòhabit‚Äô is a usual (recurring) todo task marked as a habit:
Use =C-c C-x p= to set the =STYLE= property to =habit= on a task to set it as a habit.

#+BEGIN_SRC emacs-lisp
;; Show habits for every day in the agenda.
(setq org-habit-show-habits t)
(setq org-habit-show-habits-only-for-today nil)

;; This shows the ‚ÄòSeinfeld consistency‚Äô graph closer to the habit heading.
(setq org-habit-graph-column 90)

;; In order to see the habit graphs, which I've placed rightwards, let's
;; always open org-agenda in ‚Äòfull screen‚Äô.
;; (setq org-agenda-window-setup 'only-window)
#+END_SRC

| /inch by inch anything's a cinch!/ |

~!~ means today and ~‚ãÜ~ means a task has been done on that day;
intuitively green means you're on track, yellow is warning sign of overdue,
red is overdue, and blue is an acceptable break day.

Here's an example habit from the [[https://orgmode.org/manual/Tracking-your-habits.html][Org-mode manual]], where ~.+ùí≥d/ùí¥d~ reads
/perform the habit once every ùí≥ days, but never let me go ùí¥ days without doing it./
#+begin_example org
,** TODO Shave
   SCHEDULED: <2020-01-08 Wed .+2d/4d>
   :PROPERTIES:
   :STYLE:    habit
   :END:
#+end_example
/Shave every 2 days, but we can take a 3-day break; however, on the 4th day,
gotta shave!/

Remember that in the agenda view if you alter a task, say with ~t~ to mark it
done, then you need to use ~s~ to save the underlying todo/notes files; otherwise,
any ~g~ will revert the change in the agenda buffer.

** COMMENT Actually Doing Things  ---hangs my systems too much!
:PROPERTIES:
:CUSTOM_ID: Actually-Doing-Things-hangs-my-systems-too-much
:END:

Let's setup a little audio-visual reminder to regularly check my agenda
and ensure I'm not narrowing on a single task and ignoring others.
#+begin_src emacs-lisp
;; Obtain a notifications and text-to-speech utilities
(system-packages-ensure "espeak") ;; Alternatively: espeak-ng supports 109 languages
(system-packages-ensure "terminal-notifier") ;; MacOS specific

(run-at-time
 "09:00am"
 (* 2 60 60) ;; Every two hours
 (lambda ()
   (shell-command
    (format "%s"
            '(terminal-notifier
              -title    \"Check your agenda!\"
              -subtitle \"Is what you\'re doing ‚Ä¶\"
              -message  \"‚Ä¶ in alignment with your goals?\"
              -sound t -appIcon ~/.emacs.d/images/emacs-logo.png
              ;; Speak at a speed of 125 words per minute; ie slowed down.
              & espeak -s 125 \"Maybe it\'s time to do another task?\")))))
#+end_src

By default, notifications are in banner style ---they go away automatically---
we can use alert style ---in which they stay until dismissed--- in MacOS as
follows: =System Preferences ‚Üí Notifications ‚Üí terminal-notifier ‚Üí Alerts=.

+ [[https://emacs.stackexchange.com/questions/3844/good-methods-for-setting-up-alarms-audio-visual-triggered-by-org-mode-events][Here]] is an approach to triggering audio-visual alarms from Org-mode events
  ---using ~org-agenda-to-appt~.

+ Emacs's built in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Appointments.html][appointment notification facility]] can also be used as a alarm
  clock via ~M-x appt-add~.
** Using Gnus for Gmail
:PROPERTIES:
:CUSTOM_ID: Using-Gnus-for-Gmail
:END:

:Alread_done_elsewhere:
Let's set the following personal Emacs-wide variables ---to be used in other
locations besides email.

#+begin_src emacs-lisp
(setq user-full-name    "Musa Al-hassy"
      user-mail-address "alhassy@gmail.com")
#+end_src

For some fun, run this cute method.
#+BEGIN_SRC emacs-lisp :tangle no
(animate-birthday-present user-full-name)
#+END_SRC
:End:

By default, in Emacs, we may send mail: Write it in Emacs with ~C-x m~ ---or
doc:compose-mail---, then press ~C-c C-c~ to have it sent via your OS's default
mailing system ---mine appears to be Gmail via the browser. Or cancel sending
mail with ~C-c C-k~ ---the same commands for org-capturing, discussed earlier
(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

Folowing [[https://eschulte.github.io/emacs24-starter-kit/starter-kit-gnus.html][this tutorial]], to send and read email in Emacs we use [[https://en.wikipedia.org/wiki/Gnus][GNUS]], which, like
GNU itself, is a recursive acronym: GNUS Network User Service.

  1. Execute, rather place in your init:
     #+begin_src emacs-lisp
     (setq message-send-mail-function 'smtpmail-send-it)
     #+end_src
     Revert to the default OS mailing method by setting this variable to
     ~mailclient-send-it~.

     # (gnutls-available-p)

  2. Follow only the [[https://www.emacswiki.org/emacs/GnusGmail#toc1][quickstart here]]; namely, make a file named ~~/.gnus~ containing:
     #+begin_src emacs-lisp :tangle ~/.gnus
;; user-full-name and user-mail-address should be defined

;; Get mail using port 993/IMAP/‚ÄúInternet Message Access Protocol‚Äù
(setq gnus-select-method
      '(nnimap "gmail"
               (nnimap-address "imap.gmail.com")
               (nnimap-server-port 993)
               (nnimap-stream ssl)))

;; Send mail using port 587/SMTP/‚ÄúSimple Mail Transfer Protocol‚Äù
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials '(("smtp.gmail.com" 587 "alhassy@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)
     #+end_src
     # (system-packages-install "starttls")
     # (setq gnus-ignored-newsgroups "^to\.\|^[0-9. ]+\( \|$\)\|^["]"[#'()]")

  3. Get an email password for GNUS:
     1. Go to https://myaccount.google.com/security.
     2. Enable ~2-Step Verification~
     3. Click on ~App passwords~, login, then generate a new password
        with, say, name ~Emacs Gnus~.
     4. You will then obtain a secret password, the ~x~ marks below, which you insert
        in a file named ~~/.authinfo~ as follows ---using your email address.
        #+begin_src shell :tangle no
   ‚Äãmachine smtp.gmail.com login alhassy@gmail.com password xxxxxxxxxxxxxxxx port 587
   ‚Äãmachine imap.gmail.com login alhassy@gmail.com password xxxxxxxxxxxxxxxx port 993
   default login alhassy@gmail.com password xxxxxxxxxxxxxxxx
        #+end_src

  4. In Emacs, ~M-x gnus~ to see what's there.

     - Or compose mail with ~C-x m~ then send it with ~C-c C-c~.
     - Press ~C-h m~ to learn more about message mode for mail composition; or
       read the [[https://www.gnus.org/manual/message.pdf][Message Manual]].

     Only news groups with /unread mail/ are shown; to see all your groups (Gmail
     ‚Äòtags‚Äô), press ~A A~ (doc:gnus-group-list-active), then press ~u~ to toggle
     (un)subscription to such groups and they will show up in the main group
     buffer ---if they have /unread mail/.  See [[https://sachachua.com/blog/2008/05/emacs-gnus-organize-your-mail/][here]] for a tutorial on splitting
     mail groups, automatically or fancily filing them away.

--------------------------------------------------------------------------------

#+BEGIN_SRC emacs-lisp
;; After startup, if Emacs is idle for 10 seconds, then start Gnus.
;; Gnus is slow upon startup since it fetches all mails upon startup.
(when my/personal-machine?
  (run-with-idle-timer 10 nil #'gnus))
#+END_SRC

Learn more by reading [[https://www.gnu.org/software/emacs/manual/html_mono/gnus.html#Top][The Gnus Newsreader Manual]]; also available within Emacs by
~C-h i m gnus~ (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

- Or look at the [[https://www.gnu.org/software/emacs/refcards/pdf/gnus-refcard.pdf][Gnus Reference Card]].
- Or, less comprehensively, this [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org#subscribe-groups][outline]].
- [[https://www.emacswiki.org/emacs/GnusTutorial][EmacsWiki]] has a less technical and more user friendly tutorial.
- Other possibly useful links:
  + [[http://www.cataclysmicmutation.com/2010/11/multiple-gmail-accounts-in-gnus/][Multiple Gmail accounts in Gnus]]

--------------------------------------------------------------------------------

#+begin_details Super Terse Tutorial

link-here:Super-Terse-Tutorial


                        ‚ü® See the [[https://www.gnu.org/software/emacs/refcards/pdf/gnus-refcard.pdf][GNUS Reference Card]]! ‚ü©

In gnus, by default items you've looked at disappear ---i.e., are archived.
They can still be viewed in, say, your online browser if you like.
In the ~Group~ view, ~R~ resets gnus, possibly retriving mail or alterations
from other mail clients. ~q~ exits gnus in ~Group~ mode, ~q~ exits the particular
view to go back to summary mode. Only after pressing ~q~ from within a group
do changes take effect on articles ---such as moves, reads, deletes, etc.

+ Expected keys: ~RET~ enter/open an item, ~q~ quit and return to previous view, ~g~
    refresh view ---i.e., ‚Äòg‚Äôet new articles.

+ =RET=: Enter a group by pressing, well, the enter key.
  - Use ~SPC~ to open a group and automatically one first article there.
  - Use ~C-u RET~ to see all mail in a folder instead of just unread mail.

+ Only groups/folders with unread mail will be shown, use ~L/l~ to toggle between
  listing all groups.

+ ~SPC, DEL~ to scroll forward and backward; or ~C-v, M-v~ as always.

+ =G G=: Search mail at server side in the group buffer.
  - Limit search to particular folders/groups by marking them with ~#~, or
    unmarking them with ~M-#~.

+ ~/ /,a:~ Filter mail according to subject or author; there are many
  other options, see [[https://www.gnu.org/software/emacs/manual/html_mono/gnus.html#Limiting][¬ß3.8 Limiting]].

+ =d=:  Mark an article as done, i.e., read it and it can be archived.

+ =!=: Mark an article as read, but to be kept around ---e.g., you have not
    replied to it, or it requires more reading at a later time.

  This lets us read mail offline; cached mail is found at =~/News/cache/=.

  #+BEGIN_SRC emacs-lisp :tangle "~/.gnus"
  (setq gnus-use-cache 'use-as-much-cache-as-possible)
#+END_SRC

+ =B m=:  Move an article, in its current state, to another group ---i.e.,
    ‚Äòlabel‚Äô using Gmail parlance.

    - Something to consider doing when finished with an article.

    To delete an article, simply move it to ‚Äòtrash‚Äô ---of course this will delete it
    in other mail clients as well. There is no return from trash.

    Emails can always be archieved ---never delete, maybe?

    Anyhow, ~B m Trash~ is too verbose, let's just use ~t~ for ‚Äútrash‚Äù:
    #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'gnus
  (bind-key "t"
          (lambda (N) (interactive "P") (gnus-summary-move-article N "[Gmail]/Trash"))
          gnus-summary-mode-map))

;; Orginally: t ‚áí gnus-summary-toggle-header
#+END_SRC

    - Select and deselect many articles before
      moving them by pressing ~#~ and ~M-#~, respectively, anywhere on the entry.

    - As usual, you can mark a region, =C-SPC=, then move all entries therein.

+ =R, r=: Reply with sender's quoted text in place, or without but
  still visible in an adjacent buffer.
  - Likewise ~S W~ or ~S w~ to reply all, ‚Äòwide reply‚Äô, with or without quoted text.
  - ~C-c C-z~ Delete everything from current position till the end.
  - ~C-c C-e~ Replace selected region with ‚Äò[...]‚Äô; when omitting parts of quoted text.

+ Press ~m~ to compose mail; or ~C-x m~ from anywhere in Emacs to do so.
  - ~C-c C-c~ to send the mail.
  - ~S D e~ to resend an article as new mail: Alter body, subject, etc, before
  - ~C-c C-f~ to forward mail.
    sending.

+ ~C-c C-a~ to attach a file; it'll be embedded in the mail body as plaintext.
  - Press ~o~ on an attachment to save it locally.
#+end_details

#+begin_details GNUS Prettifications

link-here:gnus-prettifications

Let's add the icon ÓÖò near my mail groups ^_^
#+BEGIN_SRC emacs-lisp
;; Fancy icons for Emacs
;; Only do this once:
(use-package all-the-icons :defer t)
  ; :config (all-the-icons-install-fonts 'install-without-asking)

;; Make mail look pretty
(use-package all-the-icons-gnus
  :defer t
  :config (all-the-icons-gnus-setup))

;; While we're at it: Make dired, ‚Äòdir‚Äôectory ‚Äòed‚Äôitor, look pretty
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

Next, let's paste in some [[http://groups.google.com/group/gnu.emacs.gnus/browse_thread/thread/a673a74356e7141f][eye-candy for Gnus]]:
#+begin_src emacs-lisp
(setq gnus-sum-thread-tree-vertical        "‚îÇ"
      gnus-sum-thread-tree-leaf-with-other "‚îú‚îÄ‚ñ∫ "
      gnus-sum-thread-tree-single-leaf     "‚ï∞‚îÄ‚ñ∫ "
      gnus-summary-line-format
      (concat
       "%0{%U%R%z%}"
       "%3{‚îÇ%}" "%1{%d%}" "%3{‚îÇ%}"
       "  "
       "%4{%-20,20f%}"
       "  "
       "%3{‚îÇ%}"
       " "
       "%1{%B%}"
       "%s\n"))
#+end_src
#+end_details

#+begin_details "Sending Mail with Lisp ---e.g., as a Bulk Mailer"
link-here:bulk-mailer
#+begin_src emacs-lisp :results replace :wrap template
(defun my/email (to subject body)
  (compose-mail to subject)
  (insert body)
  (message-send-mail)     ;; Appends info to the message buffer
  ; (let ((kill-buffer-query-functions nil)) (kill-this-buffer))
  (ignore-errors (undo))                  ;; Undo that addition
  (message-kill-buffer)
  (message "Send email to %s" to)) ;; Close that message buffer
#+end_src

#+begin_src emacs-lisp :results replace :wrap template :tangle no
;; Example
(my/email (format "%s <%s>" user-full-name user-mail-address) ;; To
          "Test"                                              ;; Subject
          "Why hello there!")                                 ;; Email body
#+end_src
#+end_details

#+begin_details [Disabled] Auto-completing mail addresses

# :CUSTOM_ID: Auto-completing-mail-addresses

In order to get going quickly, using [[https://github.com/redguardtoo/gmail2bbdb][gmail2bbdb]], let's convert our Gmail
contacts into a BBDB file ---the [[http://bbdb.sourceforge.net/][Insidious Big Brother Database]] is an
address-book application that we'll use for E-mail; if you want to use it as a
address-book application to keep track of contacts, notes, their organisation,
etc, then consider additionally installing [[https://github.com/emacs-helm/helm-bbdb][helm-bbdb]] which gives a nice menu
interface.

 - From the [[https://www.google.com/contacts][Gmail Contacts page]], obtain a =contacts.vcf= file by clicking ‚ÄúMore ->
   Export -> vCard format -> Export‚Äù.
- Run command =M-x gmail2bbdb-import-file= and select =contacts.vcf=; a ~bbdb~ file
  will be created in my Dropbox folder.
- Press ~C-x m~ then begin typing a contact's name and you'll be queried about
  setting up BBDB, say yes.

#+begin_src emacs-lisp
(use-package gmail2bbdb
  :defer t
  :custom (gmail2bbdb-bbdb-file "~/Dropbox/bbdb"))

(use-package bbdb
 :after company ;; The ‚Äúcom‚Äùplete ‚Äúany‚Äùthig mode is set below in ¬ßProse
 :hook   (message-mode . bbdb-insinuate-gnus)
         (gnus-startup-hook . bbdb-insinuate-gnus)
 :custom (bbdb-file gmail2bbdb-bbdb-file)
         (bbdb-use-pop-up t)                        ;; allow popups for addresses
 :config (add-to-list 'company-backends 'company-bbdb))
 #+end_src

Here is an [[http://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html][emacs-fu]] article on managing e-mail addressed with bbdb.
#+end_details

#+begin_details [Disabled] Feeds to Blogs
link-here:gnus-feeds-to-blogs
One can easily subscribe to an RSS feed in Gnus: Just press ~G R~ in the group
buffer view, then follow the prompts. However, doing so programmatically is much
harder.  Below is my heartfelt attempt at doing so ---if you want a feed reader
in Emacs that ‚Äújust works‚Äù, then [[https://github.com/skeeto/elfeed][elfeed]] is the way to go. When all is said and
done, the code below had me reading Gnus implementations and led me to conclude
that /Gnus has a great key-based interface but a /poor programming interface/ ---or
maybe I need to actually read the manual instead of frantically consulting
source code.

My homemade hack to getting tagged feeds programmatically into Gnus.
#+begin_src emacs-lisp :tangle no
;; Always show Gnus items organised by topic.
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

;; From Group view, press ^, then SPC on Gwene, then look for the site you want to follow.
;; If it's not there, add it via the web interface http://gwene.org/
(add-to-list 'gnus-secondary-select-methods '(nntp "news.gwene.org"))
;;
;; E.g., http://nullprogram.com/feed/ uses an Atom feed which Gnus does not
;; support natively.  But it can be found on Gwene.

(setq my/gnus-feeds
      ;; topic  title  url
      '(Emacs "C‚Äòest La ùíµ" https://cestlaz.github.io/rss.xml
        Emacs "Marcin Borkowski's Blog" http://mbork.pl?action=rss
        Emacs "Howardism" http://www.howardism.org/rss.xml
        Islam "Shia Islam Blogspot" http://welcometoshiaislam.blogspot.com/feeds/posts/default?alt=rss
        Cats "Hedonistic Learning" http://www.hedonisticlearning.com/rss.xml
        Cats "Functorial Blog"  https://blog.functorial.com/feed.rss
        Programming "Joel on Software" http://www.joelonsoftware.com/rss.xml
        Haskell "Lysxia's Blog"  https://blog.poisson.chat/rss.xml))

;; If fubared, then:
;; (ignore-errors (f-delete "~/News/" 'force) (f-delete "~/.newsrc.eld"))

;; Execute this after a Gnus buffer has been opened.
(progn
(use-package with-simulated-input)
(cl-loop for (topic title url)
      in (-partition 3 my/gnus-feeds)
      ;; url & topic are symbols, make them strings.
      for url‚Ä≤   = (symbol-name url)
      for topic‚Ä≤ = (symbol-name topic)
      ;; Avoid spacing issues by using a Unicode ghost space ‚Äú¬†‚Äù.
      for title‚Ä≤ = (gnus-newsgroup-savable-name (s-replace " " "¬†" title))
      for input  = (format "C-SPC C-a %s RET RET" title‚Ä≤)
      do
      ; cl-letf* (((symbol-function 'insert) (lambda (x) nil))) ;; see the (undo) below.
      ;; Add the group
      (with-simulated-input input
        (gnus-group-make-rss-group url‚Ä≤))
      ;; Ensure it lives in the right topic category.
      (if (equal 'no-such-topic (alist-get topic gnus-topic-alist 'no-such-topic nil #'string=))
        (push (list topic‚Ä≤ title‚Ä≤) gnus-topic-alist) ;; make topic if it doesnt exist
      (setf (alist-get topic‚Ä≤ gnus-topic-alist 'no-such-topic nil #'string=)
            (cons title‚Ä≤ (alist-get topic gnus-topic-alist 'no-such-topic nil #'string=)))))
      ;; Acknowledgement
      (message "Now switch into the GNUS group buffer, and refresh the topics; i.e., t t."))

      ;; The previous command performs an insert, since it's intended to be interactively
      ;; used; let's undo the insert.
      ; (undo-only)

;; (setq gnus-permanently-visible-groups ".*")
;;
;; Show topic alphabetically? The topics list is rendered in reverse order.
;; (reverse (cl-sort gnus-topic-alist 'string-lessp :key 'car))
#+end_src

Ironically, I've decide that ‚Äúno, I do not want to see my blogs in Emacs‚Äù for
the same reasons I do not activelly use ~M-x eww~ to browse the web in Emacs: I
like seeing the colours, fonts, and math symbols that the authours have labored
over to producing quality content. Apparently, I'm shallow and I'm okay with it
---but not that shallow, since I'm constantly pushing Emacs which looks ugly by
default but it's unreasonably powerful.
#+end_details
*** Capturing Mail as Todo/Notes
:PROPERTIES:
:CUSTOM_ID: Capturing-Mail-as-Todo-Notes
:END:

Sometime mail contains useful reference material or may be a self-contained
task. Rather than using our inbox as a todo-list, we can copy the content of the
mail and store it away in our todos/notes files.  [[#Capturing-ideas-notes-without-interrupting-the-current-workflow][Capturing]], above, is a way to,
well, capture ideas and notes /without/ interrupting the current workflow.  Above,
in the section on capturing, we define doc:my/org-capture-buffer which quickly
captures the contents of the current buffer as notes to store away.  We use that
method in the article view of mail so that [[kbd:c]] captures mail content with the
option to provide additional remarks, and [[kbd:C]] to silently do so without
additional remarks.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'gnus
  ;; Orginally: c ‚áí gnus-summary-catchup-and-exit
  (bind-key "c" #'my/org-capture-buffer gnus-article-mode-map)
  ;; Orginally: C ‚áí gnus-summary-cancel-article
  (bind-key "C"
            (lambda (&optional keys)
              (interactive "P") (my/org-capture-buffer keys 'no-additional-remarks))
            gnus-article-mode-map))
#+END_SRC

Gnus‚Äô default =c= only enables a bad habit: Subscribing to stuff that you don't
read, since you can mark all entries as read with one key. We now replace it
with a ‚Äòc‚Äôapturing mechanism that captures the current message as a todo or note
for further processing. Likewise, the default =C= is to cancel posting an article;
we replace it to be a /silent capture: Squirrel away informative mail content
without adding additional remarks./
*** Email contacts
:PROPERTIES:
:CUSTOM_ID: Email-contacts
:END:

I have a personal file, ~contacts.org~, with Emacs Lisp src blocks contributing to
a list variable ~my/contacts~. This list consists of entries of the shape:
#+begin_src emacs-lisp :tangle no
(:name "Jasim Jasonsama" :phone 123-455-4321 :email bobert_billiam@emacsmail.com)
#+end_src

With the following snippet, I can write ~contacts~ then kbd:TAB to select a
personal contact.
#+begin_src org :noweb-ref templates-from-other-places-in-my-init :tangle no :comments none
,** contacts: Get the email of one of my personal contacts

${1:`(and (or (featurep 'my/contacts) (org-babel-load-file "~/Dropbox/contacts.org"))
(yas-choose-value (--map (format "%s <%s>" (getf it :name) (getf it :email))
my/contacts)))`} $0
#+end_src

* Cosmetics
:PROPERTIES:
:CUSTOM_ID: Cosmetics
:END:

Upon startup, we want to be greeted with a useful, yet unobtrusive, message
briefly detailing major system details. Moreover, the bottom-most area of the
screen should display battery life, data, & time. Likewise, we may have a casual
file explorer ---primarily to show-off to newcomers, since great functionality
is found with ~M-x dired~ ---doc:dired.

#+BEGIN_SRC emacs-lisp
;; Get org-headers to look pretty! E.g., * ‚Üí ‚äô, ** ‚Ü¶ ‚óØ, *** ‚Ü¶ ‚òÖ
;; https://github.com/emacsorphanage/org-bullets
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+END_SRC

** Startup message: Emacs & Org versions
:PROPERTIES:
:CUSTOM_ID: Startup-message-Emacs-Org-versions
:END:

Let's always welcome ourselves when Emacs begins with a helpful message.  For
example, which user account is running and what are the version numbers of our
primary tools.

#+begin_src emacs-lisp
;; Silence the usual message: Get more info using the about page via C-h C-a.
(setq inhibit-startup-message t)

(defun display-startup-echo-area-message ()
  "The message that is shown after ‚Äòuser-init-file‚Äô is loaded."
  (message
      (concat "Welcome "      user-full-name
              "! Emacs "      emacs-version
              "; Org-mode "   org-version
              "; System "     (symbol-name system-type)
              "/"             (system-name)
              "; Time "       (emacs-init-time))))
#+end_src
Now my startup message is,
#+begin_example
Welcome Musa Al-hassy! Emacs 27.1; Org-mode 9.4.4; System darwin/Musas-MacBook-Air.local; Time 13.331914 seconds
#+end_example
:Manually_Computing_Init_Time:
#+BEGIN_SRC emacs-lisp :tangle no
(format "; Time %.3fs"
        (float-time (time-subtract (current-time) before-init-time)))
#+END_SRC
:End:

Let's change the Emacs frame to mention the name of the buffer in focus,
as well as a nice ‚Äòmotto‚Äô:
#+begin_src emacs-lisp
;; Keep self motivated!
(setq frame-title-format '("" "%b - Living The Dream (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà"))
#+end_src
** My to-do list: The initial buffer when Emacs opens up
:PROPERTIES:
:CUSTOM_ID: My-to-do-list-The-initial-buffer-when-Emacs-opens-up
:END:

I almost always have Emacs open; I don't need a dashboard, but would like to see
my to-do list and my init file, side-by-side.
#+BEGIN_SRC emacs-lisp
(if my/personal-machine?
    (find-file "~/Dropbox/todo.org")
  (find-file "~/Desktop/work.org.gpg"))
(split-window-right)			  ;; C-x 3
(other-window 1)                              ;; C-x 0
(let ((enable-local-variables :all)           ;; Load *all* locals.
      (org-confirm-babel-evaluate nil))       ;; Eval *all* blocks.
  (ignore-errors (find-file "~/.emacs.d/init.org")))
#+END_SRC

There is the neat-looking [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] package that provides an extensbile
yet minimalist splash screen showing recent files, projects, and bookmarks.

** Exquisite Fonts and Themes
:PROPERTIES:
:CUSTOM_ID: Exquisite-Fonts-and-Themes
:END:

Emacs' default theme leaves much to be desired: It does not look sleek and
shiny, which usually leaves first-timers with a poor, shallow, impression of the
system. Below we install a few themes that make Emacs look exquisite.  We cycle
between the chosen themes with kbd:C-c_t, doc:my/toggle-theme.

#+begin_details ‚Äúmy/toggle-theme‚Äù Implementation
+ ~M-x load-theme RET TAB~ shows all themes, including built-in ones,
  that may be loaded.
+ Loading multiple themes results in their pallets mixed.
  - ~M-x disable-theme~ to remove a theme from the current pallet.

--------------------------------------------------------------------------------

#+BEGIN_SRC emacs-lisp
;; Treat all themes as safe; no query before use.
(setf custom-safe-themes t)

;; Nice looking themes ^_^
(use-package solarized-theme :defer t)
(use-package doom-themes :defer t)
(use-package spacemacs-common
  :defer t
  :ensure spacemacs-theme)
#+END_SRC

+ The [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][Doom Themes]] also look rather appealing.
+ A showcase of many themes can be found [[https://emacsthemes.com/][here]].

--------------------------------------------------------------------------------

#+BEGIN_SRC emacs-lisp
;; Infinite list of my commonly used themes.
(setq my/themes '(doom-laserwave doom-solarized-light doom-vibrant spacemacs-light solarized-gruvbox-dark solarized-gruvbox-light))
(setcdr (last my/themes) my/themes)
#+END_SRC

kbd:C-c_t to toggle between the personal themes.
#+BEGIN_SRC emacs-lisp
(cl-defun my/disable-all-themes (&optional (new-theme (pop my/themes)))
  "Disable all themes and load NEW-THEME, which defaults from ‚Äòmy/themes‚Äô.

When a universal prefix is given, ‚ÄúC-u C-c t‚Äù, we load a random
theme from all possible themes.  Nice way to learn about more
themes (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà"
  (interactive)
  (mapc #'disable-theme custom-enabled-themes)
  (-let [theme (if current-prefix-arg
                   (nth (random (length (custom-available-themes)))
                        (custom-available-themes))
                 new-theme)]
    (when theme
      (load-theme theme)
      (message "Theme %s" theme))))


(defalias 'my/toggle-theme #' my/disable-all-themes)
(global-set-key "\C-c\ t" 'my/toggle-theme)


;; (my/toggle-theme)
(use-package solarized-theme)
(my/toggle-theme 'solarized-gruvbox-light)
#+END_SRC

Apparently, there's already a package that accomplishes these goals and more:
[[https://github.com/myTerminal/theme-looper][theme-looper]]. I may switch to it, but for now my simple function above is
slightly informative, to me at least, about how themes work and it does what I
want.

...Actually, the above learning adventure has made it easy to provide a similar setup
for fonts üòÅ
#+end_details

Likewise, kbd:C-c_F, doc:my/toggle-font, to quickly change fonts (according to
mood üò∏). [I already use kbd:C-c_f, doc:my/org-mode-format, for the more likely
operation of formatting text.]
#+begin_details ‚Äúmy/toggle-font‚Äù Implementation

#+begin_src emacs-lisp
;; Infinite list of my commonly used fonts
(setq my/fonts
      '("Roboto Mono Light 14" ;; Sleek
        "Input Mono 14"
        "Source Code Pro Light 14" ;; thin, similar to Inconsolata Light
        "Papyrus 14"
        "Bradley Hand Light 12"
        ;; "Chalkduster 14" ;; Laggy!
        "Courier Light 12"
        "Noteworthy 9"
        "Savoye LET 14"
        "Fantasque Sans Mono 16"
        ))
(setcdr (last my/fonts) my/fonts)

;; Let's ensure they're on our system
;; brew search "/font-/"   # List all fonts
(shell-command "brew tap homebrew/cask-fonts")
(system-packages-ensure "svn") ;; Required for the following font installs
(system-packages-ensure "font-roboto-mono")
(system-packages-ensure "font-input")
(system-packages-ensure "font-source-code-pro")
(system-packages-ensure "font-fira-mono")
(system-packages-ensure "font-mononoki")
(system-packages-ensure "font-monoid")
(system-packages-ensure "font-menlo-for-powerline")
(system-packages-ensure "font-fantasque-sans-mono")

;; Use ‚ÄúM-x set-face-font RET default RET‚Äù, or...
;; (set-face-font 'default "Source Code Pro Light14")

;; See ~2232 fonts
;; (append (fontset-list) (x-list-fonts "*" nil))

(cl-defun my/toggle-font (&optional (new-font (pop my/fonts)))
  "Load NEW-FONT, which defaults from ‚Äòmy/fonts‚Äô.

When a universal prefix is given, ‚ÄúC-u C-c F‚Äù, we load a random
font from all possible themes.  Nice way to learn about more
fonts (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà"
  (interactive)
  (let* ((all-fonts (append (fontset-list) (x-list-fonts "*" nil)))
         (font (if current-prefix-arg
                   (nth (random (length all-fonts)) all-fonts)
                 new-font)))
    (set-face-font 'default font)
    (message "Font: %s" font)))

(global-set-key "\C-c\ F" 'my/toggle-font)

;; Default font; the ‚Äúignore-‚ãØ‚Äù is for users who may not have the font.
(ignore-errors (my/toggle-font "Fantasque Sans Mono 12"))
(ignore-errors (my/toggle-font "Source Code Pro Light 14"))
#+end_src

#+end_details

In any Org file, type ~elisp:menu-set-font~; then you can click on this link to
get a nice font selection menu ---this can be useful for your own ‚Äòpersonal startup buffer‚Äô.

# Finally, for fun, let's colour all source blocks, in Org mode, by the background colour pink.
# (set-face-attribute 'org-block nil :background "pink")
# MA: This does not work well with dark themes; should use a theme-based setting.

#+end_src
** A sleek & informative mode line
:PROPERTIES:
:CUSTOM_ID: A-sleek-informative-mode-line
:END:

The ‚Äòmodeline‚Äô is a part near the bottom of Emacs that gives information about
the current mode, as well as other matters ---such as time & date, for example.

Let's have it also show remaining battery life, coloured green if charging
and coloured yellow otherwise. It is important to note that
this package is no longer maintained. It works on my machine.
#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t)
(display-time)
;; (display-battery-mode -1)
;; Nope; let's use a fancy indicator ‚Ä¶
(use-package fancy-battery
  :diminish
  :custom (fancy-battery-show-percentage  t)
          (battery-update-interval       15)
  :config (fancy-battery-mode))
#+END_SRC

Likewise, let's have the modeline display column numbers, but not line numbers.
Instead, let's have line numbers on the side of the buffer; moreover let's have
a uniform width for displaying line numbers, rather than having the width grow
as necessary.
#+BEGIN_SRC emacs-lisp
;; Following two taken care of in the spaceline package, below.
;; (column-number-mode                 t)
;; (line-number-mode                   t)
(setq display-line-numbers-width-start t)
(global-display-line-numbers-mode      t)
#+END_SRC

I may not use the spacemacs [[https://www.emacswiki.org/emacs/StarterKits][starter kit]], since I find spacemacs to ‚Äúhide things‚Äù
from me ---whereas Emacs ‚Äúencourages‚Äù me to learn more---, however it is a
configuration and I enjoy reading Emacs configs in order to improve my own
setup. From Spacemacs I've adopted Helm for list completion, its sleek light &
dark themes, and its modified powerline setup.
#+BEGIN_SRC emacs-lisp
;; When using helm & info & default, mode line looks prettier.
(use-package spaceline
  :custom (spaceline-buffer-encoding-abbrev-p nil)
          ;; Use an arrow to seperate modeline information
          (powerline-default-separator 'arrow)
          ;; Show ‚Äúline-number : column-number‚Äù in modeline.
          (spaceline-line-column-p t)
          ;; Use two colours to indicate whether a buffer is modified or not.
          (spaceline-highlight-face-func 'spaceline-highlight-face-modified)
  :config (custom-set-faces '(spaceline-unmodified ((t (:foreground "black" :background "gold")))))
          (custom-set-faces '(spaceline-modified   ((t (:foreground "black" :background "cyan")))))
          (require 'spaceline-config)
          (spaceline-helm-mode)
          (spaceline-info-mode)
          (spaceline-emacs-theme))
#+END_SRC

Other separators ---of modeline information--- that I've considered include
~'brace~ instead of an arrow, and ~'contour, 'chamfer, 'wave, 'zigzag~ which look
like browser tabs that are curved, boxed, wavy, or in the style of driftwood.
** Powerful Directory Editing with ~dired~
:PROPERTIES:
:CUSTOM_ID: Powerful-Directory-Editing-with-dired
:END:

‚ü® ~C-x C-v~ to open a file or directory in dired, using the current buffer. ‚ü©

As mentioned earlier, ~dired~ is Emacs' built-in directory editor; it's opened
with ~C-x d~.  /Dired let's us treat directories as textual objects!/ In dired,
press ~h~ to see the many actions available. Here's a few...

#+begin_details Super Terse ‚Äòdired‚Äô Tutorial

+ ~(~ toggles hiding entry details, such as modification date and ownership
+ ~s~ sort entries; modeline will display ‚ÄúDired by date‚Äù or ‚ÄúDired by name‚Äù.
+ ~o~ to open entry in anOther window; or ~RET~ to open in place.
+ ~+~ to create a new directory; or ~M-x make-directory~.
+ ~/~ to filter entries; with ~which-key~, possible completions pop-up.
  - E.g., ~/ f~ shows only files or ~/ . png~ to obtain all entries with extension
    ~png~.
  - ~/ i g~ to hide git-ignored items ^_^
  - ~/ /~ to remove all filters.
+ ~TAB~ to navigate between different groupings of entries.
  - ~RET~ on a drawer heading toggles folding it ^_^
#+end_details

The [[https://github.com/Fuco1/dired-hacks#dired-hacks-utils][dired-hacks]] family of packages lets us, say, get a dired buffer out of a shell
incantation that lists files, or use dired to open files with external tools.
Below we use three of its packages.

Pressing ~i~ inserts a directory's children under it, indented, in the current
buffer. Useful to see what's there.
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :bind (:map dired-mode-map
              ("i" . dired-subtree-toggle)))
#+END_SRC

When directory ~ùí≥~ has only one child ~ùí¥~, then in dired, instead of ~ùí≥~, show me ~ùí≥/ùí¥~
with ~ùí≥~ greyed out.
#+BEGIN_SRC emacs-lisp
(use-package dired-collapse
  :hook (dired-mode . dired-collapse-mode))
#+END_SRC

Begin dired with certain entries grouped together, according to some filtering
requirement; and with ‚Äúgarbage‚Äù files not shown ---i.e., those ending in
~.aux, .out~, etc.
#+BEGIN_SRC emacs-lisp
(use-package dired-filter
  :hook (dired-mode . (lambda () (dired-filter-group-mode)
                                 (dired-filter-by-garbage)))
  :custom
    (dired-garbage-files-regexp
      "\\(?:\\.\\(?:aux\\|bak\\|dvi\\|log\\|orig\\|rej\\|toc\\|out\\)\\)\\'")
    (dired-filter-group-saved-groups
      '(("default"
         ("Org"    (extension "org"))
         ("Executables" (exexutable))
         ("Directories" (directory))
         ("PDF"    (extension "pdf"))
         ("LaTeX"  (extension "tex" "bib"))
         ("Images" (extension "png"))
         ("Code"   (extension "hs" "agda" "lagda"))
         ("Archives"(extension "zip" "rar" "gz" "bz2" "tar"))))))
#+END_SRC

#+begin_details [Disabled] Neotree: Traditional Directory Tree Navigation
link-here:Neotree-Traditional-Directory-Tree-Navigation

We open a nifty file manager upon startup.
#+BEGIN_SRC emacs-lisp :tangle no
;; Sidebar for project file navigation
(use-package neotree
  :defer t
  :disabled
  :config (global-set-key "\C-x\ d" 'neotree-toggle)
          (setq neo-theme 'icons)) ;; Uses all-the-icons from ¬ß Booting Up

;; Open it up upon startup.
;; (neotree-toggle)
#+END_SRC
By default ~C-x d~ invokes ~dired~, but I prefer ~neotree~ for file
management.

  ‚ü® Edit: As a naive user, this is what I thought; yet a year later,
                  I've almost never used neotree. ‚ü©

Useful navigational commands include
+ ~U~ to go up a directory.
+ ~C-c C-c~ to change directory focus; ~C-C c~ to type the directory out.
+ ~?~ or ~h~ to get help and ~q~ to quit.

As always, to go to the neotree pane when it's the only other window,
execute ~C-x o~.

I /rarely/ make use of this feature; company mode & Helm together quickly provide
an automatic replacement for nearly all of my uses.

+ Reminiscent of GUI file managers is [[https://github.com/ralesi/ranger.el#features][ranger]]; e.g., it has multi-column
  display of parent directories along with a file preview mechanism.
#+end_details

** Never lose the cursor
:PROPERTIES:
:CUSTOM_ID: Never-lose-the-cursor
:END:

Let's have the entire line containing the cursour be slightly highlighted.
#+BEGIN_SRC emacs-lisp
;; Make it very easy to see the line with the cursor.
(global-hl-line-mode t)
#+END_SRC

Moreover, we reduce the mental strain of locating the cursour when navigation happens:
When we switch windows or scroll, for example, we get a wave of light near the cursor.
#+begin_src emacs-lisp
(use-package beacon
  :diminish
  :config (setq beacon-color "#666600")
  :hook   ((org-mode text-mode) . beacon-mode))
#+end_src

** Dimming Unused Windows
:PROPERTIES:
:CUSTOM_ID: Dimming-Unused-Windows
:END:

Let's dim windows, and even the whole Emacs frame, when not in use.
#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :config (dimmer-mode))
#+END_SRC

A more ‚Äòfine-grained‚Äô [[https://github.com/larstvei/Focus][tool]] dims all text except the ‚Äòparagraph‚Äô you're working
on. It's nifty, but not for me.

** Buffer names are necessarily injective
:PROPERTIES:
:CUSTOM_ID: Buffer-names-are-necessarily-injective
:END:

By default when multiple files sharing the same name are opened, say for
comparison from different directories, their buffers are named uniquely by
having the format ‚Äú‚ü®file-name‚ü© <ùìÉ>‚Äù, for numbers ùìÉ. It'd be more helpful
to have the buffer names reflect their location.
#+BEGIN_SRC emacs-lisp
;; Note that ‚Äòuniquify‚Äô is builtin.
(require 'uniquify)
(setq uniquify-separator "/"               ;; The separator in buffer names.
      uniquify-buffer-name-style 'forward) ;; names/in/this/style
#+END_SRC

            Note that this does not affect cloning buffers, ~C-x 4 c~.

( A function /f/ is /injective/ precisely when it's /distinction-preserving/; i.e.,
  /x ‚â† y ‚â° f x ‚â† f y/. We can tell whether two things are the same or not, by
  ‚Äòzooming in‚Äô on their particular property ‚Äòf‚Äô, which may be easier to compare.
  E.g., object IDs, hashcodes, unique keys in database tables. )

( Why am I bringing this up? I like math and seldom get to use it; so why not! )

** Flashing when something goes wrong ---no blinking
:PROPERTIES:
:CUSTOM_ID: Flashing-when-something-goes-wrong-no-blinking
:END:

Make top and bottom of screen flash when something unexpected happens thereby
observing a warning message in the minibuffer. E.g., C-g, or calling an unbound
key sequence, or misspelling a word.
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC
Enable flashing mode-line on errors.  On MacOS, this shows a caution symbol ^_^

A blinking cursor rushes me to type; let's slow down.
‚Ä¶ Recentely I'm thinking that a blinking cursours prompts me to continue
upwards and onwards.
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 1)
#+END_SRC

** Hiding Scrollbar, tool bar, and menu
:PROPERTIES:
:CUSTOM_ID: Hiding-Scrollbar-tool-bar-and-menu
:END:

As a laptop user, screen space is important, so let's remove rarely used visual
items.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode   -1)  ;; No large icons please
(scroll-bar-mode -1)  ;; No visual indicator please
(menu-bar-mode   -1)  ;; The Mac OS top pane has menu options
#+END_SRC

** Highlight & complete parenthesis pair when cursor is near ;-)
:PROPERTIES:
:CUSTOM_ID: Highlight-complete-parenthesis-pair-when-cursor-is-near
:END:

Highlight matching ‚Äòparenthesis‚Äô when near one of them.
#+begin_src emacs-lisp
(setq show-paren-delay  0)
(setq show-paren-style 'mixed)
(show-paren-mode)
#+end_src

Colour parens, and other delimiters, depending on their depth.
Very useful for parens heavy languages like Lisp.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :disabled
  :hook ((org-mode prog-mode text-mode) . rainbow-delimiters-mode))
#+end_src

For example:
#+begin_src emacs-lisp :tangle no
(blue (purple (forest (green (yellow (blue))))))
#+end_src

There is a powerful package called ‚Äòsmartparens‚Äô for working with pair-able
characters, but I've found it to be too much for my uses. Instead I'll utilise
the lightweight package ~electric~, which Emacs provides out of the box.
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC
It supports, by default, ACSII pairs ~{}, [], ()~ and Unicode ~‚Äò‚Äô, ‚Äú‚Äù, ‚ü™‚ü´, ‚ü®‚ü©~.

When writing Lisp, it is annoyong to have ‚Äò<‚Äô and ‚Äò>‚Äô be completed
/and/ considered as pairs.  Let's disassociate them from both notions.
#+BEGIN_SRC emacs-lisp
;; The ‚Äò<‚Äô and ‚Äò>‚Äô are not ‚Äòparenthesis‚Äô, so give them no compleition.
(setq electric-pair-inhibit-predicate
      (lambda (c)
        (or (member c '(?< ?> ?~)) (electric-pair-default-inhibit c))))

;; Treat ‚Äò<‚Äô and ‚Äò>‚Äô as if they were words, instead of ‚Äòparenthesis‚Äô.
(modify-syntax-entry ?< "w<")
(modify-syntax-entry ?> "w>")
#+END_SRC

:Rainbow_delims:
#+BEGIN_SRC emacs-lisp :tangle no
;; Act as usual unless a ‚Äò<‚Äô or ‚Äò>‚Äô is encountered.
;; ( char-at is really ‚Äúcharacter at poisition‚Äù; C-h o! )
(setq rainbow-delimiters-pick-face-function
      (lambda (depth match loc)
        (unless (member (char-after loc) '(?< ?>))
          (rainbow-delimiters-default-pick-face depth match loc))))
#+END_SRC
:End:

*Adding Org-emphasise markers for pair completion ---Disabled.*

Let's add the org-emphasises markers: If we select a word then press =*=, it
becomes bold; likewise for ~/~ for emphasise.
#+BEGIN_SRC emacs-lisp :tangle no
(setq electric-pair-pairs
         '((?~ . ?~)
           (?* . ?*)
           (?/ . ?/)))

;; Let's also, for example, avoid obtaining double ‚Äò~‚Äô and ‚Äò/‚Äô when searching for a file.

;; Disable pairs when entering minibuffer
(add-hook 'minibuffer-setup-hook (lambda () (electric-pair-mode 0)))

;; Renable pairs when existing minibuffer
(add-hook 'minibuffer-exit-hook (lambda () (electric-pair-mode 1)))
#+END_SRC

I use ‚Äò~‚Äô and ‚Äò/‚Äô too much during file navigation, and ‚Äò*‚Äô when marking numerous
Org headers, for which the ‚Äòcompleted closing pair‚Äô must tiresomely be deleted.
** Tabs                                                           :Disabled:
:PROPERTIES:
:CUSTOM_ID: Tabs
:END:

I really like my Helm-supported ~C-x b~, but the visial appeal of a [[https://github.com/manateelazycat/awesome-tab][tab bar]] for Emacs
is interesting. Let's try it out and see how long this lasts ---it may be like Neotree:
Something cute to show to others, but not as fast as the keyboard.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package awesome-tab
  :disabled
  :quelpa (awesome-tab :fetcher git :url "https://github.com/manateelazycat/awesome-tab.git")
  :config (awesome-tab-mode t))

;; Show me /all/ the tabs at once, in one group.
(defun awesome-tab-buffer-groups ()
  (list (awesome-tab-get-group-name (current-buffer))))
#+END_SRC

It's been less than three days and I've found this utility to be unhelpful, to me anyhow.

An alternative is [[https://github.com/ema2159/centaur-tabs][centaur-tabs.]]

** Window resizing using the golden ratio                         :Disabled:
:PROPERTIES:
:CUSTOM_ID: Window-resizing-using-the-golden-ratio
:END:

Let's load the following package, which automatically resizes windows so that
the window containing the cursor is the largest, according to the golden ratio.
Consequently, the window we're working with is nice and large yet the other windows
are still readable.

#+begin_src emacs-lisp :tangle no
(use-package golden-ratio
  :disabled
  :diminish golden-ratio-mode
  :init (golden-ratio-mode 1))
#+end_src

After some time this got a bit annoying and I'm no longer  using this.

** Persistent Scratch Buffer
:PROPERTIES:
:CUSTOM_ID: Persistent-Scratch-Buffer
:END:

The ~*scratch*~ buffer is a nice playground for temporary data or experiments.

However, by default its contents are not saved --which may be an issue if we
have not relocated our playthings to their appropriate files. Whence let's save
& restore the scratch buffer by default.
#+BEGIN_SRC emacs-lisp
(use-package persistent-scratch
  :defer t
  ;; In this mode, the usual save key saves to the underlying persistent file.
  :bind (:map persistent-scratch-mode-map
              ("C-x C-s" . persistent-scratch-save)))
#+END_SRC

We might accidentally close this buffer, so we could utilise the following.
#+BEGIN_SRC emacs-lisp
(defun scratch ()
   "Recreate the scratch buffer, loading any persistent state."
   (interactive)
   (switch-to-buffer-other-window (get-buffer-create "*scratch*"))
   (condition-case nil (persistent-scratch-restore) (insert initial-scratch-message))
   (org-mode)
   (persistent-scratch-mode)
   (persistent-scratch-autosave-mode 1))

;; This doubles as a quick way to avoid the common formula: C-x b RET *scratch*

;; Upon startup, close the default scratch buffer and open one as specfied above
(ignore-errors (kill-buffer "*scratch*") (scratch))
#+END_SRC

I use Org-mode often, so that's how I want things to appear.
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message (concat
  "#+Title: Persistent Scratch Buffer"
  "\n#\n# Welcome! This‚Äô a place for trying things out."
  "\n#\n# ‚ü® ‚ÄòC-x C-s‚Äô here saves to ~/.emacs.d/.persistent-scratch ‚ü© \n\n"))
#+END_SRC

** Org-Emphasise for Parts of Words                       :Disabled:
:PROPERTIES:
:CUSTOM_ID: Org-Emphasise-for-Parts-of-Words
:END:

From [[https://stackoverflow.com/a/24540651/3550444][stackoverflow]], the following incantation allows us to have
parts of works emphasied with org-mode; e.g.,
/half/ed, ~half~ed, and right in the m*idd*le! Super cool stuff!
#+BEGIN_SRC emacs-lisp :tangle no
(setcar org-emphasis-regexp-components " \t('\"{[:alpha:]")
(setcar (nthcdr 1 org-emphasis-regexp-components) "[:alpha:]- \t.,:!?;'\")}\\")
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
#+END_SRC

I've disabled this feature since multiple occurrences
of an emphasise marker are sometimes treated as one
lengthy phrase being emphasised.

** Proportional fonts for Headlines
:PROPERTIES:
:CUSTOM_ID: Proportional-fonts-for-Headlines
:END:

Let's have headings stick out a bit.
+ The larger headings are cute and reminicint of word processors, but having
  headings coloured is enough ---the larger size is too much.
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-document-title nil :height 2.0)
;; (set-face-attribute 'org-level-1 nil :height 1.0)
;; Remaining org-level-ùíæ have default height 1.0, for ùíæ : 1..8.
;;
;; E.g., reset org-level-1 to default.
;; (custom-set-faces '(org-level-1 nil))
#+END_SRC

Remember you can always use Emacs' Custom utility to get Lisp incantations ;-)
---See notes on Custom above.

** Making Block Delimiters Less Intrusive
:PROPERTIES:
:CUSTOM_ID: Making-Block-Delimiters-Less-Intrusive
:END:

Let us render Org-mode's ~#+begin_src~ and ~#+end_src~ less obtrusively by,
e.g., having the former render as a pencil marker ~‚úé~ and the latter as a
tombstone ~‚ñ°~ ---reminiscent of Halmos' QED end-of-proof marker.
# His setup also accounts for quotes.

#+begin_details Rasmus‚Äô Incantation
This is from [[https://pank.eu/blog/pretty-babel-src-blocks.html#coderef-symbol][Rasmus Roulund]].
#+begin_src emacs-lisp
  (defvar-local rasmus/org-at-src-begin -1
    "Variable that holds whether last position was a ")

  (defvar rasmus/ob-header-symbol ?‚ò∞
    "Symbol used for babel headers")

  (defun rasmus/org-prettify-src--update ()
    (let ((case-fold-search t)
          (re "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*")
          found)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward re nil t)
          (goto-char (match-end 0))
          (let ((args (org-trim
                       (buffer-substring-no-properties (point)
                                                       (line-end-position)))))
            (when (org-string-nw-p args)
              (let ((new-cell (cons args rasmus/ob-header-symbol)))
                (cl-pushnew new-cell prettify-symbols-alist :test #'equal)
                (cl-pushnew new-cell found :test #'equal)))))
        (setq prettify-symbols-alist
              (cl-set-difference prettify-symbols-alist
                                 (cl-set-difference
                                  (cl-remove-if-not
                                   (lambda (elm)
                                     (eq (cdr elm) rasmus/ob-header-symbol))
                                   prettify-symbols-alist)
                                  found :test #'equal)))
        ;; Clean up old font-lock-keywords.
        (font-lock-remove-keywords nil prettify-symbols--keywords)
        (setq prettify-symbols--keywords (prettify-symbols--make-keywords))
        (font-lock-add-keywords nil prettify-symbols--keywords)
        (while (re-search-forward re nil t)
          (font-lock-flush (line-beginning-position) (line-end-position))))))

  (defun rasmus/org-prettify-src ()
    "Hide src options via `prettify-symbols-mode'.

  `prettify-symbols-mode' is used because it has uncollpasing. It's
  may not be efficient."
    (let* ((case-fold-search t)
           (at-src-block (save-excursion
                           (beginning-of-line)
                           (looking-at "^[ \t]*#\\+begin_src[ \t]+[^ \f\t\n\r\v]+[ \t]*"))))
      ;; Test if we moved out of a block.
      (when (or (and rasmus/org-at-src-begin
                     (not at-src-block))
                ;; File was just opened.
                (eq rasmus/org-at-src-begin -1))
        (rasmus/org-prettify-src--update))
      ;; Remove composition if at line; doesn't work properly.
      ;; (when at-src-block
      ;;   (with-silent-modifications
      ;;     (remove-text-properties (match-end 0)
      ;;                             (1+ (line-end-position))
      ;;                             '(composition))))
      (setq rasmus/org-at-src-begin at-src-block)))

  (defun rasmus/org-prettify-symbols ()
    (mapc (apply-partially 'add-to-list 'prettify-symbols-alist)
          (cl-reduce 'append
                     (mapcar (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                             `(("#+begin_src" . ?‚úé) ;; ‚û§ üñù ‚ûü ‚û§ ‚úé
                               ("#+end_src"   . ?‚ñ°) ;; ‚èπ
                               ("#+header:" . ,rasmus/ob-header-symbol)
                               ("#+begin_quote" . ?¬ª)
                               ("#+end_quote" . ?¬´)))))
    (turn-on-prettify-symbols-mode)
    (add-hook 'post-command-hook 'rasmus/org-prettify-src t t))


;; Last up¬≠dated: 2019-06-09
#+end_src
#+end_details

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'rasmus/org-prettify-symbols)
(org-mode-restart)
#+END_SRC

His development relies on built-in prettify-symbols-mode, which
disguises strings in a buffer for the sake of readability or
aesthetics.  Following the example in the documentation, ~C-h f
prettify-symbols-mode~, we can quickly approximate his efforts for
~example~ blocks as follows, however a main issue is that source blocks
have busybodied headers which his setup disguises as ‚Äò‚â°‚Äô.
#+begin_src emacs-lisp :tangle yes
(global-prettify-symbols-mode)

(defvar my/prettify-alist nil
  "Musa's personal prettifications.")

(cl-loop for pair in '(;; Example of how pairs like this to beautify org block delimiters
                    ("#+begin_example" . (?‚Ñ∞ (Br . Bl) ?‚áí)) ;; ‚Ñ∞‚áí
                    ("#+end_example"   . ?‚áê)                 ;; ‚áê
                    ;; Actuall beautifications
                    ("<=" . ?‚â§) (">=" . ?‚â•)
                    ("->" . ?‚Üí) ("-->". ?‚ü∂) ;; threading operators
                    ("[ ]" . ?‚ñ°) ("[X]" . ?‚òë) ("[-]" . ?‚óê)) ;; Org checkbox symbols

      do (push pair my/prettify-alist))

(cl-loop for hk in '(text-mode-hook prog-mode-hook org-mode-hook)
      do (add-hook hk (lambda ()
                        (setq prettify-symbols-alist
                              (append my/prettify-alist prettify-symbols-alist)))))
#+end_src

:Did_it_work:
#+begin_example lisp
(<= (+ 1 1) (--> 2))
#+end_example
:End:

See [[http://www.modernemacs.com/post/prettify-mode/][‚ÄúMathematical Notation in Emacs‚Äù]] for how such prettifications can
make verbose (Python) scripts much more readable by employing more
economical disguises.

A nice sanity:
#+BEGIN_SRC emacs-lisp
;; Un-disguise a symbol when cursour is inside it or at the right-edge of it.
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+END_SRC

** Hiding Emphasise Markers, Inlining Images, and LaTeX-as-PNG
:PROPERTIES:
:CUSTOM_ID: Hiding-Emphasise-Markers-Inlining-Images-and-LaTeX-as-PNG
:END:

:yay_it_worked:

$e^x = \sum_{n = 0}^\infty \frac{x^n}{n!}$

~awkward~ or $not$

:end:

Let's make some things prettier than they appear by default.
#+BEGIN_SRC emacs-lisp
;; org-mode math is now highlighted ;-)
(setq org-highlight-latex-and-related '(latex))

;; Extra space between text and underline line
(setq x-underline-at-descent-line t)

;; Hide the *,=,/ markers
(setq org-hide-emphasis-markers t)

;; (setq org-pretty-entities t)
;; to have \alpha, \to and others display as utf8
;; http://orgmode.org/manual/Special-symbols.html
#+END_SRC
Org pretty entities seems rather impressive ---=M-x org-entities-help= to see all
possibilities, or add your own. I'm already using the Agda input method, so I
wont use Org's ---Agda's gives me a tiny menu narrowing possibilities as I type.

--------------------------------------------------------------------------------

Automatically display emphasis markers and links when the cursor is on them.
(c.f. ~fragtog~ below)
#+begin_src emacs-lisp
(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :init (setq org-appear-autoemphasis  t
              org-appear-autolinks nil
              org-appear-autosubmarkers nil))
#+end_src

--------------------------------------------------------------------------------

The following is now disabled (yet again, as of Dec/31/2020) ---it makes my system slower than I'd like.
#+BEGIN_SRC emacs-lisp :tangle no
;; Show inline images when loading a new Org file.
(setq org-startup-with-inline-images t)

;; Whenever a src block is run, redisplay images so they're up-to-date.
;; Very useful when using ‚Äòob-latex-as-png‚Äô, below.
(add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images)

;; Automatically convert LaTeX fragments to inline images.
(setq org-startup-with-latex-preview t)
#+END_SRC

--------------------------------------------------------------------------------

# latex-preview-in-org

Org mode supports inline image previews of LaTeX fragments; e.g., $e^{i \cdot
\pi} - 1 = 0$ or $\substack{ùîπ \\ ‚Üì \\ ùíú}$.  These can be toggled with
kbd:C-c_C-x_C-l.  [[https://github.com/io12/org-fragtog][Org-fragtog]] automates this, so fragment previews are disabled
for editing when your cursor steps onto them, and re-enabled when the cursor
leaves.

 #+BEGIN_SRC emacs-lisp
;; Automatically toggle LaTeX previews when cursour enters/leaves them
(use-package org-fragtog
  :hook (org-mode . org-fragtog-mode))
 #+END_SRC

doc:org-latex-preview, kbd:C-c_C-x_C-l, renders ~$e^{i \pi} + 1 = 0$~ into a
really nice inline image: $e^{i \pi} + 1 = 0$. It also works for LaTeX
environments ---for personal environments, just ~(add-to-list
'org-latex-packages-alist "LaTeX definitions here")~.

#+begin_src emacs-lisp
;; Make previews a bit larger
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

;; I use a lot of Unicode, so let's always include a unicode header.
(maybe-clone "https://armkeh.github.io/unicode-sty/")
(setq org-format-latex-header
      (concat org-format-latex-header
              "\n\\usepackage{\\string~\"/unicode-sty/unicode\"}"))
;;
;; Now this looks nice too!
;; $\substack{ùîπ \\ ‚Üì \\ ùíú}$ and $\mathbb{B}$.

;; Always support unicode upon LaTeX export
;; No need to explicitly import armkeh's unicode-sty in each org file.
(add-to-list 'org-latex-packages-alist
  "\n\\usepackage{\\string~\"/unicode-sty/unicode\"}")
#+end_src

This approach does not work well for forming diagrams; I've tried to make tikzcd
work this way and failed.  Using [[doc:org-babel-execute:latex-as-png][ob-latex-as-png]] as a substitute.
:calc:
#+begin_src emacs-lisp :tangle no
;; \step should be local to \begin{calc}‚ãØ\end{calc}!
(add-to-list 'org-latex-packages-alist
"\\def\\BEGINstep{ \\{ }
\\def\\ENDstep{ \\} }
\\newcommand{\\step}[2][=]{ \\\\ #1 \\;\\; & \\qquad \\color{maroon}{\\BEGINstep \\text{ #2 } \\ENDstep} \\\\ & }
\\newenvironment{calc}{\\begin{align*} & }{\\end{align*}}")

; (pop org-latex-packages-alist)

;; See also org-format-latex-header
#+end_src
:End:

# LaTeX Rendering: Support ‚Äúlatex-as-png‚Äù src blocks, which show LaTeX as PNGs
#    LaTeX-Rendering-Support-latex-as-png-src-blocks-which-show-LaTeX-as-PNGs

 #+BEGIN_SRC emacs-lisp
;; Support ‚Äúlatex-as-png‚Äù src blocks, which show LaTeX as PNGs
(use-package ob-latex-as-png)
 #+END_SRC

--------------------------------------------------------------------------------

Use ~ref:my-stuff~ to refer to an Org entity with ~#+name: my-stuff~; which must
have a ~#+caption: ‚ãØ~ as well. Example entities include tables and source
blocks; as well as figure blocks. For equation blocks, you must use a
~\label{‚ãØ}~ directly.

 #+begin_src emacs-lisp
;; Use the ‚Äú#+name‚Äù the user provides, instead of generating label identifiers.
(setq org-latex-prefer-user-labels t)
 #+end_src

** Show off-screen heading at the top of the window
:PROPERTIES:
:CUSTOM_ID: Show-off-screen-heading-at-the-top-of-the-window
:END:

In case we forgot which heading we're under, let's keep
the current heading stuck at the top of the window.
#+BEGIN_SRC emacs-lisp
 (use-package org-sticky-header
  :hook (org-mode . org-sticky-header-mode)
  :config
  (setq-default
   org-sticky-header-full-path 'full
   ;; Child and parent headings are seperated by a /.
   org-sticky-header-outline-path-separator " / "))
#+END_SRC
* Prose
:PROPERTIES:
:CUSTOM_ID: Prose
:END:

Emacs can be setup with a spellchecker and other expected features of a word processing tool
---however these features apply Emacs-wide since nearly everything is
essentially text (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

- Org-mode is a writer's best friend; it's large enough to deserve its own sections.


** Whitespace
Let's start off by cleaning-up any accidental trailing whitespace and in other
places upon save.
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

See [[http://ergoemacs.org/emacs/whitespace-mode.html][here]] for making whitespace visible; including spaces, tabs, and newlines

** Formatting Text

The following incantation, doc:my/org-mode-format, makes it so that we can
select some text then press kbd:C-c_f (to get a list of possible character
completions) then press the symbol we want our text to be surrounded with.

#+begin_details
#+begin_src emacs-lisp
(local-set-key (kbd "C-c f") #'my/org-mode-format)
(defun my/org-mode-format (&optional text)
"Surround selected region with the given Org emphasises marker.

E.g., if this command is bound to ‚ÄúC-c f‚Äù then the sequence
‚ÄúC-c f b‚Äù would make the currenly selected text be bold.
Likewise, ‚ÄúC-c f *‚Äù would achieve the same goal.

When you press ‚ÄúC-c f‚Äù, a message is shown with a list of
useful single-character completions.

Note: ‚ÄúC-c f ùìç‚Äù, for an unrecognised marker ùìç, just inserts
the character ùìç before and after the selected text."
  (interactive "P") ;; Works on a region
  ; (message "b,* ‚ü®Bold‚ü©; i,/ ‚ü®Italics‚ü©; u,_ ‚ü®Underline‚ü©; c,~ ‚ü®Monotype‚ü©")
  (message "‚ü®Bold b,*‚ü© ‚ü®Italics i,/‚ü© ‚ü®Underline u,_‚ü© ‚ü®Monotype c,~‚ü©")
  (let ((kind (read-char)))
    ;; Map letters to Org formatting symbols
    (setq kind (or (plist-get '(b ?\*   i ?\/   u ?\_   c ?\~)
                              (intern (string kind)))
                   kind))
    (insert-pair text kind kind)))
#+end_src
#+end_details

** Fill-mode ---Word Wrapping
:PROPERTIES:
:CUSTOM_ID: Fill-mode-Word-Wrapping
:END:

In fill mode, when you type past the end of a line, Emacs automatically starts a
new line, cleverly formatting paragraphs. This is a powerful form of ‚Äúword
wrap‚Äù.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80          ;; Let's avoid going over 80 columns
              truncate-lines nil      ;; I never want to scroll horizontally
              indent-tabs-mode nil)   ;; Use spaces instead of tabs
#+END_SRC

Certain variables are sensibly local to a buffer, and so ~setq~ only alters their
value for one buffer. Using ~setq-default~ we change a variable's default value,
in every buffer.

#+BEGIN_SRC emacs-lisp
;; Wrap long lines when editing text
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

;; Do not show the ‚ÄúFill‚Äù indicator in the mode line.
(diminish 'auto-fill-function)
#+END_SRC

We may press ~M-q~ to cleverly redistribute the line breaks within any paragraph,
thereby making it look better. With a prefix argument, it justifies it as well
---i.e., pads extra white space to make the paragraph appear rectangular.

            Note that ~M-o M-s~ centres a line of text ;-) Fun stuff!

Fill-mode is also known as ‚Äúhard word wrapping‚Äù, which has the counterpart
‚Äúsoft word wrapping‚Äù ‚Ä¶

Visual line mode is built-in and provides support for editing by visual lines:
Lines off the screen are visually word wrapped, but logically remain one line.
Moreover =C-a,e,k= operate on visual lines rather than logical lines.
#+begin_src emacs-lisp
;; Bent arrows at the end and start of long lines.
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(diminish 'visual-line-mode)
(global-visual-line-mode 1)
#+end_src
Visual line mode is useful when I have way too many windows open or when
using smaller frames.

** Pretty Lists Markers
:PROPERTIES:
:CUSTOM_ID: Pretty-Lists-Markers
:END:

When writing, it's common to use ~+,-,*~ to enumerate unordered lists
---especially so in Org-mode wherein they denote structured text.  Let's render
them visually as Unicode bullets.

#+begin_src emacs-lisp
;; (x y z) ‚âà (existing-item replacement-item positivity-of-preceding-spaces)
(cl-loop for (x y z) in '(("+" "‚ó¶" *)
                       ("-" "‚Ä¢" *)
                       ("*" "‚ãÜ" +))
      do (font-lock-add-keywords 'org-mode
                                 `((,(format "^ %s\\([%s]\\) " z x)
                                    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) ,y)))))))
#+end_src

** Fix spelling as you type ---thesaurus & dictionary too!
:PROPERTIES:
:CUSTOM_ID: Fix-spelling-as-you-type-thesaurus-dictionary-too
:END:

I would like to check spelling on the fly.
 + ~C-;~ :: Cycle through corrections for word at point.
 + ~M-$~ :: Check and correct spelling of the word at point
 + ~M-x ispell-change-dictionary RET TAB~ :: To see what dictionaries are available.

Install spell-checking application as well as a reliable English
dictionary, [[https://wordnet.princeton.edu/][WordNet]].
   #+begin_src emacs-lisp
(system-packages-ensure "aspell")
(system-packages-ensure "wordnet")
   #+end_src

~flyspell-prog-mode~ enables spell checking for programming by only considering
comments and strings.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :diminish
  :hook ((prog-mode . flyspell-prog-mode)
         ((org-mode text-mode) . flyspell-mode)))
#+END_SRC

Enabling fly-spell for text-mode enables it for org and latex modes since they
derive from text-mode.

Flyspell needs a spell checking tool, which is not included in Emacs.  We
install ~aspell~ spell checker using, say, homebrew via ~brew install aspell~.  Note
that Emacs' ~ispell~ is the interface to such a command line spelling utility.
# See available dictionary via ~aspell dicts~.

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "/usr/local/bin/aspell")
(setq ispell-dictionary "en_GB") ;; set the default dictionary
#+END_SRC

[Disabled] Allow spelling support for CamlCase words like ‚ÄúEmacsIsCool‚Äù.
#+BEGIN_SRC emacs-lisp :tangle no
(setq  ispell-extra-args '("--sug-mode=ultra"
                            "--run-together"
                            "--run-together-limit=5"
                            "--run-together-min=2"))
#+END_SRC

Let us select a correct spelling merely by clicking on a word
---for the rare days I have a mouse.
#+begin_src emacs-lisp
(eval-after-load "flyspell"
  ' (progn
     (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
     (define-key flyspell-mouse-map [mouse-3] #'undefined)))
#+end_src

Colour incorrect works; default is an underline.
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
(custom-set-faces '(flyspell-incorrect ((t (:inverse-video t)))))
#+END_SRC

Finally, save to user dictionary without asking:
#+BEGIN_SRC emacs-lisp
(setq ispell-silently-savep t)
#+END_SRC

Let's keep track of my personal word set by having it be in my version controlled
.emacs directory. [[http://aspell.net/man-html/Format-of-the-Personal-and-Replacement-Dictionaries.html][Note]] that the default location is ~~/.[i|a]spell.DICT~ for
a specified dictionary ~DICT~.
#+BEGIN_SRC emacs-lisp
(setq ispell-personal-dictionary "~/.emacs.d/.aspell.en.pws")
#+END_SRC

Nowadays, I very rarely write non-literate programs, but if I do
I'd like to check spelling only in comments/strings. E.g.,
#+BEGIN_SRC emacs-lisp
(add-hook          'c-mode-hook 'flyspell-prog-mode)
(add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)
#+END_SRC

Use the thesaurus Emacs frontend [[https://github.com/hpdeifel/synosaurus][Synosaurus]] to avoid unwarranted repetition.
#+begin_src emacs-lisp
(use-package synosaurus
  :diminish synosaurus-mode
  :init    (synosaurus-mode)
  :config  (setq synosaurus-choose-method 'popup) ;; 'ido is default.
           (global-set-key (kbd "M-#") 'synosaurus-choose-and-replace))
#+end_src
The thesaurus is powered by the Wordnet ~wn~ tool, which can be invoked without an
internet connection!
#+begin_src emacs-lisp
;; (shell-command "brew cask install xquartz &") ;; Dependency
;; (shell-command "brew install wordnet &")
#+end_src

Let's use Wordnet as a dictionary via the [[https://github.com/gromnitsky/wordnut][wordnut]] package.
#+BEGIN_SRC emacs-lisp
(use-package wordnut
 :bind ("M-!" . wordnut-lookup-current-word))

;; Use M-& for async shell commands.
#+END_SRC
Use ~M-‚Üë,‚Üì~ to navigate dictionary results, and ~wordnut-search~ for a new search.

An alternative to =wordnut= is to use the lightweight ~define-word~ package; which I
think is not ideal since it provides way less information.

:PowerthesaurusCurrentlyNotWorking:
#+BEGIN_SRC emacs-lisp :tangle no
(load "~/dotfiles/.emacs.d/powerthesaurus.el")
(global-set-key (kbd "M-#") 'powerthesaurus-lookup-word-at-point)

;; Website currently down ... https://github.com/SavchenkoValeriy/emacs-powerthesaurus/issues/6
#+END_SRC
:End:
** COMMENT Touch Typing
:PROPERTIES:
:CUSTOM_ID: Touch-Typing
:END:

Use this game to help you learn to spell words that you're having trouble with;
e.g., I have a file ~~/Dropbox/spelling.txt~ with words I have trouble spelling,
which I open then run ~M-x typing-of-emacs~ in order to improve spelling said
words.
#+BEGIN_SRC emacs-lisp :tangle no
;; The Typing Of Emacs, a game.
(use-package typing-of-emacs :defer t
  :quelpa (typing :fetcher wiki :url "https://www.emacswiki.org/emacs/typing.el"))
#+END_SRC

Practice touch typing using [[https://github.com/hagleitn/speed-type][speed-type]].
#+begin_src emacs-lisp
(use-package speed-type :defer t)
#+end_src
Running ~M-x speed-type-region~ on a region of text, or ~M-x speed-type-buffer~ on a
whole buffer, or just ~M-x speed-type-text~ will produce the selected region, buffer,
or random text for practice. The timer begins when the first key is pressed
and stats are shown when the last letter is entered.

Other typing resources include:
+ [[https://www.emacswiki.org/emacs/TypingOfEmacs][Typing of Emacs]] ---an Emacs alternative to speed type, possibly more engaging.
+ [[https://alternativeto.net/software/klavaro/][Klavaro]] ---a GUI based yet language-independent typing tutor.
  - I'm enjoying this tool in getting started with Arabic typing.
+ [[https://typing.io/][Typing.io]] is a tutor for coders: Lessons are based on open source code, such
  some XMonad written in Haskell or Linux written in C.
+ [[https://www.gnu.org/software/gtypist/index.html#downloading][GNU Typist]] ---which is interactive in the terminal, so not ideal in Emacs--,

To assist in language learning, it may be nice to have an Emacs
[[https://github.com/atykhonov/google-translate][interface]] to Google translate ---e.g., invoke ~google-translate-at-point~.
#+BEGIN_SRC emacs-lisp
(use-package google-translate
 :defer t
 :config
   (global-set-key "\C-ct" 'google-translate-at-point))
#+END_SRC

Select the following then ~C-c t~,
#+begin_quote
Hey buddy, what're you up to?
#+end_quote
Then /detect language/ then /Arabic/ to obtain:
#+begin_quote
ŸÖÿ±ÿ≠ÿ®ÿßŸã Ÿäÿß ÿµÿØŸäŸÇŸä ÿå ŸÖÿßÿ∞ÿß ÿ™ŸÅÿπŸÑÿü
#+end_quote
Neato üò≤

** Using a Grammar & Style Checker
:PROPERTIES:
:CUSTOM_ID: Using-a-Grammar-Style-Checker
:END:

Let's install [[https://github.com/mhayashi1120/Emacs-langtool][a grammar and style checker]].
We get the offline tool from the bottom of the [[https://languagetool.org/][LanguageTool]] website, then relocate it
as follows.
#+BEGIN_SRC emacs-lisp
(use-package langtool
 :defer t
 :custom
  (langtool-language-tool-jar
   "~/Applications/LanguageTool-4.5/languagetool-commandline.jar"))
#+END_SRC

Now we can run ~langtool-check~ on the subsequent grammatically incorrect
text ---which is from the LanguageTool website--- which colours errors in red,
when we click on them we get the reason why; then we may invoke
~langtool-correct-buffer~ to quickly use the suggestions to fix each correction,
and finally invoke ~langtool-check-done~ to stop any remaining red colouring.

#+begin_example org
LanguageTool offers spell and grammar checking. Just paste your text here
and click the 'Check Text' button. Click the colored phrases for details
on potential errors. or use this text too see an few of of the problems
that LanguageTool can detecd. What do you thinks of grammar checkers?
Please not that they are not perfect. Style issues get a blue marker:
It's 5 P.M. in the afternoon. The weather was nice on Thursday, 27 June 2017
--uh oh, that's the wrong date ;-)
#+end_example

By looking around the source code, I can do all three stages smoothly (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà
#+BEGIN_SRC emacs-lisp
;; Quickly check, correct, then clean up /region/ with M-^
(eval-after-load 'langtool
(progn
(add-hook 'langtool-error-exists-hook
  (lambda ()
     (langtool-correct-buffer)
     (langtool-check-done)))

(global-set-key "\M-^"
                (lambda ()
                  (interactive)
                  (message "Grammar checking begun ...")
                  (langtool-check)))))
#+END_SRC

The checking command is silent, we added a bit of comforting acknowledgement to the user.

** Lightweight Prose Proofchecking
:PROPERTIES:
:CUSTOM_ID: Lightweight-Prose-Proofchecking
:END:

Let's [[https://github.com/bnbeckwith/writegood-mode][write good]]!

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  ;; Load this whenver I'm composing prose.
  :hook (text-mode org-mode)
  ;; Don't show me the ‚ÄúWg‚Äù marker in the mode line
  :diminish
  ;; Some additional weasel words.
  :config
  (--map (push it writegood-weasel-words)
         '("some" "simple" "simply" "easy" "often" "easily" "probably"
           "clearly"               ;; Is the premise undeniably true?
           "experience shows"      ;; Whose? What kind? How does it do so?
           "may have"              ;; It may also have not!
           "it turns out that")))  ;; How does it turn out so?
           ;; ‚ÜØ What is the evidence of highighted phrase? ‚ÜØ
#+END_SRC

Inspired by Matt Might's [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][3 shell scripts to improve your writing, or
"My Ph.D. advisor rewrote himself in bash"]], this Emacs interface
emphasises, via underline, the following weaknesses in writing ---so
that I can fix them or decide that they are appropriate for the
scenario.

Sentences that cut out the following problems may become stronger
---by being more terse or precise.

+ Weasel Words ::
  Phrases that sound good without conveying information;
  such as vague precision or subjective phrases.

  E.g., /a number of, surprisingly, very close/.

  It's okay not to have exact details, but rather than ‚ÄúI don't know‚Äù
  explain why not and what the next steps will be.

+ Passive Voice ::
  Phrases wherein interest is in the object experiencing an action,
  rather than the subject that performs the action.

  - Bad: The house /was built by/ my father.
  - Good: My father /built/ this house.

  Likewise, including relevant or explanatory information as in ‚ÄúX
  guarantees Y‚Äù is an improvement over ‚ÄúY is guaranteed‚Äù.

  Sometimes the subject really is irrelevant, such as
  ‚ÄúWe did X‚Äù whereas ‚ÄúX happened‚Äù suffices.

  üëç If the relevant subject is unclear and, also, the text reads
  better in the active, then change a phrase.

+ Duplicated Words :: Occurrences of, say, ‚Äúthe the‚Äù.

   Harder to catch manually, but easier mechanically ;-)

** Placeholder Text ---For Learning & Experimenting
:PROPERTIES:
:CUSTOM_ID: Placeholder-Text-For-Learning-Experimenting
:END:

When learning about Emacs formatting commands, such as zap-to-char ~M-z~
or transpose ~M-t~, it's best to have filler text ---even better when
it's automatically generated instead of typing it out ourselves. The
following will give us a series of commands ~lorem-ipsum-insert-‚ãØ~ for
inserting lists, sentences, paragraphs and using a prefix argument,
with ~C-u~, we can request to generate any number of them.

#+BEGIN_SRC emacs-lisp
(use-package lorem-ipsum :defer t)
#+END_SRC

‚ÄòLorem‚Äô is not a word itself, but it comes from the Latin ‚ÄòDolorem Ipsum‚Äô
which means ‚Äúpain in and of itself‚Äù.

See this [[https://github.com/alhassy/emacs.d/blob/master/CheatSheet.pdf][Emacs Cheat Sheet]] to try out the textual navigation and formatting
bindings on lorem ipsum, gibberish text.

** Some text to make us smile
:PROPERTIES:
:CUSTOM_ID: Some-text-to-make-us-smile
:END:

The  [[https://github.com/davep/dad-joke.el][dad-joke]] queries [[https://icanhazdadjoke.com][https://icanhazdadjoke.com]] to bring us some funny.
#+begin_src emacs-lisp
(use-package dad-joke
  :defer t
  :config (defun dad-joke () (interactive) (insert (dad-joke-get))))
#+end_src

For example, ~M-x dad-joke~ now inserts:
#+begin_quote org
What are the strongest days of the week? Saturday and Sunday...the rest are
weekdays.
#+end_quote

** Unicode Input via Agda Input
:PROPERTIES:
:CUSTOM_ID: Unicode-Input-via-Agda-Input
:END:
:agda2-include-dirs-Issue:
#+BEGIN_SRC emacs-lisp
; (load (shell-command-to-string "agda-mode locate"))
;;
;; Seeing: One way to avoid seeing this warning is to make sure that agda2-include-dirs is not bound.
; (makunbound 'agda2-include-dirs)
#+END_SRC
:End:

[[https://mazzo.li/posts/AgdaSort.html][Agda]] is one of my favourite languages, it's like Haskell on steroids.  Let's set
it up for the main sake of its Unicode input ---you may do likewise using TeX
input.  ( [[https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/][The Absolute Minimum Every Software Developer Absolutely, Positively
Must Know About Unicode and Character Sets (No Excuses!)]] )

#+begin_src emacs-lisp
(system-packages-ensure "agda")
#+end_src

#+begin_details To use the Agda standard library by default
 #+BEGIN_SRC shell :tangle no
   mkdir -p ~/.agda
   echo /usr/local/lib/agda/standard-library.agda-lib >>~/.agda/libraries
   echo standard-library >>~/.agda/defaults
 #+END_SRC
 Invoke ~brew info agda~ to get these instructions and the version of Agda just
    installed.
#+end_details

#+begin_details Get font support for subscripts, if need be
    - Download and unzip the [[https://fontlibrary.org/en/font/symbola][symbola]] font
    - kbd:CMD_+_SPC ‚áí =font book= ‚áí =+= ‚áí select the symbola directory you just
      unzipped

    (Note: In the before time, you could brew install this font.)
#+end_details

Executing ~agda-mode setup~ appends the following text to the ~.emacs~ file.
Let's put it here ourselves.
#+begin_src emacs-lisp
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "/usr/local/bin/agda-mode locate")))
#+end_src

I almost always want the ~agda-mode~ input method ---it's like the TeX method, but
better.
#+BEGIN_SRC emacs-lisp :tangle yes
;; MA: This results in "Package cl is deprecated" !?
(use-package agda-input
  :ensure nil ;; I have it locally.
  :demand t
  :hook ((text-mode prog-mode) . (lambda () (set-input-method "Agda")))
  :custom (default-input-method "Agda"))
  ;; Now C-\ or M-x toggle-input-method turn it on and offers
#+END_SRC

:agda_Command_line_arguments:
    "+RTS   -H4.5G   -M4.5G   -K256M   -S/tmp/AgdaRTS.log   -A1G   -RTS   -i   ."

Wolfram Kahl has recommended the following settings.

#+begin_src emacs-lisp
;;(setq agda2-program-args (quote ("RTS" "-M4G" "-H4G" "-A128M" "-RTS")))
#+end_src

These arguments specify
| ~+RTS~, ~-RTS~ | Flags between these are arguments to the ~ghc~ runtime |
| ~-M[size]~   | Maximum heap size                                    |
| ~-H[size]~   | Suggested heap size                                  |
| ~-A[size]~   | Allocation area size used by the garbage collector   |

Full documentation for the ~ghc~ runtime argumentscan be found [[https://downloads.haskell.org/~ghc/7.8.4/docs/html/users_guide/runtime-control.html][here]].

Additional arguments that may be useful include
| ~-S[file]~ | Produces information about ‚Äúeach and every garbage collection‚Äù |
|          | - Outputs to ~stderr~ by default                               |

:end:

#+begin_quote
Unicode doesn't intend to cover things that are achievable with markup, so only
a limited subset of the alphabet is available as subscript; but all is available
as superscript, except ‚Äòq‚Äô.

‚Çê‚Çë‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çö·µ£‚Çõ‚Çú·µ§·µ•‚Çì
‚Å∞ ¬π ¬≤ ¬≥ ‚Å¥ ‚Åµ ‚Å∂ ‚Å∑ ‚Å∏ ‚Åπ ‚Å∫ ‚Åª ‚Åº ‚ÅΩ ‚Åæ ‚ÇÄ ‚ÇÅ ‚ÇÇ ‚ÇÉ ‚ÇÑ ‚ÇÖ ‚ÇÜ ‚Çá ‚Çà ‚Çâ ‚Çä ‚Çã ‚Çå ‚Çç ‚Çé
·µÉ ·µá ·∂ú ·µà ·µâ ·∂† ·µç  ∞ ‚Å±  ≤ ·µè À° ·µê ‚Åø ·µí ·µñ  ≥ À¢ ·µó ·µò ·µõ  ∑ À£  ∏ ·∂ª
·¥¨ ·¥Æ ·¥∞ ·¥± ·¥≥ ·¥¥ ·¥µ ·¥∂ ·¥∑ ·¥∏ ·¥π ·¥∫ ·¥º ·¥æ ·¥ø ·µÄ ·µÅ ‚±Ω ·µÇ
·µÖ ·µù ·µû ·µü ·µã ·∂ø ·∂• ·∂≤ ·µ† ·µ° ·µ¶ ·µß ·µ® ·µ© ·µ™

~brew cask install font-symbola~
‚áí Includes fonts for subscripts; e.g., ‚Çê‚Çô‚Çë‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çö‚Çú‚Çõ
#+end_quote

Below are my personal Agda input symbol translations;
e.g., ~\set ‚Üí ùíÆ‚ÑØùìâ~. Note that we could give a symbol new Agda TeX binding
interactively: ~M-x customize-variable agda-input-user-translations~ then
~INS~ then for key sequence type ~set~ then ~INS~ and for string paste ~ùíÆ‚ÑØùìâ~.
#+BEGIN_SRC emacs-lisp  :tangle yes
(add-to-list 'agda-input-user-translations '("set" "ùíÆ‚ÑØùìâ"))
#+END_SRC
Better yet, as a loop:
#+BEGIN_SRC emacs-lisp :tangle yes
(cl-loop for item
      in '(;; Arabic ornate parenthesis U+FD3E / U+FD3F
          ("(" "Ô¥æ")
          (")" "Ô¥ø")
          ("cmd" "‚åò")
           ;; categorial ;;
           ("alg" "ùíúùìÅ‚Ñä")
           ("split" "‚ñµ")
           ("join" "‚ñø")
           ("adj" "‚ä£")
           (";;" "Ôπî")
           (";;" "‚®æ")
           (";;" "‚àò")
           ;; logic
           ("if" "‚áê")
           ("onlyif" "‚áí")
           ;; lattices ;;
           ("meet" "‚äì")
           ("join" "‚äî")
           ;; tortoise brackets, infix relations
           ("((" "„Äî")
           ("))" "„Äï")
           ;; residuals
           ("syq"  "‚ï≥")
           ("over" "‚ï±")
           ("under" "‚ï≤")
           ;; Z-quantification range notation ;;
           ;; e.g., ‚Äú‚àÄ x ‚ùô R ‚Ä¢ P‚Äù ;;
           ("|"    "‚ùô")
           ("with" "‚ùô")
           ;; Z relational operators
           ("domainrestriction" "‚óÅ")
           ("domr" "‚óÅ")
           ("domainantirestriction" "‚©§")
           ("doma" "‚©§")
           ("rangerestriction" "‚ñ∑")
           ("ranr" "‚ñ∑")
           ("rangeantirestriction" "‚©•")
           ("rana" "‚©•")
           ;; adjunction isomorphism pair ;;
           ("floor"  "‚åä‚åã")
           ("lower"  "‚åä‚åã")
           ("lad"    "‚åä‚åã")
           ("ceil"   "‚åà‚åâ")
           ("raise"  "‚åà‚åâ")
           ("rad"    "‚åà‚åâ")
           ;; Arrows
           ("<=" "‚áê")
        ;; more (key value) pairs here
        )
      do (add-to-list 'agda-input-user-translations item))
#+END_SRC
Also some silly stuff:
#+begin_src emacs-lisp  :tangle yes
;; Add to the list of translations using ‚Äúemot‚Äù and the given, more specfic, name.
;; Whence, \emot shows all possible emotions.
(cl-loop for emot
      in `(;; angry, cry, why-you-no
           ("whyme" "·Éö(‡≤†Áõä‡≤†)·Éö" "„ÉΩ‡ºº‡≤¢_‡≤¢‡ºΩÔæâ‚òÇ" "—â(„Çú„É≠„Çú—â)" "‚ÄøÔ∏µ(‡≤•Ôπè‡≤•)‚ÄøÔ∏µ" "ÔΩ•Ôæü(*‚ù¶œâ‚ù¶)*ÔΩ•Ôæü")
           ;; confused, disapprove, dead, shrug
           ("what" "„Äå(¬∞„Éò¬∞)" "(‡≤†_‡≤†)" "(‚úñ‚ï≠‚ïÆ‚úñ)" "¬Ø\\_(„ÉÑ)_/¬Ø" "ÔΩ•‚úß_‚úßÔΩ•")
           ;; dance, csi
           ("cool" "‚îè(-_-)‚îì‚îè(-_-)‚îõ‚îó(-_-Ôªø )‚îì"
            ,(s-collapse-whitespace "‚Ä¢_‚Ä¢)
                                      ( ‚Ä¢_‚Ä¢)>‚åê‚ñ†-‚ñ†
                                      (‚åê‚ñ†_‚ñ†)"))
           ;; love, pleased, success, yesss
           ("smile" "‚ô•‚Äø‚ô•" "(‚îÄ‚Äø‚Äø‚îÄ)" "(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà" "(‡∏á‡≤†_‡≤†)‡∏á" "·¥µ‚Äô·µê ·µá·µâ·µÉ·µò·µó‚Å±·∂†·µòÀ°"))
      do
      (add-to-list 'agda-input-user-translations emot)
      (add-to-list 'agda-input-user-translations (cons "emot" (cdr emot))))
#+end_src

# If you change this setting manually, without using the
# customization buffer, you need to call (agda-input-setup) in
# order for the change to take effect.
Finally let's effect such translations.
#+begin_src emacs-lisp  :tangle yes
;; activate translations
(agda-input-setup)
#+end_src

Note that the effect of [[http://ergoemacs.org/emacs/emacs_n_unicode.html][Emacs unicode input]] could be approximated using
~abbrev-mode~.

:May_need_to_install_stix_font:
;; install STIX font from Ubuntu store!!
;; (set-fontset-font t 'unicode (font-spec :name "STIX") nil 'append)
:End:

** Increase/decrease text size
:PROPERTIES:
:CUSTOM_ID: Increase-decrease-text-size
:END:
The ‚Äòusual‚Äô text zoom keys ~C-¬±~ ‚Ä¶
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+END_SRC

If thou knowst the ELisp, forgive this shadowing of the ~negative-argument~
‚Ä¶ we've still got ~M--~ though.

Curious, this is one of the very first things I did when
began using Emacs; yet, perhaps I would not have done
it if I was simply told the defaults:
+ ~C-x C-=,+~ increases text size
+ ~C-x C--~ decreases test size
+ ~C-x C-0~ restores it to the default size

So, the above snippet seems to save us of the prefix
~C-x~ and we lose on using ‚Äò=‚Äô for text increase and worse we
need the shift-key to get access to the ‚Äò+‚Äô.

I suppose this is just a habit inherited from using other tools. Fortunately, I
did not inherit the need for the /common user access/ bindings ~C-x~ kill, ~C-c~ copy,
~C-v~ paste, nor ~C-z~ undo of other applications. If you're interested, ~M-x
cua-mode~ to enable [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA Bindings]].

** Moving Text Around
:PROPERTIES:
:CUSTOM_ID: Moving-Text-Around
:END:

This extends Org-mode's ~M-‚Üë,‚Üì~ to other modes, such as when coding.
#+BEGIN_SRC emacs-lisp
;; M-‚Üë,‚Üì moves line, or marked region; prefix is how many lines.
(use-package move-text
  :config (move-text-default-bindings))
#+END_SRC

** Enabling CamelCase Aware Editing Operations
:PROPERTIES:
:CUSTOM_ID: Enabling-CamelCase-Aware-Editing-Operations
:END:

[[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Subword-Movement.html][Subword]] movement lets us treat ‚ÄúEmacsIsAwesome‚Äù as three words
‚îÄ‚ÄúEmacs‚Äù, ‚ÄúIs‚Äù, and ‚ÄúAwesome‚Äù‚îÄ which is desirable since such naming
is common among coders. Now, for example, ~M-f~ moves along each subword.

#+begin_src emacs-lisp
(global-subword-mode 1)
(diminish 'subword-mode)
#+end_src

** COMMENT Mouse Editing Support
:PROPERTIES:
:CUSTOM_ID: Mouse-Editing-Support
:END:

# :Strange:This_Seems_To_Require_Deprecated_CL:Message_show_at_startup:

Text selected with the mouse is automatically copied to clipboard.
#+begin_src emacs-lisp
(setq mouse-drag-copy-region t)
#+end_src

** Delete Selection Mode
:PROPERTIES:
:CUSTOM_ID: Delete-Selection-Mode
:END:

Delete Selection mode lets you treat an Emacs region much like a typical text
selection outside of Emacs: You can replace the active region.  We can delete
selected text just by hitting the backspace key.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
** ¬† ~M-n,p~: Word-at-Point Navigation
:PROPERTIES:
:CUSTOM_ID: M-n-p-Word-at-Point-Navigation
:END:

Let's mimic the ~C-n,p~ constructs from line to word, so that unoccupied ~M-n,p~ now
serve to take us to the next or previous instance of the word under the
cursor. This is less intrusive than searching ~C-s~ or listing all occurrences ~M-s
o~.
#+BEGIN_SRC emacs-lisp
(use-package smartscan
  :defer t
  :config
    (global-set-key (kbd "M-n") 'smartscan-symbol-go-forward)
    (global-set-key (kbd "M-p") 'smartscan-symbol-go-backward)
    (global-set-key (kbd "M-'") 'my/symbol-replace))
#+END_SRC

Unfortunately, as it currently is, there is no universal argument support:
~C-u 2 M-p~ does /not/ take you to the second previous instance of a word
---the prefix is instead ignored.

The default symbol replacement is [[https://github.com/mickeynp/smart-scan/issues/23][over-zealous]] in that it replaces sub-terms
occurring as parts of larger words. Let's do something about that.
#+BEGIN_SRC emacs-lisp
(defun my/symbol-replace (replacement)
  "Replace all standalone symbols in the buffer matching the one at point."
  (interactive  (list (read-from-minibuffer "Replacement for thing at point: " nil)))
  (save-excursion
    (let ((symbol (or (thing-at-point 'symbol) (error "No symbol at point!"))))
      (beginning-of-buffer)
      ;; (query-replace-regexp symbol replacement)
      (replace-regexp (format "\\b%s\\b" (regexp-quote symbol)) replacement))))
#+END_SRC
Also ‚Ä¶
#+BEGIN_SRC emacs-lisp
;; C-n, next line, inserts newlines when at the end of the buffer
(setq next-line-add-newlines t)
#+END_SRC
** Letter-based Navigation
:PROPERTIES:
:CUSTOM_ID: Letter-based-Navigation
:END:
At a glance of possible positions, across windows,
and a key to jump there is a feature provided to us by [[https://github.com/winterTTr/ace-jump-mode/wiki/AceJump-FAQ][ace-jump]]
---here is an [[https://www.youtube.com/watch?feature=player_embedded&v=UZkpmegySnc#!][emacs-rocks 2-minute video]].

For example, =C-c SPC m= greys our all windows and places a red
letter at the start of any word that begins with /m/, then I may
press a letter to jump to the associated position in the
associated window. Using ~C-u C-c SPC~ and ~C-u C-u C-c SPC~ let
me jump to any character or to any visible line.

‚û© Super simple use case: Fix your eyes on an occurence of a word, then ~C-c SPC~
  to quickly jump to it so as to edit the sentence in which it occurs.
  - It's like ~C-s~ but more lightweight.

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :defer t
  :config (bind-key* "C-c SPC" 'ace-jump-mode))

;; See ace-jump issues to configure for use of home row keys.
#+end_src

There is a newer and somewhat more powerful package, [[https://github.com/abo-abo/avy][avy]], which accompishes the
same goal.  It uses a tree style to jumipng: Locations are given two letter
combinations, one presses one letter to jump to a group of text, then another
letter to jump somewhere in that grouping. I prefer ace-jump since it greys
everthing out, whereas avy surrounds jump locations with a box.
Here is an [[https://www.youtube.com/watch?v=zar4GsOBU0g][emacs-doom 6-minute video]] for avy.

There is also [[https://github.com/tam17aki/ace-isearch][ace-isearch]] for bridinging different navgiational methods ---one
begins incremental search, ~s-f~, then according to a pause and length of input,
one of the navgiational methods, such as isearch or avy or helm-swoop, will be
begun.  I'm okay with using ~C-s~ for helm-swoop and ~C-c SPC~ for ace-jump, and
still have ~s-f~ for incremental search, which I hardly use.

*What is bind-keys**?

Major modes provide specfic use and so their bindings always take precedence
over global bindings ---e.g., the major mode binding may do what the global does
but with extra mode-specfic behaviour, such as indentation. Other times, a major
mode's binding simply uses the same key presses with completely unrelated
behaviour.  If we want to avoid having our global keybindings shadowed by a
major mode, we may use the ~bind-key*~ /macro/ of ~use-package~, or the ~bind-keys*~
/macro/ when there are multiple keys; these are macros, not clauses.  ---These
essentially creates a dedicated minor mode behind the scenes, which saves us the
work of [[https://emacs.stackexchange.com/a/358/10352][doing it ourselves]].

|   | ~(bind-keys* (k‚ÇÅ . f‚ÇÅ) ‚Ä¶ (k‚Çô . f‚Çô))~                           |
| ‚âà | These keybindings override all minor modes that use keys =k·µ¢=. |

Of course we can also use it without the asterisk; e.g.:
#+begin_src emacs-lisp
;; C-x o ‚áí Switch to the other window
;; C-x O ‚áí Switch back to the previous window
(bind-key "C-x O" (lambda () (interactive) (other-window -1)))
#+end_src

** ¬† =C-c e n,p=: Taking a tour of one's edits
:PROPERTIES:
:CUSTOM_ID: C-c-e-n-p-Taking-a-tour-of-one's-edits
:END:
This package allows us to move around the edit points of a buffer /without/
actually undoing anything. We even obtain a brief description of what happend at
each edit point.  This seems useful for when I get interrupted or lose my train
of thought: Just press [[kbd:C-c e p]] to see what I did recently and where ---the
‚Äúe‚Äù is for ‚Äúe‚Äùdit.

#+BEGIN_SRC emacs-lisp
;; Give me a description of the change made at a particular stop.
(use-package goto-chg
  :defer t
  :custom (glc-default-span 0))

(my/pretty-defhydra "C-c e" "Look at them edits!"
  :\  ("p" goto-last-change "Goto n·µó ∞ last change")
      ("n" goto-last-change-reverse "Goto more recent change"))
#+END_SRC

Compare this with ~C-x u~, or ~undo-tree-visualise~, wherein undos are actually performed.

Notice, as a hydra, I can use ~C-c e~ followed by any combination of ~p~ and ~n~ to
navigate my recent edits /without/ having to supply the prefix each time.

* LaTeX ‚áê Org-Mode
:PROPERTIES:
:CUSTOM_ID: Org-Mode-PDF-HTML
:END:

In this section we consider the Org-mode export for PDFs (LaTeX).
For example, we account for LaTeX citations.

** Get LaTeX:
:PROPERTIES:
:CUSTOM_ID: Get-LaTeX
:END:

# +begin_src shell
# time brew cask install mactex-no-gui
# +end_src

#+begin_src emacs-lisp
(system-packages-ensure "mactex-no-gui")
#+end_src

   - This is a redistribution of TeX Live specifically for macOS.
   - We get the 4GB version since it has [[https://tex.stackexchange.com/a/1041/69371][everything]] and so
     do not need to worry about missing style files.
   - This took about 12 minutes on my machine.

   Restart Emacs, enter =$e^{i \cdot \pi} + 1 = 0$= then press kbd:C-c_C-x_C-l to
   have it rendered inline.

   + *Minted:* Get tool for colourful code snippets for LaTeX ---see ‚Äúminted‚Äù in
     the main article.

     #+begin_src emacs-lisp
(system-packages-ensure "pygments")
#+end_src

   + *Not anymore:* Get a neato PDF presentation console: =brew install pdfpc=
     - With =pdfpc myfile.pdf= you get a nice timer and multiple views
       of the current slide and upcoming slides ---with support for multiple monitors.
     - Install ScreenBrush, from the Apple Store, for easily drawing/annotating my
       screen ---e.g., when I'm giving a virtual lecture to my students.
     - An alternative is =brew install mupdf= then =mupdf-gl myfile.pdf= and press
       =f= for fullscreen then =a= for adding/adorning drawings ---it was too
       rough to use live.

     Finally, within Emacs: =M-x pdf-tools-install=

:Possibly_breaking_toc-org:
#+BEGIN_SRC emacs-lisp :tangle no
;; Use 3 headlines of export, which is the default
;; (setq org-export-headline-levels 4)

;; no numbers by default at export
;; (setq org-export-with-section-numbers nil)
#+END_SRC
:End:
** Working with Citations
:PROPERTIES:
:CUSTOM_ID: Working-with-Citations
:END:

 [[https://github.com/jkitchin/org-ref][An exquisite system]] for handling references.

 The following entity will display useful data
 when the mouse hovers over it (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà If you click on it, then you're
 in for a lot of super neat stuff, such as searching for the pdf online!

cite:agda_overview ( In HTML export, the citation doesn't link anywhere. )

    #+BEGIN_SRC emacs-lisp
(use-package org-ref
  :custom ;; Files to look at when no ‚Äú‚ï≤bibliography{‚ãØ}‚Äù is not present in a file.
          ;; Most useful for non-LaTeX files.
        (reftex-default-bibliography '("~/thesis-proposal/papers/References.bib"))
        (bibtex-completion-bibliography (car reftex-default-bibliography))
        (org-ref-default-bibliography reftex-default-bibliography))

;; Quick BibTeX references, sometimes.
(use-package helm-bibtex)
(use-package biblio)
#+END_SRC

  Execute ~M-x helm-bibtex~ or =C-c ]= and, say, enter =emacs= and you will be
  presented with all the entries in the bib database that mention ‚Äòemacs‚Äô. Super
  cool stuff. Moreover, if no such entries exist, then we can look some up
  using the interface!

  Read the manual [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][online]] or better yet as an org-file with ~M-x org-ref-help~.

  This is an Org-mode application since the citations have tooltips and export
  nicely to LaTeX & HTML via the Org-mode exporter.

** Bibliography & Coloured LaTeX using Minted
:PROPERTIES:
:CUSTOM_ID: Bibliography-Coloured-LaTeX-using-Minted
:END:

Execute the following for bibliography references as well as minted Org-mode
uses the Minted package for source code highlighting in PDF/LaTeX ---which in
turn requires the pygmentize system tool.
#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -output-directory %o %f"
        "biber %b"
        "pdflatex -shell-escape -output-directory %o %f"
        "pdflatex -shell-escape -output-directory %o %f"))
#+END_SRC

For faster pdf generation, possibly with errors, consider invoking:
#+begin_example emacs-lisp
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_example

By default, Org exports LaTeX using the ~nonstopmode~ option, which tries
its best to produce a PDF ---which ignores typesetting errors altogether,
which is not necessary ideal when using LaTeX.

** COMMENT Excellent PDF Viewer
:PROPERTIES:
:CUSTOM_ID: Excellent-PDF-Viewer
:END:


Need to (re)build the epdfinfo program, do it now ? (y or n) n

--------------------------------------------------------------------------------

Let's install the [[https://github.com/politza/pdf-tools][pdf-tools]] library for viewing PDFs in Emacs.
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  ; :init   (system-packages-ensure "pdf-tools")
  :custom (pdf-tools-handle-upgrades nil)
          (pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  :config (pdf-tools-install))

;; Now PDFs opened in Emacs are in pdfview-mode.
#+END_SRC

Besides the expected PDF viewing utilities, such as search, annotation, and continuous scrolling;
with a simple mouse right-click, we can even select a ‚Äòmidnight‚Äô rendering mode which may be
easier on the eyes. For more, see the brief [[https://www.dailymotion.com/video/x2bc1is][pdf-tools-tourdeforce]] demo.
* HTML ‚áê Org-mode
:PROPERTIES:
:CUSTOM_ID: HTML-Org-mode
:END:

In this section we consider the Org-mode exporters for PDFs and
HTMLs. For example, we account for LaTeX citations and reliable HTML
anchors.

#+BEGIN_SRC emacs-lisp
(use-package htmlize :defer t)
;; Main use: Org produced htmls are coloured.
;; Can be used to export a file into a coloured html.
#+END_SRC

** Ensuring Useful HTML Anchors
:PROPERTIES:
:CUSTOM_ID: Ensuring-Useful-HTML-Anchors
:END:

Upon HTML export, each tree heading is assigned an ID to be used for hyperlinks.
Default IDs are something like ~org1957a9d~, which does not endure the test of time:
Re-export will produce a different id. Here's a rough snippet to generate
IDs from headings, by replacing spaces with hyphens, for headings without IDs.

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my/ensure-headline-ids (&rest _)
  "Org trees without a

All non-alphanumeric characters are cleverly replaced with ‚Äò-‚Äô.

If multiple trees end-up with the same id property, issue a
message and undo any property insertion thus far.

E.g., ‚ÜØ We'll go on a ‚àÄ‚àÉ‚áÖ adventure
   ‚Ü¶  We'll-go-on-a-adventure
"
  (interactive)
  (let ((ids))
    (org-map-entries
     (lambda ()
       (org-with-point-at (point)
         (let ((id (org-entry-get nil "CUSTOM_ID")))
           (unless id
             (thread-last (nth 4 (org-heading-components))
               (s-replace-regexp "[^[:alnum:]']" "-")
               (s-replace-regexp "-+" "-")
               (s-chop-prefix "-")
               (s-chop-suffix "-")
               (setq id))
             (if (not (member id ids))
                 (push id ids)
               (message-box "Oh no, a repeated id!\n\n\t%s" id)
               (undo)
               (setq quit-flag t))
             (org-entry-put nil "CUSTOM_ID" id))))))))

;; Whenever html & md export happens, ensure we have headline ids.
(advice-add 'org-html-export-to-html   :before 'my/ensure-headline-ids)
(advice-add 'org-md-export-to-markdown :before 'my/ensure-headline-ids)
#+END_SRC

One may then use ~[[#my-custom-id]]~ to link to the entry with ~CUSTOM_ID~
property ~my-custom-id~.

Interestingly, ~org-set-property~, ~C-c C-x p~, lets us insert a property
from a selection of available ones, then we'll be prompted for a value
for it from a list of values you've used elsewhere. This is useful for
remaining consistent for when trees share similar properties.

** Clickable Headlines
:PROPERTIES:
:CUSTOM_ID: Clickable-Headlines
:END:

By default, HTML export generates ID's to headlines so they may be referenced
to, but there is no convenient way to get at them to refer to a particular
heading. The following spell fixes this issue: Headlines are now clickable,
resulting in a link to the headline itself.

#+begin_src emacs-lisp
;; Src: https://writepermission.com/org-blogging-clickable-headlines.html
(setq org-html-format-headline-function
      (lambda (todo todo-type priority text tags info)
        "Format a headline with a link to itself."
        (let* ((headline (get-text-property 0 :parent text))
               (id (or (org-element-property :CUSTOM_ID headline)
                       (ignore-errors (org-export-get-reference headline info))
                       (org-element-property :ID headline)))
               (link (if id
                         (format "<a href=\"#%s\">%s</a>" id text)
                       text)))
          (org-html-format-headline-default-function todo todo-type priority link tags info))))
#+end_src

*Warning:* The header cannot already be a link!  Otherwise you get cyrptic and
unhelpful error =(wrong-type-argument plistp :section-number)=; which then
pollutes the current Emacs session resulting in stange =nil= errors after =C-x C-s=,
thereby forcing a full Emacs restart.  Instead, you need at least one portion of
each heading to be not a link.

1. Need to have a custom id declared.
   #+BEGIN_SRC org :tangle no
  :PROPERTIES:
  :CUSTOM_ID: my-header
  :END:
#+END_SRC
2. Failing headers: =* [[link]]= nor =* ~code~= nor =* $math$=.
   - Any non-link text /before/ it will work:  =ok [[link]]=.
     * Using Unicode non-breaking space ‚Äò¬†‚Äô is ok.
   - Text /only after/ the link is insufficient.
** HTML ‚ÄúFolded Drawers‚Äù
:PROPERTIES:
:CUSTOM_ID: HTML-Folded-Drawers
:END:

#+BEGIN_SRC emacs-lisp
(defun my/org-drawer-format (name contents)
  "Export to HTML the drawers named with prefix ‚Äòfold_‚Äô, ignoring case.

The resulting drawer is a ‚Äòcode-details‚Äô and so appears folded;
the user clicks it to see the information therein.
Henceforth, these are called ‚Äòfold drawers‚Äô.

Drawers without such a prefix may be nonetheless exported if their
body contains ‚Äò:export: t‚Äô ---this switch does not appear in the output.
Thus, we are biased to generally not exporting non-fold drawers.

One may suspend export of fold drawers by having ‚Äò:export: nil‚Äô
in their body definition.

Fold drawers naturally come with a title.
Either it is specfied in the drawer body by ‚Äò:title: ‚ãØ‚Äô,
or otherwise the drawer's name is used with all underscores replaced
by spaces.
"
  (let* ((contents‚Ä≤ (replace-regexp-in-string ":export:.*\n?" "" contents))
         (fold? (s-prefix? "fold_" name 'ignore-case))
         (export? (string-match ":export:\s+t" contents))
         (not-export? (string-match ":export:\s+nil" contents))
         (title‚Ä≤ (and (string-match ":title:\\(.*\\)\n" contents)
                      (match-string 1 contents))))

    ;; Ensure we have a title.
    (unless title‚Ä≤ (setq title‚Ä≤ (s-join " " (cdr (s-split "_" name)))))

    ;; Output
    (cond
     ((and export? (not fold?)) contents‚Ä≤)
     (not-export? nil)
     (fold?
      (thread-last contents‚Ä≤
        (replace-regexp-in-string ":title:.*\n" "")
        (format "<details class=\"code-details\"> <summary> <strong>
            <font face=\"Courier\" size=\"3\" color=\"green\"> %s
            </font> </strong> </summary> %s </details>" title‚Ä≤))))))

(setq org-html-format-drawer-function 'my/org-drawer-format)

#+END_SRC

With the following invocations we only see the odd indexed ‚Äòhello‚Äôs, where the
latter two are folded up.
#+BEGIN_SRC org :tangle no
:this-drawer-is-exported:
:export: t
hello 1
:End:

:this-drawer-is-NOT-exported:
hello 2
:End:

:fold_This_drawer_has_a_title_in_the_body:
:title: I am the drawer title 0

hello 3
:End:

:fold_This_drawer_is_NOT_exported:
:title: Why are we here?
:export: nil

hello 4
:End:

:fold_I_am_the_drawer_title_1:

hello 5
:End:
#+END_SRC

I doubt I could show an example in the Github README, since no HTML export is
happening using my setup. In case you're reading this on my blog, which has
exported HTML. Here's the example:
:fold_hello_world:
:title: ¬°Hola! Buenas tardes, Amigo
Hey bud, hope you're enjoying this read ^_^
:End:

Now that I've written this, I'm thinking it may have been preferably to use an org-block‚Ä¶?

** Diagrams with Mermaid ---Not Reccommended
:PROPERTIES:
:CUSTOM_ID: Diagrams-with-Mermaid-Not-Reccommended
:END:

Let's try out an alternative to PlantUML ---covered below in ¬ß[[Workflow States]].

First, let's get the tool.
#+BEGIN_SRC shell :tangle no
npm install mermaid.cli
sudo git clone git@github.com:arnm/mermaid-layer.git ~/.emacs.d/private/mermaid
#+END_SRC

Then, let's get the associated ~mermaid~ package.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ob-mermaid
  :custom ob-mermaid-cli-path "~/node_modules/.bin/mmdc")
#+END_SRC

Then, =C-c C-c= on the following:
#+BEGIN_SRC mermaid :file test.png :theme neutral :background-color green  :tangle no :results replace :eval never
sequenceDiagram
A-->B: Works!
#+END_SRC

#+RESULTS:
[[file:test.png]]

+ =C-c C-x C-v= ‚áí Show images inline
+ Mermaid supported headers:
  - ~file~ to name the svg/png/pdf output
  - ~width~ or ~height~ or the resulting image
  - ~theme~ used, such as ~default, forest, dark, neutral~, for foreground entities
  - ~background-color~ such as ~transparent, red, #F0F0F0~
    * The transparent option is nice ^_^
+ You can insert new lines using ~<br>~ and horizontal rules via ~<hr>~.
  Similarly you can use other HTML tags such as ~<center>~; if you have too many
  you can make  CSS file then use the header argument ~:css-file~.
+ Add ‚Äúnon-breaking space‚Äù with ~&nbsp;~. This is a forced extra space and it prevents
  a line break at its location. You can insert it repeatedly, but for two spaces
  use ~&ensp;~ and for four spaces use ~&emsp;~.

If link text cuts off prematurely, use extra space /with/ a newline: ~A-- text
&ensp;<br> -->B~.

*Warning*: JavaScript has some issues when working with Unicode and so, being a
JavaScript utility, ~mermaid~ hangs when Unicode is used. On the upside, being a
JavaScript utility, ~mermaid~ entities can have [[https://mermaid-js.github.io/mermaid/#/flowchart?id=interaction][arbitrary code attached]] to them to
be executed upon clicks ---for use in browsers.
- However, the Greek letters are supported; e.g., Œ≥ and Œ£.

See [[https://mermaid-js.github.io/mermaid/#/flowchart?id=nodes-amp-shapes][here]] for possible node shapes.

#+begin_quote
After forming an intricate diagram of related design patterns, I had to use a
number of HTML notions, such as =<i>, <strong>, <em>, <h1>, &ensp;, <br>, <pre>,
<center>= and it was a bit more than I would have liked. In particular, the only
way to change font size was to use the deprecated HTML tag =<big>= or heading tags
like =<h1>=; even worse, the resulting PDF image did not look nice ---I had to
stretch it out.

The command line tool is *lacking functionality* and so the docs are not helpful.
E.g., I cannot produce pie charts using the command line tool.
#+end_quote

** ¬† [[https://revealjs.com/?transition=zoom#/][Reveal.JS]] -- The HTML Presentation Framework
:PROPERTIES:
:CUSTOM_ID: https-revealjs-com-transition-zoom-Reveal-JS-The-HTML-Presentation-Framework
:END:

Org-mode documents can be transformed into beautiful slide decks
with [[https://github.com/yjwen/org-reveal/blob/master/Readme.org][org-reveal]] with the following two simple lines.

#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :custom (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
#+END_SRC
# MA: ??? It looks like ox-reveal is being abandoned in favor of org-re-reveal,
# a fork compatible with org-mode 9.2?

For example, execute, ~C-x C-e~ after the closing parenthesis of, the
following block to see an example slide-deck (‚îÄ‚Äø‚Äø‚îÄ)
#+BEGIN_SRC emacs-lisp :tangle no
(progn (shell-command "curl https://raw.githubusercontent.com/yjwen/org-reveal/696613edef0fe17a9c53146f79933fe7c4101100/Readme.org >> Trying_out_reveal.org")
       (switch-to-buffer (find-file "Trying_out_reveal.org"))
       (org-reveal-export-to-html-and-browse))
#+END_SRC

Org-mode exporting, ~C-c C-e~, now includes an option ~R~ for such reveal slide decks.

:Hide:
[[https://alhassy.github.io/next-700-module-systems/proposal/defence-slides.html#/sec-title-slide][Here]] ([[https://raw.githubusercontent.com/alhassy/next-700-module-systems/master/proposal/defence-slides.org][source]]) is an example of org-reveal slides where I add a number to each page,
use multiple columns, and extend the margins perhaps a bit too much.
:End:

Two dimensional slides may be a bit new to some people, so I like to
give viewers an option, in tiny font, to view the slide-deck
continuously and remind them that ~?~ provides useful shortcuts.
#+BEGIN_SRC emacs-lisp
(setq org-reveal-title-slide "<h1>%t</h1> <h3>%a</h3>
<font size=\"1\">
<a href=\"?print-pdf&showNotes=true\">
‚ü™ Flattened View ; Press <code>?</code> for Help ‚ü´
</a>
</font>")
#+END_SRC
One should remove the ~&showNotes=true~ if they do not want to include
speaker notes in the flattened view.

Within the flatenned view, one may wish to ~CTRL/CMD+P~ then save the
resulting PDF locally.

** Org-mode ‚áê HTML :Disabled:
:PROPERTIES:
:CUSTOM_ID: Org-mode-HTML
:END:

The following let's us copy htlm into org format using eww, Emacs' built-in web browser.
#+BEGIN_SRC emacs-lisp :tangle no
;; See: https://emacs.stackexchange.com/questions/7171/paste-html-into-org-mode
(use-package org-eww
 :quelpa (org-eww :fetcher git :url "https://github.com/Fuco1/org-mode.git"))
#+END_SRC

It does not work as I'd like, but may prove useful to have around.

+ Possibly useful: Open a webpage with ~M-x eww~ then toggle ~M-x read-only-mode~ to
  edit the text, say for notes or deletions, as you read! No need to copy-paste.

--------------------------------------------------------------------------------

[[https://github.com/alphapapa/org-web-tools][org-web-tools]] claims to /view, capture, and archive Web pages in Org-mode/; this
may be a very useful tool.

#+begin_src emacs-lisp
(use-package org-web-tools
  :config
  ;; Insert an Org-mode link to the URL in the clipboard or kill-ring. Downloads
  ;; the page to get the HTML title.
  (bind-key* "C-c C-l" #'org-web-tools-insert-link-for-url))
#+end_src
Other useful functions, needing pandoc:
doc:org-web-tools-insert-web-page-as-entry and
doc:org-web-tools-convert-links-to-page-entries.

* Programming
:PROPERTIES:
:CUSTOM_ID: Programming
:END:

Herein we configure utilites for version control, function and variable lookup,
and template expansion for inescapably repetitive scenarios.

** Project management & navigation

Version controlled repositories are considered ‚Äúprojects‚Äù ---no setup needed---,
but you can declare your own too.

Videos:
+ ~5mins: https://youtu.be/bFS0V_4YfhY
+ ~1hr:  https://www.youtube.com/watch?v=INTu30BHZGk

This is so sweet at work (and possibly at home!): From anywhere,
+ [[kbd:C-x p p]] ‚ü®select your project‚ü© RET ‚ü®start typing to see any file anywhere in the project‚ü©

+ [[kbd:C-x p b ]] ‚áí Switch to buffers only in the current ‚Äústream of thought‚Äù (project).
+ [[kbd:C-x p f ]] ‚áí Find files only in the current ‚Äústream of thought‚Äù (project).
+ [[kbd:C-x p s g ]] ‚áí Search the project using grep; TAB in the resulting buffer to
  open files.
+ [[kbd:C-x p S ]] ‚áí Save all project buffers
+ [[kbd:C-x p k ]] ‚áí Kill all buffers relating to the parent project

+ [[kbd:C-x p & ]] ‚áí Runs an async-shell-command in the project's root directory
+ [[kbd:C-x p x s ]] ‚áí Start or visit a shell for the project
+ [[kbd:C-x p r ]] ‚áí Runs interactive query-replace on all files in the projects
+ [[kbd:C-x p e ]] ‚áí Show a list of recently visited files, in the current project
+ [[kbd:C-x p V ]] ‚áí Open a project that has been modified, but not pushed with version control.

#+begin_src emacs-lisp
;; More info & key bindings: https://docs.projectile.mx/projectile/usage.html
(use-package projectile
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)

  ;; Replace usual find-file with a project-wide version :-)
  (global-set-key (kbd "C-x f") #'projectile-find-file)

  ;; Makes indexing large projects much faster, after first time.
  ;; Since its caching, some files may be out of sync; you can delete the cache
  ;; with: C-u C-x f
  (setq projectile-enable-caching t)

  (define-key projectile-mode-map (kbd "C-x p s")
    ;; I prefer helm-do-grep-ag since it shows me a live search
    (lambda () (interactive)
       (let ((default-directory (car (projectile-get-project-directories (projectile-acquire-root)))))
         ;; (shell-command-to-string "echo $PWD")
         (helm-do-grep-ag nil))))) ;; ‚Äúp‚Äùroject ‚Äús‚Äùearch
#+end_src

** LSP: Making Emacs into a generic full-featured programming IDE

[[https://microsoft.github.io/language-server-protocol/][Language Server Protocol (LSP)]] was created by Microsoft to define a common
standard for providing editor-agnostic code intelligence support. It has become
widely popular since its creation. Emacs support for lsp comes with the [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]]
and the [[https://github.com/joaotavora/eglot][eglot]] (‚ÄòE‚Äômacs poly‚Äòglot‚Äô) packages; let's use the first one since it
comes with all features enabled by default (which increases discoverability).
[ See also: [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][A guide on disabling/enabling lsp-mode features - LSP Mode - LSP support for Emacs]]. ]

Essentially how it works is that LSP defines a bunch of useful requests
---such as code completion, types, etc--- and our editor (Emacs) makes these
requests to a server (a process that knows how to handle them) then we get the
results and show them nicely in our editor (Emacs).

Further reading:
+ [[https://emacs-lsp.github.io/lsp-mode/page/main-features/][Main features - LSP Mode - LSP support for Emacs]] ‚áí Reasons (with gifs) to use
  lsp-mode ;-)
+ [[https://emacsconf.org/2019/talks/19/][How Emacs became my awesome Java editing environment [EmacsConf2019]]]
  is an excellent ~10min video demoing prime features of LSP.
+ [[https://www.toptal.com/javascript/language-server-protocol-tutorial][Using Text Editors for Programming with LSP | Toptal]]
+ [[https://microsoft.github.io//language-server-protocol/overviews/lsp/overview/][LSP overview]]
+ :flame: [[https://emacs-lsp.github.io/lsp-mode/tutorials/reactjs-tutorial/][React JavaScript Tutorial in Emacs - LSP Mode]] - Nice walkthrough on
  setting-up LSP for JavaScript (along with ESlint) and trying it out.

*Super simple setup for lsp-mode*: Install lsp-mode with [[kbd:][M-x package-install
‚ü®return‚ü© lsp-mode]] then open, say, a JavaScript file and press <kbd:M-x lsp>. It
will ask you to download a server, such as ~jsts-ls~ for ‚ÄúJavaScript-TypeScript
Language Server‚Äù. /[You may need to restart Emacs; when you open a file, LSP
needs to know what ‚Äòworkspace‚Äô it belongs to!]/ Now you can, for example, perform
<kbd:s-l g r> to see all references of the name under the cursour, or <kbd:s-l g
d> to go to its definition, or <kbd:s-l g t> to see its type (which already
shows in the mode line).  In your JS file, write the errenous line ~let a == 1;~
then with your cursour on that line you'll see some info to the side about the
error (thanks to doc:lsp-ui-mode) and if you invoke doc:lsp-treemacs-errors-list
then you get a nice hierarchical, ‚ü®tab‚ü©-ful, list of errors.  To find symbol
names, with autocompletion of all names in your workspace, use <kbd:s-l g a>
(thanks to ~helm-lsp~), for the current file doc:lsp-ui-imenu (or more simply,
<kbd:C-c i>) is nice.  As the LSP server runs it can even detect JSON objects
and show their values in the mode line when the cursour is above them; which can
also be requested with <kbd:s-l h h>.  (doc:lsp-describe-thing-at-point).  /That
is all!/

| [[kbd:][s-l g g]] | Find definitions of the symbol under point                         |
| [[kbd:][s-l g r]] | Find references of the symbol under point                          |
| [[kbd:][s-l g t]] | Find type definitions of the symbol under point                    |
| [[kbd:][s-l g a]] | Find all meaningful symbols that match pattern (project wide)      |
| [[kbd:][s-l h h]] | :fire: Display the type signature and documentation of the thing at point |
| [[kbd:][s-l h g]] | Trigger display hover information popup and hide it on next typing |
| [[kbd:][s-l r r]] | Rename the symbol (and all references to it)                       |

#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; Set prefix for lsp commands
  ;; (setq lsp-keymap-prefix "s-l") ;; default
  ;; Set how often highlights, lenses, links, etc will be refreshed while you type
  ;; (setq lsp-idle-delay 0.500) ;; default
  :hook  ;; Every programming mode should enter & start LSP, with which-key support
         (js-mode . lsp-mode) ;; Enter LSP mode
         (js-mode . lsp)      ;; Start LSP server
         (lsp-mode . lsp-enable-which-key-integration)
  ;; For some reason, my usual snippet setup does not work with LSP, so using ‚ÄúC-x y‚Äù
  :bind ("C-x y" . #'yankpad-insert)
  :commands lsp)

;; If a server crashes, restart it without asking me.
(setq lsp-restart 'auto-restart)


;; https://emacs-lsp.github.io/lsp-mode/page/languages/
;; M-x lsp-install-server ‚ü®return‚ü© jsts-ls
;; M-x lsp-install-server ‚ü®return‚ü© json-ls
;; M-x lsp-install-server ‚ü®return‚ü© eslint
;; M-x lsp-install-server ‚ü®return‚ü© css-ls
;; M-x lsp-install-server ‚ü®return‚ü© html-ls

;; lsp-ui for fancy sideline, popup documentation, VScode-like peek UI, etc.
;; https://emacs-lsp.github.io/lsp-ui/#intro
;;
;; You only have to put (use-package lsp-ui) in your config and the package will
;; work out of the box: By default, lsp-mode automatically activates lsp-ui.
(use-package lsp-ui)

;; lsp-treemacs for various tree based UI controls (symbols, errors overview,
;; call hierarchy, etc.)
(use-package lsp-treemacs) ;; https://github.com/emacs-lsp/lsp-treemacs
;; M-x lsp-treemacs-errors-list

;; helm-lsp provides ‚Äúon type completion‚Äù alternative of cross-referencing.
;; https://github.com/emacs-lsp/helm-lsp
(use-package helm-lsp)
(define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
;; Jump to a symbol's definition in the current workspace with ‚Äús-l g a‚Äù or ‚ÄúM-g
;; a‚Äù (The 'a' stands for apropos, which means appropriate nature)

;; Set the amount of data which Emacs reads from a process.
;; Some LSP responses are in the 8k-3MB range.
;; ‚ü¶ 1 megabyte ‚âà 1 million bytes ‚âà 1 000 000 bytes ‚üß
(setq read-process-output-max (* 1024 1024)) ;; ~1mb; [default 4k]
(setq gc-cons-threshold (* 2 8 1000 1024)) ;;; ~16mb; default is: 800 000
;; A large gc-cons-threshold will cause freezing and stuttering during long-term
;; interactive use. This one seems to be a good default.
#+end_src

:flame: If you leave your cursour on a name, all other occurances are
highlighted /and/ you get to see its (type) description in the mode line.

üî• As you begin to type, all variable/function names /loosely/ matching what you
type will be shown, along with their (type) descriptions.

üöÅ If you see an error ~‚ÄúLSP :: Could not connect to ùí≥ server‚Äù~, then run
doc:lsp-doctor and look at the buffer ~ùí≥::stderr~ for hints on what the cause
could have been; [[https://emacs-lsp.github.io/lsp-mode/page/faq/][FAQ]].

The Language Server protocol is used between a tool (the client) and a language
smartness provider (the server) to integrate features like auto complete, go to
definition, find all references and alike into the tool.

LSP, more or less, reduces the linear problem of language-specific-IDE into a
constant problem: Each language implements an LSP program which is then used by
an LSP-enabled editor to provide an IDE experience.

LSP mode supports the following Features:

+ As you type reporting of parsing and compilation errors (via flycheck/lsp-ui)
+ Code completion - using company-mode
+ doc hovers - using lsp-ui
+ Code actions - using lsp-ui
+ Code outline - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][imenu]]
+ Code navigation - using builtin xref
+ Code lens (references/implementations) - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]]
+ Highlights
+ Code formatting
+ Visual debugger - [[https://github.com/emacs-lsp/dap-mode][dap-mode]]
+ Test runner - dap-mode
+ Project explorer integration - treemacs

#+begin_src emacs-lisp
;; Load the various useful utils
(require 'lsp-ui-peek)
(require 'lsp-ui-sideline)
(require 'lsp-ui-doc)
(require 'lsp-ui-imenu)

; (setq lsp-mode-hook nil)
(add-hook 'lsp-mode-hook
          (lambda ()
            ;; Locally delete a file needed for work, but it's outdated and clashes with LSP.
            (shell-command "rm ~/wxPortal/.flowconfig")
            ;; Load the various useful utils
            (require 'lsp-ui)
            (lsp-ui-peek-enable t)
            (lsp-ui-doc-enable t)
            (lsp-ui-sideline-enable t)
            (lsp-ui-imenu-buffer--enable)
            ;; Set ‚åò-l as the main mini-menu for LSP commands
            (bind-key* "s-l" #'my/lsp-hydra/body)))

(defun my/helm-lsp-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'helm-lsp-workspace-symbol)))

  (defun my/helm-lsp-global-workspace-symbol-at-point ()
    (interactive)
    (let ((current-prefix-arg t))
      (call-interactively #'helm-lsp-global-workspace-symbol)))

;; TODO: Add other cool features discussed/loaded above into this hydra!
(defhydra my/lsp-hydra (:color blue :hint nil)
  ;; Xref
  ("d" xref-find-definitions "Definitions" :column "Xref")
  ("D" xref-find-definitions-other-window "-> other win")
  ("r" xref-find-references "References")
  ("s" my/helm-lsp-workspace-symbol-at-point "Helm search")
  ("S" my/helm-lsp-global-workspace-symbol-at-point "Helm global search")

  ;; Peek
  ("C-d" lsp-ui-peek-find-definitions "Definitions" :column "Peek")
  ("C-r" lsp-ui-peek-find-references "References")
  ("C-i" lsp-ui-peek-find-implementation "Implementation")

  ;; LSP
  ("p" lsp-describe-thing-at-point "Describe at point" :column "LSP")
  ("C-a" lsp-execute-code-action "Execute code action")
  ("R" lsp-rename "Rename")
  ("t" lsp-goto-type-definition "Type definition")
  ("i" lsp-goto-implementation "Implementation")
  ("f" helm-imenu "Filter funcs/classes (Helm)")
  ("C-c" lsp-describe-session "Describe session")

  ;; Flycheck
  ("l" lsp-ui-flycheck-list "List errs/warns/notes" :column "Flycheck")

  ;; Misc
  ("q" nil "Cancel" :column "Misc")
  ("b" pop-tag-mark "Back"))
#+end_src
** Which function are we writing?
:PROPERTIES:
:CUSTOM_ID: Which-function-are-we-writing
:END:
In the modeline, show the name of the function we're currently writing.
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'which-function-mode)
(add-hook 'org-mode-hook  #'which-function-mode)
#+END_SRC
In Org-mode, this places the current heading in the modeline.

In Lisp mode, ensure we always have matching parens.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'check-parens)
#+END_SRC

** Highlight defined Lisp symbols
:PROPERTIES:
:CUSTOM_ID: Highlight-defined-Lisp-symbols
:END:

Usually Emacs only highlights macro names, the [[https://github.com/Fanael/highlight-defined][following]] incantation makes it
highlight all defined names ---as long as we're in Lisp mode, whence in org-src
blocks we use ~C-c '~.
#+BEGIN_SRC emacs-lisp
;; Emacs Lisp specific
(use-package highlight-defined
  :hook (emacs-lisp-mode . highlight-defined-mode))
#+END_SRC

Super helpful in making my Emacs configuration: If a name is not highlighted,
then I've misspelled it or it doesn't exist! :smile:

** Eldoc for Lisp and Haskell
:PROPERTIES:
:CUSTOM_ID: Eldoc-for-Lisp-and-Haskell
:END:

In =emacs-lisp-mode= we can enable =eldoc-mode= ---‚ÄúElisp Live Documentation‚Äù--- to
display information about a function or a variable in the echo area. Likewise
for Haskell.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :diminish eldoc-mode
  :hook (emacs-lisp-mode . turn-on-eldoc-mode)
        (lisp-interaction-mode . turn-on-eldoc-mode)
        (haskell-mode . turn-on-haskell-doc-mode)
        (haskell-mode . turn-on-haskell-indent))
#+END_SRC

The less casual Haskeller would likely want to use [[https://haskell-lang.org/intero][intero]] to obtain
more support; e.g., obtain suggestions from GHC about redundant imports
or type signatures.

** Jumping to definitions & references
:PROPERTIES:
:CUSTOM_ID: Jumping-to-definitions-references
:END:

Out-of-the-box Emacs has ‚Äòxref‚Äô utilities ~M-.~ and ~C-u M-.~ to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html#Xref][Find Identifier
References]]; however, tags to source definitions need to be generated using the
=etags= program. Nonetheless, the xref utilites are impressive and some just work:
For example, ~M-?~ cleverly finds /all/ references for an identifier in ‚Äònear by‚Äô
files; whereas ~C-u M-. RET my/.*~, for example, uses the given regular expression
to list all identifiers with prefix ~my/~, thereby listing my personally defined
names ^_^

| =C-M-. ùìáùìÆ‚ÑäùìÆùìç= | Find all identifiers whose name matches the given pattern |

Let's get [[https://github.com/jacktasia/dumb-jump][dumb-jump]], where the ‚Äòdumb‚Äô is possibly due to the fact
that it works by brute-force regular-expression lookup of
pre-defined ‚Äòdefinitional template‚Äô rules. It ‚Äújust works‚Äù ^_^
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g q"     . dumb-jump-quick-look) ;; Show me in a tooltip.
         ("M-g ."     . dumb-jump-go-other-window)
         ("M-g b"     . dumb-jump-back)
         ("M-g p"     . dumb-jump-go-prompt)
         ("M-g a"     . xref-find-apropos)) ;; aka C-M-.
  :config
  ;; If source file is visible, just shift focus to it.
  (setq dumb-jump-use-visible-window t))
#+END_SRC

In Lisp, for binding macros, it lists all possible mentions of the bound
variable ---the first is likely what is desired.  Alternatively, one could just
add the necessary rule to the variable =dumb-jump-find-rules=.  Otherwise, it
works fine even for locally bound definitions.  It works depending on the
extension of a file.
** COMMENT Aggressive Indentation
:PROPERTIES:
:CUSTOM_ID: Aggressive-Indentation
:END:

With a single space or tab, my code should always remain indented.
#+BEGIN_SRC emacs-lisp
;; Always stay indented: Automatically have blocks reindented after every change.
(use-package aggressive-indent
  :config (global-aggressive-indent-mode t))

;; Use 4 spaces in places of tabs when indenting.
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

** Being Generous with Whitespace
:PROPERTIES:
:CUSTOM_ID: Being-Generous-with-Whitespace
:END:
The following minor mode automatically adds spacing around operators.
#+begin_src emacs-lisp
(use-package electric-operator
  :diminish
  :hook (c-mode . electric-operator-mode))
#+end_src

I dislike it when users write ~x=y+1~ ---whitespace is free and helpful.  ‚ü® Also,
languages with arbitrary identifiers, like Lisp and Agda, would accept ~x=y+1~ as
an identifier, not an expression! ‚ü©

** On the fly syntax checking
:PROPERTIES:
:CUSTOM_ID: On-the-fly-syntax-checking
:END:

[[https://www.flycheck.org/en/latest/][Flycheck]] is a on-the-fly syntax checker that relies on external programs to
check buffers; which must be installed separately.

+ E.g., ghc is required for Haskell; whereas Emacs Lisp is checked by Emacs'
    own byte compiler, ~emacs-lisp~.
+ Sometimes more than one checking tool applies, use ~C-c ! s~ to select a
    different checker.
+ =C-c ! n,p,l= takes you to the ‚Äòn‚Äôext or ‚Äòp‚Äôrevious
  error, or ‚Äòl‚Äôist all errors in another buffer.

  ~C-c ! c~ to explicitly recheck the buffer.

#+begin_src emacs-lisp
(use-package flycheck
  :diminish
  :init (global-flycheck-mode)
  :config ;; There may be multiple tools; I have GHC not Stack, so let's avoid that.
  (setq-default flycheck-disabled-checkers '(haskell-stack-ghc emacs-lisp-checkdoc))
  :custom (flycheck-display-errors-delay .3))
#+end_src

In an org-src block, we press ~C-c '~ to get into the language's mode where
flycheck will provide warnings.
#+begin_src haskell :tangle no
module Main where

main :: IO ()
main = putStrLn $ "nice" ++ f 0

f :: Int -> String
f x = x -- show x
-- type error
#+end_src

In-general, flycheck is intended for self-contained raw code ---not for source
blocks in Org-mode. Whence, the above example is a complete Haskell program,
with a named module and ~main~ method.

I think the built-in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Flymake.html][flymake]] syntax checker is better for Emacs Lisp,
so let's use that for ELisp.
#+BEGIN_SRC emacs-lisp
(use-package flymake
  :hook ((emacs-lisp-mode . (lambda () (flycheck-mode -1)))
         (emacs-lisp-mode . flymake-mode))
  :bind (:map flymake-mode-map
              ("C-c ! n" . flymake-goto-next-error)
              ("C-c ! p" . flymake-goto-prev-error)))
#+END_SRC

Try it out:
#+begin_src emacs-lisp :tangle no
(setq 1 2) ;; Error: ‚Äò1‚Äô is not a variable.
#+end_src

** Coding with a Fruit Salad: Semantic Highlighting
:PROPERTIES:
:CUSTOM_ID: Coding-with-a-Fruit-Salad-Semantic-Highlighting
:END:

What should be highlighted when we write code? Static keywords with fixed uses,
or dynamic user-defined names?

+ /Syntax/ highlighting ‚á® Specific words are highlighted in strong colours so that
  the /structure/ can be easily gleaned.
  - Generally this only includes a language's keywords, such as ~if, loop, begin,
    end, cond~.
  - User defined names generally share one colour; usually black.
  - Hence, an ~if~ block may be seen as one coloured keyword followed by
    a blob of black text.

  /Obvious keywords are highlighted while the rest remains in black!/

+ /Semantic/ highlighting ‚á® Identifiers obtain unique colouring.
  - This makes it much easier to visually spot dependencies with a quick glance.
    + One can *see* how data flows through a function.
  - In dynamic languages, this is a visual form of typing: Different colours are
    for different names.
    + Especially helpful for (library) names that are almost the same.
    + This can be accomplished anywhere in Emacs by pressing ~M-s h .~ on
      a selected phrase.

For Emacs, [[https://github.com/ankurdave/color-identifiers-mode][Color Identifiers Mode]] gives unique highlighting to identifiers.
- It comes with support for a bunch of languages, and one can add support for others.
- It picks colours adaptively to fit the theme; one uses ~M-x color-identifiers:regenerate-colors~ after a theme change.

#+begin_src emacs-lisp
(use-package color-identifiers-mode
  :config (global-color-identifiers-mode))

;; Sometimes just invoke: M-x color-identifiers:refresh
#+END_SRC

When writing a new name, after about ~5 seconds it obtains a colour which is then
propagated immediately to any new occurrences. This timeout before recolouring
is to avoid any lag from multithreading and can be changed by altering the following
line (#64) in the source file, changing the ~5~ to a smaller number.
#+BEGIN_SRC emacs-lisp :tangle no
(run-with-idle-timer 5 t 'color-identifiers:refresh)
#+END_SRC

Here are further reads:
  - [[https://medium.com/@evnbr/coding-in-color-3a6db2743a1e][Coding in color: How to make syntax highlighting more useful]] ---an excellent, terse, read
  - [[https://zwabel.wordpress.com/2009/01/08/c-ide-evolution-from-syntax-highlighting-to-semantic-highlighting/][C++ IDE Evolution: From Syntax Highlighting to Semantic Highlighting]]
    + Names with a similar prefix share a colour, and class-local items share a colour.
  - [[https://wordsandbuttons.online/lexical_differential_highlighting_instead_of_syntax_highlighting.html][Lexical differential highlighting instead of syntax highlighting]]
    + /Ideally, the smaller the lexical difference, the greater the color difference should be./
  - [[https://github.com/jacksonrayhamilton/context-coloring][Colouring by Context]] ---an Emacs package
  - [[http://www.linusakesson.net/programming/syntaxhighlighting/][A case against syntax highlighting]]

** Text Folding with Origami-mode
:PROPERTIES:
:CUSTOM_ID: Text-Folding-with-Origami-mode
:END:

#     :Causes_weird_nil_after_save:

Literate programming within Org-mode is not always ideal, so we use a
programming mode directly and then may want to have arbitrary ‚Äòsections‚Äô of text
folded up.  Let's describe how to accomplish this goal.

We use a feature-full folding mode,  [[https://github.com/gregsexton/origami.el][Origami-mode]].
#+BEGIN_SRC emacs-lisp
(use-package origami
  ;; In Lisp languages, by default only function definitions are folded.
  ;; :hook ((agda2-mode lisp-mode c-mode) . origami-mode)

  ;; Please open any code with top level items folded away.
  :hook (prog-mode .  (lambda () (interactive)
                       (origami-close-all-nodes (current-buffer))))
  ;; MA: It seems that this is not ideal; it takes a bit longer than I'd like to fold the whole file.

  :config

  ;; For any major-mode that doesn't have explicit support, origami will use the
  ;; indentation of the buffer to determine folds.
  (global-origami-mode)

  ;; With basic support for one of my languages.
  (push '(agda2-mode . (origami-markers-parser "{-" "-}"))
         origami-parser-alist))
#+END_SRC

With expected support for searching.
#+BEGIN_SRC emacs-lisp
(defun my/search-hook-function ()
  (when origami-mode (origami-open-node-recursively (current-buffer) (point))))

;; Open folded nodes if a search stops there.
(add-hook 'helm-swoop-after-goto-line-action-hook #'my/search-hook-function)
;;
;; Likewise for incremental search, isearch, users.
;; (add-hook 'isearch-mode-end-hook #'my/search-hook-function)
#+END_SRC

Along with a hydra for super quick navigation and easily folding, unfolding
blocks! Love this one ^_^
#+BEGIN_SRC emacs-lisp
(defhydra folding-with-origami-mode (global-map "C-c f")
  ("h" origami-close-node-recursively "Hide")
  ("s" origami-open-node-recursively  "Show")
  ;; ("H" origami-close-all-nodes "Hide All")
  ;; ("S" origami-open-all-nodes "Show All")
  ("t" origami-toggle-all-nodes  "Toggle buffer")
  ("n" origami-next-fold "Next")
  ("p" origami-previous-fold "Previous"))
#+END_SRC

# *Disabled:* I've looked at a few folding modes, and I like this one.
# However, I seldom need it.

#+begin_box "There's a built-in, less featureful, alternative based on indentation!"
Quickly fold-away code with doc:set-selective-display; e.g., <kbd:C-u C-x $>
folds away all code indented 4 spaces, whereas <kbd:C-u 8 C-x $> is for 8
spaces, and <kbd:C-x $> disables the folding. This is built into Emacs.
#+end_box

*** COMMENT yaffolding :Posterity:Way_too_slow:

#+begin_src emacs-lisp :tangle work_secrets.el
;; ‚ÄúYet Another Folding‚Äù just works: Indented elements are folded away; no setup required.
;; (use-package discover)
(use-package yafolding
    ;; Please open any code with top level items folded away:
    ;; Open the file super quick, but when I'm inactive for 5 seconds,
    ;; then I'm probably doing other stuff so do the folding then.
    ;; :hook prog-mode .  (lambda () (interactive)
   ;; (run-with-idle-timer 5 nil #'yafolding-hide-all))
   ;; MA: It seems that this is not ideal; it takes a bit longer than I'd like to fold the whole file.
  )
(defhydra yafolding-hydra (:color pink :columns 3)
  "Fold code based on indentation levels"
  ;; First row
  ("s" yafolding-show-element "show element")
  ("S" yafolding-show-all "show all")
  ("<right>" (lambda () (interactive)
     (let ((next (car (yafolding-get-overlays (point) (point-max)))) pos)
       (if (not next) (message "No more folded regions")
         (setq pos (overlay-start next))
               (yafolding-hide-element)
               (goto-char pos)
               (yafolding-show-element))))
   "forward element")
  ;; Second row
  ("h" yafolding-hide-element "hide element")
  ("H" yafolding-hide-all "hide all")
  ("<left>" (lambda () (interactive)
     (let ((previous (car (yafolding-get-overlays (point-min) (point)))) pos)
       (if (not previous) (message "No more folded regions")
         (setq pos (overlay-start previous))
               (yafolding-hide-element)
               (goto-char pos)
               (yafolding-show-element))))
        "backward element")
  ;; Third row
  ("SPC" yafolding-toggle-element "toggle element")
  ("T" yafolding-toggle-all "toggle all")
  ("q" nil "quit" :color red)
  ("p" yafolding-hide-parent-element "hide parent")
  ("<up>" (lambda () (interactive) (or (ignore-errors (yafolding-go-parent-element))
    (message "Already at the top level.")))
   "go to parent")
  ("r" (lambda () (interactive) (yafolding-hide-region (region-beginning) (region-end)))
   "hide region"
  ))

  (global-set-key (kbd "s-f") 'yafolding-hydra/body)
#+end_src

** Toggling System :RelocateMe:

#+begin_src emacs-lisp
(defhydra toggle-me-to-the-moon (global-map "C-x t") ;; (:color pink :columns 3)
  "Emacs, please toggle my [t]heme | [f]ont | [m]enu"
  ;; First row
  ("t" my/toggle-theme)
  ("f" my/toggle-font)
  ("m" imenu-list-smart-toggle)
  ("c" column-number-mode)
)

 ;; Shows a nice sidebar menu of the buffer's contents
(use-package imenu-list) ;; Main keys: SPC / ENTER / TAB / n / p / q
#+end_src

** Jump between windows using Cmd+Arrow & between recent buffers with Meta-Tab
:PROPERTIES:
:CUSTOM_ID: Jump-between-windows-using-Cmd-Arrow-between-recent-buffers-with-Meta-Tab
:END:
We can use ~C-x o~ to switch to the ‚Äòo‚Äôther window, and ~C-u ùìÉ C-x o~ to switch to
the ùìÉ-th next clockwise window, but using ~s-‚Üë,‚Üì,‚Üê,‚Üí~ may be faster.

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :config ;; use command key on Mac
          (windmove-default-keybindings 'super)
          ;; wrap around at edges
          (setq windmove-wrap-around t))
  #+END_SRC

The [[https://github.com/killdash9/buffer-flip.el][docs]], for the following, have usage examples.
#+BEGIN_SRC emacs-lisp
(use-package buffer-flip
  :bind
   (:map buffer-flip-map
    ("M-<tab>"   . buffer-flip-forward)
    ("M-S-<tab>" . buffer-flip-backward)
    ("C-g"       . buffer-flip-abort))
  :config
    (setq buffer-flip-skip-patterns
        '("^\\*helm\\b")))
;; key to begin cycling buffers.
(global-set-key (kbd "M-<tab>") 'buffer-flip)
#+END_SRC

See [[https://www.emacswiki.org/emacs/buffer-move.el][buffer-move]] if you're interested in moving the buffers, and their windows,
into new configurations.

* Experiments
:PROPERTIES:
:CUSTOM_ID: Experiments
:END:
** Draw pretty unicode tables in org-mode :to_include:
:PROPERTIES:
:CUSTOM_ID: Draw-pretty-unicode-tables-in-org-mode
:END:
This turns the ‚Äú---‚Äù and other ASCII for tables into ‚Äòsmooth‚Äô lines ^_^

|---+---|
| a | b |
|---+---|
| 1 | 2 |
|---+---|
|   |   |
|   |   |
|   |   |
|---+---|

#+BEGIN_SRC emacs-lisp
(quelpa '(org-pretty-table
         :repo "Fuco1/org-pretty-table"
         :fetcher github))

(add-hook 'org-mode-hook 'org-pretty-table-mode)
#+END_SRC

Being an ‚Äòon the fly replacement mechanism‚Äô, we get that ‚ÄúC-u 80 -‚Äù also results
in one smooth horizontal rule and vertical sequences of ‚Äò|‚Äô results in a smooth
vertical line.
* Lost Souls :Outdated_Documentation:
:PROPERTIES:
:CUSTOM_ID: Lost-Souls
:END:

#+begin_src emacs-lisp
;; Move to OS‚Äô trash can when deleting stuff
;; instead of deleting things outright!
(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash/")

;; An automatic window-resizing mechanism.
;; A ‚Äúcalmer‚Äù alternative to golden-ratio.
;; https://github.com/cyrus-and/zoom
(use-package zoom
  :diminish
  :config (zoom-mode t))

;; https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/
;; https://github.com/bbatsov/projectile
(use-package projectile
:config (projectile-global-mode))
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)

;; Let's use an improved buffer list.
(use-package ibuffer ;; This is built-into Emacs.
  :bind ("C-x C-b" . ibuffer))
;; It uses similar commands as does dired; e.g.,
;; / . org
;; This filters (‚Äú/‚Äù) the list with extensions (‚Äú.‚Äù) being ‚Äúorg‚Äù.

(use-package ibuffer-vc
  :hook (ibuffer . (lambda ()
                     (ibuffer-vc-set-filter-groups-by-vc-root)
                     (unless (eq ibuffer-sorting-mode 'alphabetic)
                       (ibuffer-do-sort-by-alphabetic))))
  :custom
  (ibuffer-formats '((mark modified read-only " "
                           (name 18 18 :left :elide) " "
                           (size 9 -1 :right) " "
                           (mode 16 16 :left :elide) " "
                           (vc-status 16 16 :left) " "
                           (vc-relative-file)))))
 #+end_src
+ [[http://martinowen.net/blog/2010/02/03/tips-for-emacs-ibuffer.html][Tips for using Emacs Ibuffer]]
+ (~10 minute video) [[https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/][Using Emacs - 34 - ibuffer and emmet - C'est la Z]]
+ (~10 minute video) [[https://www.youtube.com/watch?v=6KN_oSLFf-k&ab_channel=ProtesilaosStavrou][Emacs: introduction to IBUFFER - YouTube]]

** Sleek Semantic Selection

Super sleek way to select regions: Anywhere press kbd:‚åò-r to select the current
work, press it again to select sentence, then again for the current paragraph,
then more to get the current section.

#+begin_src emacs-lisp
(use-package expand-region
  :diminish
  :bind (("s-r" . #'er/expand-region)))
#+end_src

You can watch an introductory ~3 minute video to expand-region at [[http://emacsrocks.com/e09.html][Emacs Rocks!]].

That is, /repeated ‚åò+r expands the selection to the next logical segment of text:/
In writing this means ‚ÄúWord, sentence, paragraph‚Äù, and in programming this means
‚Äúidentifier, then incrementally larger scopes‚Äù.

** Semantic Change

Using kbd:‚åò-i and kbd:‚åò-o we can quickly, for example, delete a string or its
contents; or delete a {}-block or just its contents; or delete a ()-argument
list or just its contents, etc.

 ~change-inner~ gives you vim's ~ci~ command:
- ~change-inner {~ ‚áí Delete all text starting from the first ‚Äò{‚Äô delimiter to the next one; but /keep the delimiters/.
- ~change-outer {~ ‚áí As above, but also delete the delimiters.

#+begin_src emacs-lisp
(use-package change-inner
  :diminish
  :bind (("s-i" . #'change-inner)
         ("s-o" . #'change-outer)))
#+end_src

** Drag Stuff :Disabled:
#+begin_src emacs-lisp :tangle no
;; Move current word ‚Üê/‚Üí, or current line ‚Üë/‚Üì.
;; Todo: Compare with org-metaup and org-metadown...
(use-package drag-stuff
  :diminish
  :config (loop for (key . action) in '(("<M-down>" . drag-stuff-down)
                                      ("<M-up>" . drag-stuff-up)
                                      ("<M-right>" . drag-stuff-right)
                                      ("<M-left>" . drag-stuff-left))
                do (bind-key key action org-mode-map))
      (drag-stuff-global-mode 1))
#+end_src

Ruins Org-mode's M-‚Üë/‚Üì for moving entire sections around.

** Indentation Guide

The following is also ‚ÄúOK‚Äù in Org-mode ;-)
#+begin_src emacs-lisp
;; Add a visual indent guide
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-character ?|)
  (highlight-indent-guides-responsive 'stack))
#+end_src

** JavaScript
#+begin_src emacs-lisp
(use-package ob-js
  :config
  (add-to-list 'org-babel-load-languages '(js . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
  (add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))
  (system-packages-ensure "node"))
  ;; use ‚Äú:results output‚Äù for js blocks!
  (maybe-clone "https://github.com/alhassy/JavaScriptCheatSheet")
  (maybe-clone "https://github.com/alhassy/AngularJSCheatSheet")
 #+end_src
** Commenting

Let's get some nifty [[https://github.com/remyferre/comment-dwim-2][commenting]] features ---the link has nice usage gifs.
+ [[kbd:][M-;]]
  repeatedly does (1) comments current line, (2) inserts a comment at the end
  of the current line, and (3) deletes an existing end-of-line comment.

   [[kbd:][C-u_M-;]] indents the current enf-of-line comment with any above it.

   For use with Org-mode, it's best to use doc:org-edit-src-code ---which I've
   bound to [[kbd:][‚åò e]].
   #+begin_src emacs-lisp
(use-package comment-dwim-2
  :bind ("M-;" . comment-dwim-2))

 ;; Not ideal: M-; comments a parent Org heading and not the current line.
 ;; (define-key org-mode-map (kbd "M-;") 'org-comment-dwim-2)
   #+end_src

** Having a workspace manager in Emacs
:PROPERTIES:
:CUSTOM_ID: Having-a-workspace-manager-in-Emacs
:END:

I've loved using XMonad as a window tiling manager.  I've enjoyed the ability to
segregate my tasks according to what ‚Äòproject‚Äô I'm working on; such as research,
marking, Emacs play, etc.  With [[https://github.com/nex3/perspective-el][perspective]], I can do the same thing :-)

That is, I can have a million buffers, but only those that belong to a workspace
will be visible when I'm switching between buffers, for example.
( The awesome-tab and centaur-tab, mentioned elsewhere here, can be used to
achieve the same thing by ‚Äògrouping buffers together‚Äô. )

#+BEGIN_SRC emacs-lisp
(use-package perspective
  :defer t
  :config ;; Activate it.
          (persp-mode)
          ;; In the modeline, tell me which workspace I'm in.
          (persp-turn-on-modestring))
#+END_SRC

All commands are prefixed by ~C-x x~; main commands:
+ ~s, n/‚Üí, p/‚Üê~ :: ‚ÄòS‚Äôelect a workspace to go to or create it, or go to ‚Äòn‚Äôext
  one, or go to ‚Äòp‚Äôrevious one.
+ ~c~ :: Query a perspective to kill.
+ ~r~ :: Rename a perspective.
+ ~A~ :: Add buffer to current perspective & remove it from all others.

As always, since we've installed ~which-key~, it suffices to press ~C-x x~ then look
at the resulting menu üòÉ

** Editor Documentation with Contextual Information
:PROPERTIES:
:CUSTOM_ID: Editor-Documentation-with-Contextual-Information
:END:

/Emacs is an extensible self-documenting editor!/

Let's use a helpful Emacs /documentation/ system that cleanly shows a lot of
contextual information ---then let's /extend/ that to work as we want it to:
~C-h o~ to describe the symbol at point.
#+BEGIN_SRC emacs-lisp
(use-package helpful :defer t)

(defun my/describe-symbol (symbol)
  "A ‚ÄúC-h o‚Äù replacement using ‚Äúhelpful‚Äù:
   If there's a thing at point, offer that as default search item.

   If a prefix is provided, i.e., ‚ÄúC-u C-h o‚Äù then the built-in
   ‚Äúdescribe-symbol‚Äù command is used.

   ‚á® Pretty docstrings, with links and highlighting.
   ‚á® Source code of symbol.
   ‚á® Callers of function symbol.
   ‚á® Key bindings for function symbol.
   ‚á® Aliases.
   ‚á® Options to enable tracing, dissable, and forget/unbind the symbol!
  "
  (interactive "p")
  (let* ((thing (symbol-at-point))
         (val (completing-read
               (format "Describe symbol (default %s): " thing)
               (vconcat (list thing) obarray)
               (lambda (vv)
                 (cl-some (lambda (x) (funcall (nth 1 x) vv))
                          describe-symbol-backends))
               t nil nil))
         (it (intern val)))
    (cond
     (current-prefix-arg (funcall #'describe-symbol it))
     ((or (functionp it) (macrop it) (commandp it)) (helpful-callable it))
     (t (helpful-symbol it)))))

;; Keybindings.
(global-set-key (kbd "C-h o") #'my/describe-symbol)
(global-set-key (kbd "C-h k") #'helpful-key)
#+END_SRC

I like [[https://github.com/Wilfred/helpful][helpful]] and wanted it to have the same behaviour as ~C-h o~, which
~helpful-at-point~ does not achieve. The incantation above makes ~C-h o~ use ~helpful~
in that if the cursor is on a symbol, then it is offered to the user as a
default search item for help, otherwise a plain search box for help
appears. Using a universal argument lets us drop to the built-in help command.
** ¬† =README= ---From =init.org= to =init.el=
:PROPERTIES:
:CUSTOM_ID: README-From-init-org-to-init-el
:END:

Rather than manually extracting the Lisp code from this literate document each
time we alter it, let's instead add a ‚Äòhook‚Äô ---a method that is invoked on a
particular event, in this case when we save the file.  More precisely, in this
case, ~C-x C-s~ is a normal save whereas ~C-u C-x C-s~ is a save after forming
~init.elc~ and ~README.md~.

**** The =my/make-init-el-and-README= function
:PROPERTIES:
:CUSTOM_ID: The-my-make-init-el-and-README-function
:END:

We ‚Äòhook on‚Äô the following function to the usual save method
that is associated with this file only.

# +name: enable making init and readme
#+name: startup-code
#+begin_src emacs-lisp :eval never-export
  (defun my/make-init-el-and-README ()
    "Tangle an el and a github README from my init.org."
    (interactive "P") ;; Places value of universal argument into: current-prefix-arg
    (when current-prefix-arg
      (let* ((time      (current-time))
             (_date     (format-time-string "_%Y-%m-%d"))
             (.emacs    "~/.emacs")
             (.emacs.el "~/.emacs.el"))
        ;; Make README.org
        (save-excursion
          (org-babel-goto-named-src-block "make-readme") ;; See next subsubsection.
          (org-babel-execute-src-block))

        ;; remove any other initialisation file candidates
        (ignore-errors
          (f-move .emacs    (concat .emacs _date))
          (f-move .emacs.el (concat .emacs.el _date)))

        ;; Make init.el
        (org-babel-tangle)
        ;; (byte-compile-file "~/.emacs.d/init.el")
        (load-file "~/.emacs.d/init.el")

        ;; Acknowledgement
        (message "Tangled, compiled, and loaded init.el; and made README.md ‚Ä¶ %.06f seconds"
                 (float-time (time-since time))))))

(add-hook 'after-save-hook 'my/make-init-el-and-README nil 'local-to-this-file-please)
#+end_src

**** The Org-block named =make-readme=
:PROPERTIES:
:CUSTOM_ID: The-Org-block-named-make-readme
:END:

Where the following block has ~#+NAME: make-readme~ before it.  This source block
generates the ~README~ for the associated Github repository.
#+NAME: make-readme
#+begin_src emacs-lisp :tangle no :export_never t
(save-buffer)
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.org

     # Logos and birthday present painting
     ,#+HTML:" (s-collapse-whitespace (concat
    " <p align=\"center\">
       <img src=\"images/emacs-logo.png\" width=150 height=150/>
     </p>

     <p align=\"center\">
        <a href=\"https://www.gnu.org/software/emacs/\">
             <img src=\"https://img.shields.io/badge/GNU%20Emacs-" emacs-version "-b48ead.svg?style=plastic\"/></a>
        <a href=\"https://orgmode.org/\"><img src=\"https://img.shields.io/badge/org--mode-" org-version "-489a9f.svg?style=plastic\"/></a>
     </p>

     <p align=\"center\">
       <img src=\"images/emacs-birthday-present.png\" width=250 height=250/>
     </p>
    "))

   ;; My Literate Setup; need the empty new lines for the export
   "

     I enjoy reading others' /literate/ configuration files and
     incorporating what I learn into my own. The result is a
     sufficiently well-documented and accessible read that yields
     a stylish and functional system (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

     This ~README.org~ has been automatically generated from my
     configuration and its contents below are accessible
     in (outdated) blog format, with /colour/, or as colourful
     PDF, [[https://alhassy.github.io/init/][here]]. Enjoy
     :smile:

     ,#+INCLUDE: init.org
    ")

    ;; No code execution on export
    ;; ‚ü™ For a particular block, we use ‚Äú:eval never-export‚Äù. ‚ü´
    (let ((org-export-use-babel nil))
      (org-mode)
      (org-org-export-to-org)))
#+end_src
Alternatively, evaluate the above source block with ~C-c C-c~ to produce a ~README~
file.

For the ‚Äòbadges‚Äô, see https://shields.io/.  The syntax above is structured:
#+begin_example org
https://img.shields.io/badge/<LABEL>-<MESSAGE>-<COLOR>.svg
#+end_example

**** ‚ÄòTable of Contents‚Äô for Org vs. Github
:PROPERTIES:
:CUSTOM_ID: Table-of-Contents-for-Org-vs-Github
:END:

The above mentioned package [[https://github.com/snosov1/toc-org][toc-org]], which creates an up-to-date table of
contents in an org file, at any heading tagged ~:TOC:~.  It's useful primarily for
README files on Github. There is also [[https://github.com/alphapapa/org-make-toc][org-make-toc]], which is more flexible: The
former provides only a top-level TOC; whereas this package allows TOCs at the
sibling level, say, to produce a TOC of only the subsections of a particular
heading, and other TOC features. Unlike toc-org, org-make-toc uses property drawers
to designate TOC matter.
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  ;; Automatically update toc when saving an Org file.
  :hook (org-mode . toc-org-mode)
  ;; Use both ‚Äú:ignore_N:‚Äù and ":export_N:‚Äù to exlude headings from the TOC.
  :custom (toc-org-noexport-regexp
           "\\(^*+\\)\s+.*:\\(ignore\\|noexport\\)\\([@_][0-9]\\)?:\\($\\|[^ ]*?:$\\)"))
#+END_SRC

However, [[https://github.com/snosov1/toc-org/issues/54#issuecomment-363710561][toc-org produces broken links for numbered sections]].
That is, if we use =#+OPTIONS: num:t= then a section, say
~** =~/.emacs= vs. =init.org=~ as the first subheading of the third
heading, then it renders with the text preceeded by =3.1=.
On the left-most part of the heading, Github provides a a link option;
clicking provides a link to this exact location in the README,
changing the current URL to something like
=https://github.com/alhassy/emacs.d#31-emacs-vs-initorg=.
Now, toc-org produces Github-style anchors from Org headings,
but does not account for numbers, and so gives us
=https://github.com/alhassy/emacs.d#emacs-vs-initorg=, which is
so close but missing the translated number, ~31~.

I've experimented with using toc-org links using org-style, instead of the
default Github style, but it seems that the org-style completely breaks
rendering the resulting readme.
Likewise, [[https://github.com/snosov1/toc-org/issues/3][it seems]] that headings that are links break the TOC link; whence
my section on the Reveal slide-deck system has a broken link to it.
Perhaps org-make-toc solves these issues ---something to look into.
# TODO: MA: Does org-make-toc solve this issues?

I'm not sure how I feel about actually having the Github-serving TOC in my
source file. It's nice to have around, from an essay-perspecive, but it breaks
HTML export since its links are /not/ well-behaved; e.g., ~:ignore:~-ed headlines
appear in the toc, but do not link to any visible heading in the HTML; likewise,
headings with URLS in their names break. As such, below I've developed a way to
erase it altogether ---alternatively, one could mark the toc as ~:noexport:~, but
this would then, in my current approach, not result in a toc in the resulting
README.
#+BEGIN_SRC emacs-lisp
(cl-defun my/org-replace-tree-contents (heading &key (with "") (offset 0))
  "Replace the contents of org tree HEADING with WITH, starting at OFFSET.

Clear a subtree leaving first 3 lines untouched  ‚áê  :offset 3
Deleting a tree & its contents                   ‚áê  :offset -1, or any negative number.
Do nothing to a tree of 123456789 lines          ‚áê  :offset 123456789

Precondition: offset < most-positive-fixnum; else we wrap to a negative number."
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (re-search-forward (format "^\\*+ %s" (regexp-quote heading)))
    ;; To avoid ‚Äòforward-line‚Äô from spilling onto other trees.
    (org-narrow-to-subtree)
    (org-mark-subtree)
    ;; The 1+ is to avoid the heading.
    (dotimes (_ (1+ offset)) (forward-line))
    (delete-region (region-beginning) (region-end))
    (insert with)
    (widen)))

;; Erase :TOC: body ---provided we're using toc-org.
;; (my/org-replace-tree-contents "Table of Contents")
#+END_SRC
**** Alternate approaches to generating a README
:PROPERTIES:
:CUSTOM_ID: Alternate-approaches-to-generating-a-README
:END:

Github supports several markup languages, one of which is Org-mode.
  - It seems that Github uses [[https://github.com/bdewey/org-ruby][org-ruby]] to convert org-mode to html.
  - [[https://github.com/novoid/github-orgmode-tests][Here]] is a repo demonstrating how Github interprets Org-mode files.
  - org-ruby supports inline ~#+HTML~ but [[https://github.com/wallyqs/org-ruby/issues/51][not html blocks]].

It seems coloured HTML does not render well:
#+BEGIN_example emacs-lisp
(org-html-export-to-html)
(shell-command "mv README.html README.md")
#+END_example

[[https://orgmode.org/manual/JavaScript-support.html][JavaScript supported display of web pages]] with:
#+BEGIN_example org
#+INFOJS_OPT: view:info toc:t buttons:t
#+END_example
This looks nice for standalone pages, but doesn't incorporate nicely with github
README.org.

Usually, Github readme files are in markdown, which we may obtain from an Org
file with =M-x org-md-export-to-markdown=.

- [ ] By default, this approach results in grey-coloured source blocks ---eek!

- [X] It allows strategic placement of a table of contents.

      Declare ~#+options: toc:nil~ at the top of the Org file, then have =#+TOC:
  headlines 2= in a strategic position for a table of contents, say after a brief
  explanation of what the readme is for.

- [X] It allows us to preview the readme locally before comitting, using [[https://github.com/joeyespo/grip][grip]].


   #+BEGIN_SRC emacs-lisp :tangle no
   ;; grip looks for README.md
   (system-packages-ensure "grip")
   ;; Next: (async-shell-command "cd ~/.emacs.d/; grip")
   #+END_SRC

   We can approximate this behaviour for the other approaches:
    1. Export to markdown.
    2. =COMMENT=-out any =:TOC:=-tagged sections ---their links are not valid
       markdown links, since they don't refer to any markdown labels.
    3. Rename the exported file to =README.md=.
    4. Run ~grip~.
** Screencapturing the Current Emacs Frame
:PROPERTIES:
:CUSTOM_ID: Screencapturing-the-Current-Emacs-Frame
:END:

Sometimes an image can be tremendously convincing, or at least sufficiently
inviting. The following incantation is written for MacOS and uses it's native
=screencapture= utility, as well as =magick=.
#+BEGIN_SRC emacs-lisp
(defun my/capture-emacs-frame (&optional prefix output)
"Insert a link to a screenshot of the current Emacs frame.

Unless the name of the OUTPUT file is provided, read it from the
user. If PREFIX is provided, let the user select a portion of the screen."
(interactive "p")
(defvar my/emacs-window-id
   (s-collapse-whitespace (shell-command-to-string "osascript -e 'tell app \"Emacs\" to id of window 1'"))
   "The window ID of the current Emacs frame.

    Takes a second to compute, whence a defvar.")

(let* ((screen  (if prefix "-i" (concat "-l" my/emacs-window-id)))
       (temp    (format "emacs_temp_%s.png" (random)))
       (default (format-time-string "emacs-%m-%d-%Y-%H:%M:%S.png")))
;; Get output file name
  (unless output
    (setq output (read-string (format "Emacs screenshot filename (%s): " default)))
    (when (s-blank-p output) (setq output default)))
;; Clear minibuffer before capturing screen or prompt user
(message (if prefix "Please select region for capture ‚Ä¶" "‚ô•‚Äø‚ô•"))
;; Capture current screen and resize
(thread-first
    (format "screencapture -T 2 %s %s" screen temp)
    (concat "; magick convert -resize 60% " temp " " output)
    (shell-command))
(f-delete temp)
;; Insert a link to the image and reload inline images.
(insert (concat "[[file:" output "]]")))
(org-display-inline-images nil t))

(bind-key* "C-c M-s" #'my/capture-emacs-frame)
#+END_SRC

Why this way? On MacOS, ImageMagick's =import= doesn't seem to work ---not at all
for me! Also, I dislike how large the resulting image is. As such, I'm using
MacOS's =screencapture= utility, which in-turn requires me to somehow obtain frame
IDs. Hence, the amount of work needed to make this happen on my system was most
simple if I just wrote it out myself rather than tweaking an existing system.

+ ~C-c C-x C-v~ ‚áí Toggle inline images!

** Org-mode's ~<ùí≥~ Block Expansions
:PROPERTIES:
:CUSTOM_ID: Org-mode's-ùí≥-Block-Expansions
:END:

In org-mode we type ~<X TAB~ to obtain environment templates, such as ~<s~ for
source blocks or ~<q~ for quote blocks.  It seems recent [[https://orgmode.org/Changes.html#org1b5e967][changes]] to the org-mode
structure template expansion necessitate explicitly loading ~org-tempo~.
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

To insert source blocks with the assistance of a pop-up: ~C-c C-v d~ ;-)
Perhaps more usefully, invoking within a source block splits it up into two
separate blocks! Moreover, if invoked on a selected region, it puts the region
into a new code block! Wow!

+ ~C-c C-,~ refers to ~org-insert-structure-template~, which provides non-source
  blocks, such as quote ~<q~, comment ~<C~, center ~<c~, notes ~<n~, examples ~<e~, and ~<l~
  and ~<h~ and ~<a~ for LaTeX and HTML and ASCII export blocks.
  - ~<X~ allows you to obtain the org-block assigned to shortcut ~X~.
  - The contents of comment blocks are ignored upon export.
+ ~C-c C-v C-d~ and ~C-c C-v d~ refer to the ~org-babel-demarcate-block~, which
  provides /source/ blocks.

| We shall improve upon this system below using snippets. |
E.g., ~s_em TAB~ to obtain an org-src block marked with ~emacs-lisp~ as the
language.  This saves us a few key strokes.

*** COMMENT TODO Demoing Dot Graphs
:PROPERTIES:
:CUSTOM_ID: TODO-Demoing-Dot-Graphs
:END:

# Graphviz: Press <g-TAB to obtain a minimal editable example.
 #+BEGIN_SRC dot :file simple_markov.png :cmdline -Kdot -Tpng :results replace
 digraph {
      node [color=black,fillcolor=white,shape=rectangle,style=filled,fontname="Helvetica"];
      A[label="Hello"];
    A -> D;
    A -> B;
    D -> C;
    B -> C;
    C -> C;
  }
 #+END_SRC

 #+RESULTS:
 [[file:simple_markov.png]]

** What's changed & who's to blame?
:PROPERTIES:
:CUSTOM_ID: What's-changed-who's-to-blame
:END:

Let's have, in a fringe, an indicator for altered regions in a version
controlled file.  The symbols ‚Äú+, =‚Äù appear in a fringe by default for
alterations ---we may change these if we like.
# Moreover, let's stage-&-commit straight from a working buffer.
#+BEGIN_SRC emacs-lisp
;; Hunk navigation and commiting.
(use-package git-gutter
  :diminish
  :config (global-git-gutter-mode))
;; Diff updates happen in real time according when user is idle.
#+END_SRC
# There's a fork, [[https://github.com/nonsequitur/git-gutter-plus][git-gutter+]], which provides additional features but was slow for me on large, 10k, files.

Let's set a hydra so we can press ~C-x v n n p n~ to move the next two
altered hunks, move back one, then move to the next. This saves me having
to supply the prefix ~C-x v~ each time I navigate among my alterations.
At any point we may also press ~u ùï©~ to denote ~C-u ‚ü™prefix‚ü´ ùï©~.
#+BEGIN_SRC emacs-lisp
(defhydra hydra-version-control (global-map "C-x v")
  "Version control"
  ;; Syntax: (extension method description)
  ("n" git-gutter:next-hunk      "Next hunk")
  ("p" git-gutter:previous-hunk  "Previous hunk")
  ("d" git-gutter:popup-hunk     "Show hunk diff")
  ("r" git-gutter:revert-hunk    "Revert hunk\n")
  ("c" git-gutter:stage-hunk     "Stage hunk")
  ("s" git-gutter:statistic      "How many added & deleted lines"))
#+END_SRC

Commiting with ~C-x v c~ let's us use ~C-c C-k~ to cancel and ~C-c C-c~ to
submit the given message; ~C-c C-a~ to amend the previous commit.

Alternatively, we may use [[https://github.com/dgutov/diff-hl][diff-hl]]:
#+BEGIN_SRC emacs-lisp
;; Colour fringe to indicate alterations.
;; (use-package diff-hl)
;; (global-diff-hl-mode)
#+END_SRC

A few more helpful version control features:
#+BEGIN_SRC emacs-lisp
;; Popup for who's to blame for alterations.
(use-package git-messenger
  :custom ;; Always show who authored the commit and when.
          (git-messenger:show-detail t)
          ;; Message menu let's us use magit diff to see the commit change.
          (git-messenger:use-magit-popup t))

;; View current file in browser on github.
;; More generic is ‚Äúbrowse-at-remote‚Äù.
(use-package github-browse-file :defer t)

;; Add these to the version control hydra.
;;
(defhydra hydra-version-control (global-map "C-x v")
  ("b" git-messenger:popup-message "Who's to blame?")
  ;; C-u C-x b ‚ï± u b ‚à∑ Also show who authored the change and when.
  ("g" github-browse-file-blame "Show file in browser in github")
  ("s" magit-status "Git status of current buffer"))
#+END_SRC

Perhaps ~C-x v b~ will motivate smaller, frequent, commits.

Obtaining URL links to the current location of a file
---URLs are added to the kill ring.
Usefully, if [[https://gitlab.com/pidu/git-timemachine][git-timemachine-mode]] is active, the generated link
points to the version of the file being visited.
#+BEGIN_SRC emacs-lisp
(use-package git-link :defer t)

(defhydra hydra-version-control (global-map "C-x v")
  ("l" git-link "Git URL for current location"))
#+END_SRC

Read [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Version-Control.html#Version-Control][here]] for more about version control in general.

** Helpful Utilities & Shortcuts
:PROPERTIES:
:CUSTOM_ID: Helpful-Utilities-Shortcuts
:END:

Here is a collection of Emacs-lisp functions that I have come to use in other files.
# The subsections below detail the definitions.

Disclaimer: I wrote much of the following /before/ I learned any lisp; everything below is probably terrible.

Let's save a few precious seconds,
#+begin_src emacs-lisp
;; change all prompts to y or n
(fset 'yes-or-no-p 'y-or-n-p)

;; Enable all ‚Äòpossibly confusing commands‚Äô such as helpful but
;; initially-worrisome ‚Äúnarrow-to-region‚Äù, C-x n n.
(setq-default disabled-command-function nil)
#+end_src

** Documentation Pop-Ups
:PROPERTIES:
:CUSTOM_ID: Documentation-Pop-Ups
:END:

Let [[https://github.com/expez/company-quickhelp][documentation pop-up]] when we pause on a completion.
This is very useful when editing in a particular coding language, say via
~C-c '~ for org-src blocks.
#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
 :config
   (setq company-quickhelp-delay 0.1)
   (company-quickhelp-mode))
#+END_SRC
** Emacs keybindings for my browser :Disabled:
:PROPERTIES:
:CUSTOM_ID: Emacs-keybindings-for-my-browser
:END:

#+begin_center
‚ü® I was a bit too Emacs-happy at one-point; this' cool, but I rarely use it;
except ~C-x b~: A buffer approach is far superior to a tab-based one. ‚ü©
#+end_center

I've downloaded the [[https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb/related][Vimium]] extension for Google Chrome,
and have copy-pasted [[https://gist.github.com/dmgerman/6f0e5f9ffc6484dfaf53][these]] Emacs key bindings into it.
Now ~C-h~ in my browser shows which Emacs-like bindings
can be used to navigate my browser ^_^

** Using Emacs in any text area on my OS                          :Disabled:
:PROPERTIES:
:CUSTOM_ID: Using-Emacs-in-any-text-area-on-my-OS
:END:

#+begin_center
‚ü® I was a bit too Emacs-happy at one-point; this' cool, but I rarely use it. ‚ü©
#+end_center

Using the [[https://github.com/zachcurry/emacs-anywhere/#usage][Emacs-Anywhere]] tool, I can press ~Cmd Shift e~ to have an Emacs frame
appear, produce text with Emacs editing capabilities, then ~C-x 5 0~ to have the
resulting text dumped into the text area I was working in.

This way I can use Emacs literally anywhere for textual input!

For my Mac OSX:
#+BEGIN_SRC emacs-lisp :tangle no
(shell-command "curl -fsSL https://raw.github.com/zachcurry/emacs-anywhere/master/install | bash")

(server-start)
#+END_SRC

The tools that use emacs-anywhere ---such as my web browser--- and emacs-anywhere
itself need to be given sufficient OS permissions:
#+begin_example org
System Preferences ‚Üí Security & Privacy ‚Üí Accessibility
#+end_example
Then check the emacs-anywhere box from the following gui and provide a keyboard shortcut:
#+begin_example org
System Preferences ‚Üí Keyboard ‚Üí Shortcuts ‚Üí Services
#+end_example

(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

I always want to be in Org-mode and input unicode:
#+BEGIN_SRC elisp :tangle no
(add-hook 'ea-popup-hook
  (lambda (app-name window-title x y w h)
    (org-mode)
    (set-input-method "Agda")))
#+END_SRC

** Reload buffer with ~f5~
:PROPERTIES:
:CUSTOM_ID: Reload-buffer-with-f5
:END:

I do this so often it's not even funny.
#+BEGIN_SRC emacs-lisp
(global-set-key [f5] '(lambda () (interactive) (revert-buffer nil t nil)))
#+END_SRC

In Mac OS, one uses ~Cmd-r~ to reload a page and Emacs binds buffer reversion to ~Cmd-u~
--in Emacs, Mac's ~Cmd~ is referred to as the ‚Äòsuper key‚Äô and denoted ~s~.

Moreover, since I use Org-mode to generate code blocks and occasionally
inspect them, it would be nice if they automatically reverted when they
were regenerated --Emacs should also prompt me if I make any changes!

#+begin_src emacs-lisp
;; Auto update buffers that change on disk.
;; Will be prompted if there are changes that could be lost.
(global-auto-revert-mode 1)

;; Don't show me the ‚ÄúARev‚Äù marker in the mode line
(diminish 'auto-revert-mode)
#+end_src

** Kill to start of line
:PROPERTIES:
:CUSTOM_ID: Kill-to-start-of-line
:END:
Dual to ~C-k~,
#+BEGIN_SRC emacs-lisp
;; M-k kills to the left
(global-set-key "\M-k" '(lambda () (interactive) (kill-line 0)) )
#+END_SRC
** Killing buffers & windows: ~C-x k~ has a family
:PROPERTIES:
:CUSTOM_ID: Killing-buffers-windows-C-x-k-has-a-family
:END:

Let's extend the standard ~C-x k~ with prefix support, so that we can invoke
variations: Kill /this/ buffer, kill /other/ buffer, or kill /all other/ buffers.

By default ~C-x k~ prompts to select which buffer should be selected. I almost
always want to kill the current buffer, so let's not waste time making such a
tedious decision. Moreover, if I've killed a buffer, I usually also don't want
the residual window, so let's get rid of it.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x k")
  (lambda (&optional prefix)
"C-x k     ‚áí Kill current buffer & window
C-u C-x k ‚áí Kill OTHER window and its buffer
C-u C-u C-x C-k ‚áí Kill all other buffers and windows

Prompt only if there are unsaved changes."
     (interactive "P")
     (pcase (or (car prefix) 0)
       ;; C-x k     ‚áí Kill current buffer & window
       (0  (kill-this-buffer)
           (unless (one-window-p) (delete-window)))
       ;; C-u C-x k ‚áí Kill OTHER window and its buffer
       (4  (other-window 1)
           (kill-this-buffer)
           (unless (one-window-p) (delete-window)))
       ;; C-u C-u C-x C-k ‚áí Kill all other buffers and windows
       (16   (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
             (delete-other-windows)))))
#+end_src

The incantation ~C-u C-x k~ will reduce the noise of all the documentation buffers
I tend to consult.

** Switching from 2 horizontal windows to 2 vertical windows
:PROPERTIES:
:CUSTOM_ID: Switching-from-2-horizontal-windows-to-2-vertical-windows
:END:

I often find myself switching from a horizontal view of two windows in Emacs to a
vertical view. This requires a variation of ~C-x 1 RET C-x 3 RET C-x o C-x b RET~.
Instead I now only need to type ~C-|~ to make this switch.
#+BEGIN_SRC emacs-lisp
(defun my/ensure-two-vertical-windows ()
  "I used this method often when programming in Coq.

When there are two vertical windows, this method ensures the left-most
window contains the buffer with the cursour in it."
  (interactive)
  (let ((otherBuffer (buffer-name)))
    (other-window 1)                ;; C-x 0
    (delete-window)                 ;; C-x 0
    (split-window-right)			;; C-x 3
    (other-window 1)                ;; C-x 0
    (switch-to-buffer otherBuffer)	;; C-x b RET
    (other-window 1)))

(global-set-key (kbd "C-|") 'my/ensure-two-vertical-windows)
#+END_SRC
** Obtaining Values of ~#+KEYWORD~ Annotations
:PROPERTIES:
:CUSTOM_ID: Obtaining-Values-of-KEYWORD-Annotations
:END:

Org-mode settings are, for the most part, in the form ~#+KEYWORD: VALUE~. Of notable interest
are the ~TITLE~ and ~NAME~ keywords. We use the following ~org-keywords~ function to obtain
the values of arbitrary ~#+THIS : THAT~ pairs, which may not necessarily be supported by native
Org-mode --we do so for the case, for example, of the ~CATEGORIES~ and ~IMAGE~ tags associated with an article.

# Parse org buffer as an elisp structure: https://emacs.stackexchange.com/questions/2869/turn-a-list-or-data-structure-into-an-org-document#
#+BEGIN_SRC emacs-lisp
;; Src: http://kitchingroup.cheme.cmu.edu/blog/2013/05/05/Getting-keyword-options-in-org-files/
(defun org-keywords ()
  "Parse the buffer and return a cons list of (property . value) from lines like: #+PROPERTY: value"
  (org-element-map (org-element-parse-buffer 'element) 'keyword
                   (lambda (keyword) (cons (org-element-property :key keyword)
                                           (org-element-property :value keyword)))))

(defun org-keyword (KEYWORD)
  "Get the value of a KEYWORD in the form of #+KEYWORD: value"
  (cdr (assoc KEYWORD (org-keywords))))
#+END_SRC

Note that capitalisation in a ‚Äù#+KeyWord‚Äù is irrelevant.

See [[https://orgmode.org/manual/Org-syntax.html][here]] on how to see the abstract syntax tree of an org file
and how to manipulate it.

** Publishing articles to my personal blog
:PROPERTIES:
:CUSTOM_ID: Publishing-articles-to-my-personal-blog
:END:

I try to [[https://alhassy.github.io/][blog]] occasionally, so here's a helpful function to quickly
publish the current article to my blog.
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cb" 'my/publish-to-blog)

(cl-defun my/publish-to-blog (&optional (draft nil) (local nil))
  "
  Using ‚ÄòAlBasmala‚Äô setup to publish current article to my blog.
  Details of AlBasmala can be found here:
  https://alhassy.github.io/AlBasmala/

  Locally: ~/alhassy.github.io/content/AlBasmala.org

  A ‚Äòdraft‚Äô will be produced in about ~7 seconds, but does not re-produce
  a PDF and the article has a draft marker near the top. Otherwise,
  it will generally take ~30 seconds due to PDF production, which is normal.
  The default is not a draft and it takes ~20 seconds for the live
  github.io page to update.

  The ‚Äòlocal‚Äô optiona indicates whether the resulting article should be
  viewed using the local server or the live webpage. Live page is default.

  When ‚Äòdraft‚Äô and ‚Äòlocal‚Äô are both set, the resulting page may momentarily
  show a page-not-found error, simply refresh.
  "

  (load-file "~/alhassy.github.io/content/AlBasmala.el")

  ;; --MOVE ME TO ALBASMALA--
  ;; Sometimes the file I'm working with is not a .org file, so:
  (setq file.org (buffer-name))

  (preview-article :draft draft)
  (unless draft (publish))
  (let ((server (if local "http://localhost:4000/" "https://alhassy.github.io/")))
    (async-shell-command (concat "open " server NAME "/") "*blog-post-in-browser*"))
)
#+END_SRC

** Jumping without hassle
:PROPERTIES:
:CUSTOM_ID: Jumping-without-hassle
:END:

#+BEGIN_SRC emacs-lisp
(defun my/org-goto-line (line)
  "Go to the indicated line, unfolding the parent Org header.

   Implementation: Go to the line, then look at the 1st previous
   org header, now we can unfold it whence we do so, then we go
   back to the line we want to be at.
  "
  (interactive "nEnter line: ")
  (goto-line line)
  (org-previous-visible-heading 1)
  (org-cycle)
  (goto-line line))
#+END_SRC

** COMMENT Folding within a subtree
:PROPERTIES:
:CUSTOM_ID: Folding-within-a-subtree
:END:

#+BEGIN_SRC emacs-lisp
(defun my/org-fold-current-subtree-anywhere-in-it ()
  "Hide the current heading, while being anywhere inside it."
  (interactive)
  (save-excursion
    (org-narrow-to-subtree)
    (org-shifttab)
    (widen)))

(add-hook 'org-mode-hook '(lambda ()
  (local-set-key (kbd "C-c C-h") 'my/org-fold-current-subtree-anywhere-in-it)))
#+END_SRC

* Conclusion ---Why Configuration Files Should be Literate
:PROPERTIES:
:CUSTOM_ID: Conclusion-Why-Configuration-Files-Should-be-Literate
:END:

A configuration file sets up various features for a tool ---and serves as an
essential learning point.  In order to remember them, what they do, and possibly
where you learned about them ---which may include additional resources--- it is
pertinent to document such facts. Benefits of documentating features include:
+ A list of the features with human readable names! ---In case you forget what you invested time on!
+ Personal documentation! ---Reduce wasting time Googling things that you knew in the past!
+ Convincing Need
  - Making notes with decriptive text, as suggested below,
    will make it clear whether you actually need the feature
    or ‚Äújust threw it becuase it looks cool‚Äù ---which leads to ‚Äòinit bankruptcy‚Äô.

    Moreover, actually documenting a feature may make it more to recall
    that you have the feature and have notes for it.

#+begin_quote
Programs are meant to be read by humans and only incidentally for computers to
execute. ---Donald Knuth
#+end_quote

Alongside a feature's installation, I've tried to provide the following:
+ /Why/ would I want this? Motivation!
  - Example scenerios and use-cases.
+ /How/ do I actually use it? Super terse usage details to ‚Äúget going‚Äù!
+ /Where/ is the offical documentation page, or repository? Discovarability!
+ Comparisions: Are there other similar features, builtin or otherwise? How do they compare?
  Why have I decided for this one instead of another one?
+ Additional comments and reminders related to the feature.
  - E.g., why the feature is now disabled, ‚Äòcommented out‚Äô, when
    before it was useful.

#+begin_quote
Programs without documentation have little value; it's like a claim without evidence! ---Me
#+end_quote

Here are some benefits of having a tool's configurations written literately
as an Org-mode file, then tangeling as appropriate.

+ Modularity! ---or *‚ÄúIn Praise of the Monolith‚Äù*
  # ---*Why Configurations Should Live in Monolithic Files*

  It may not be feasible, or practical, to split a tool's configuration file
  into multiple file hierarchy. Yet, with Org-mode we may reify the hierarchical
  structure as ‚Äòsections‚Äô and have the resulting configuration read more like
  a novel, easily folding and navigating, between sections.

  - Section headers provide organisation and they're collapsable.

  Even if you can make multiple files, using one monolithic file allows:

  - Really easy to quickly /re-organise/ code!
    * Use ~w~ to move content almost instanteously!
    * In contrast, it's harder to review an entire project, when it's in pieces.
  - Many files requires coming up with descriptive file names; instead
    prefer descriptive org headings ^_^
  - Easily navigatable hierarchy with a nested directory/org-heading structure.
    * Have headings with an introducttory paragraph that explains the
      kind of features being considered ---or, lazily, look at the outlined view
      of subheadings to see what's there.
  - Easy search & review of features since they're in one file.
    * Multiple files makes it harder to remember which features live where.
  - One file is easy to distribute & share!

  # Using headings does not conflict with the Single Responsibility Principle nor
  # of Separation of Concerns. ---This totally ignores the Interface Segregation
  # Principle, but in the grand scheme of things, I'm happy this way and I like
  # being happy.

  Many small files are great for collobaration ---there'll likely be less merge
  conflicts. However, configuration files are usually a one-person project.

  # + Some programming languages perform better when there are many small files
  #   ---glaring at Agda here. Others have a bit of a cost to linking all the files
  #   together. There's no fast and hard rule it seems.

+ Toggle feature selection without altering any code!

  With a single ~#~ key press, we can comment out a section, thereby disabling the
  features it provides. The features are neither deleted nor forgotten, but we
  can experiment with having them there or not /without/ altering any code!
  Alternatively, one mays use the ~:noexport:~ tag on a section header.

  In contrast, an illiterate setup would have us commenting out large chunks of
  code, which is not as easy to manage.

+ Really easy to delete content!

  After a while, I come back and realise I've implemented something silly or
  that is available via some external package, I can quickly delete it.

+ Can quickly export to different mediums!

  If you want to share your configuration with others, then an HTML rendition
  with a table of contents and text sprinkled everywhere is more likely to
  attract onlookers since they can easily jump to the sections they're interested in.

+ Easily digestible chunks of code!

  With a literate approach, one is empowered to have short source blocks; e.g.,
  not exceeding 30 lines ---read more [[https://dzone.com/articles/rule-30-%E2%80%93-when-method-class-or][here]].  This is more likely to ensure
  (possibly by extracting code into its own functions): The listing fits on one
  screen, avoiding deeply nested control structures, non-repeating common
  logical patterns, increased confidence that the implementation meets the
  stated purpose.

The only reason I would use multiple files or raw code for setting up a tool
would be if I did not have a literate programming environment; i.e., Org-mode.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

#+begin_center
                            Emacs   is   fun  (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

                                      Bye!
#+end_center

#+HTML: <p align="center"><img src="https://i.redd.it/g6yi40gbivv31.jpg"  alt="Being replaced at the office"/></p>

#+begin_center
/Thanks to friends for ‚Äúreplacing me‚Äù while I was away ‚ô•‚Äø‚ô• ·¥µ‚Äô·µê ·µá·µâ·µÉ·µò·µó‚Å±·∂†·µòÀ°/
#+end_center

* COMMENT JavaScript :Does_not_work_with_flow:

Let's get a JavaScript refactoring library for emacs:

#+begin_src emacs-lisp :tangle work_secrets.el
;; (use-package js2-mode)

(use-package js2-refactor ;; Does not work with flow.js :'(
  :hook (js-mode . js2-refactor-mode)
  :config (js2r-add-keybindings-with-prefix "s-j"))

;; To be aware of https://github.com/azer/npm.el
;; Create and rule NPM packages from Emacs
#+end_src

Using ~‚åò j~ then one of the following...

| ~lt~ | Adds a console.log() statement for what is at point (or region).               |
|    | With a prefix argument, use JSON pretty-printing.                              |
| ~dt~ | Adds a debug() statement for what is at point (or region).                     |
| ~k~  | is kill: Kills to the end of the line, but does not cross semantic boundaries. |
|----+--------------------------------------------------------------------------------|
| ~ee~ | Make an inline list/object/function/funcall be on multiple lines               |
| ~cc~ | Opposite of ee                                                                 |
|----+--------------------------------------------------------------------------------|
| ~tf~ | Toggle between ~function name() {}~ and ~var name = function () {}~                |
| ~ta~ | Toggle between function expression to arrow function                           |
| ~ts~ | Toggle between an async and a regular function.                                |
|----+--------------------------------------------------------------------------------|
| ~ef~ | Extract the currently selected expression into a top level function            |
| ~em~ | Like ef, but it's a method in the parent/ambient class                         |
| ~ev~ | Takes a marked expression and replaces it with a var                           |
| ~el~ | Similar to extract-var but uses a let-statement                                |
| ~ec~ | Similar to extract-var but uses a const-statement                              |
| ~iv~ | Opposite of iv: Replaces all instances of a variable with its initial value    |
| ~vt~ | Changes local var a to be this.a instead, and all lexical uses.                |
| ~rv~ | Renames the variable on point and all occurrences in its lexical scope         |
|----+--------------------------------------------------------------------------------|
| ~wi~ | Wraps the entire buffer in an immediately invoked function expression          |
| ~3i~ | Converts ternary operator to if-statement; nice!                               |
| ~ss~ | Split a string, at point, into a catenation of strings                         |
| ~st~ | Convert a string into a `template`.                                            |

* COMMENT Approaches Before Reading Documentation :Documentation:Posterity:Learning:noexport:
:PROPERTIES:
:CUSTOM_ID: Approaches-Before-Reading-Documentation
:END:

;; Nice soft yellow, pleasing ---try background colour for html export ;-)
(add-to-list 'default-frame-alist '(background-color . "#fcf4dc"))
;; "white"; or this darker yellow "#eae3cb"

** Elementary Version Control
:PROPERTIES:
:CUSTOM_ID: Elementary-Version-Control
:END:

[[http://www.linfo.org/hard_link.html][Soft links]] are pointers to other filenames, whereas hardlinks
are pointers to memory location of a given filename!
Soft links are preferable since they defer to the orginal filename
and can work across servers.

We can declare them as follows,
#+BEGIN_EXAMPLE shell
ln -s source_file myfile
#+END_EXAMPLE

If ~repo~ refers to a directory under version control
--or Dropbox-- we move our init file and emacs directory to it,
then make soft links to these locations so that whenever ~~/.emacs~
is accessed it will refer to ~repo/.emacs~ and likewise for ~.emacs.d~ :-)

On a new machine, copy-paste any existing emacs configs we want
to the ~repo~ folder then ~rm -rf ~~/.emacs*~ and then make the soft
links only.

#+BEGIN_EXAMPLE shell
repo=~/Dropbox     ## or my git repository: ~/dotfiles

cd ~

mv .emacs $repo/
ln -s $repo/.emacs .emacs

mv .emacs.elc $repo/
ln -s $repo/.emacs.elc .emacs.elc

mv .emacs.d/ $repo/
ln -s $repo/.emacs.d/ .emacs.d
#+END_EXAMPLE
Note the extra ~/~ after ~.emacs.d~!

You may need to unlink soft links if you already have them;
e.g., ~unlink .emacs.d~.

To make another softlink to a file, say in a blogging directory,
we ~cd~ to the location of interest then execute, say:
~ln -s $repo/.emacs.d/init.org init.org~

While we're at it, let's make this super-duper file (and another) easily
accessible --since we'll be altering it often--:
#+BEGIN_EXAMPLE shell
cd ~

ln -s dotfiles/.emacs.d/init.org init.org
ln -s alhassy.github.io/content/AlBasmala.org AlBasmala.org
#+END_EXAMPLE

Below I'll equip us with an Emacs ‚Äòporcelain‚Äô interface to git
--it makes working with version control tremendously convenient.
Moreover, I add a little pop-up so that I don't forget to commit often!

Finally, since I've symlinked my ~.emacs~:
#+begin_src emacs-lisp
;; Don't ask for confirmation when opening symlinked files.
(setq vc-follow-symlinks t)
#+end_src
** What's in, or at the top of, my ~~/.emacs~
:PROPERTIES:
:CUSTOM_ID: What's-in-or-at-the-top-of-my-emacs
:END:

#+BEGIN_SRC emacs-lisp :tangle no
(org-babel-load-file "~/.emacs.d/init.org")
;;
;; My Emacs settings: (find-file "~/.emacs.d/init.org")
#+END_SRC
( I do not generate my ~.emacs~ file from this source code in-fear of
   overriding functionality inserted by ~custom~. )

# Whenever this ~init.org~ is loaded by org-babel it creates a ~.emacs~ file which
Our ~.emacs~ should be byte-compiled so that when we start Emacs it will
automatically determine if the ~init.org~ file has changed and if so it
would tangle it producing the ~init.el~ file which will then be loaded immediately.

:Maybe_bad_idea:
#+BEGIN_SRC emacs-lisp :tangle no
;; In-case I forget to byte-compile!
(byte-compile-file "~/.emacs")

;; Change this silly counter to visualy notice a change. When making many changes.
;; (progn (message "Init.org contents loaded! Counter: 7") (sleep-for 3))
#+END_SRC
:End:
** README.md
:PROPERTIES:
:CUSTOM_ID: README-md
:END:

#+BEGIN_SRC emacs-lisp :tangle no :export_never t
(with-temp-buffer
    (insert (concat
    "#+EXPORT_FILE_NAME: README.md
     #+HTML: <h1> A Life Configuring Emacs </h1>
     #+begin_export html
     <p align=\"center\">
       <img src=\"emacs-logo.png\" width=150 height=150/>
     </p>

     <p align=\"center\">
        <a href=\"https://www.gnu.org/software/emacs/\">
             <img src=\"https://img.shields.io/badge/GNU%20Emacs-" emacs-version "-b48ead.svg?style=plastic\"/></a>
        <a href=\"https://orgmode.org/\"><img src=\"https://img.shields.io/badge/org--mode-" org-version "-489a9f.svg?style=plastic\"/></a>
     </p>

     <p align=\"center\">
       <img src=\"emacs-birthday-present.png\" width=200 height=250/>
     </p>
     #+end_export
     #+HTML: <h3> My Literate Setup </h3>
     #+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

     I enjoy reading others' /literate/ configuration files and incorporating what I learn
     into my own. The result is a sufficiently well-documented and accessible read that yields
     a stylish and functional system (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

     This ~README.md~ has been automatically generated from my configuration
     and its contents below could also be read in blog format, with /colour/, or as colourful PDF,
     [[https://alhassy.github.io/init/][here]]. Enjoy :smile:

      #+TOC: headlines 2
      #+INCLUDE: init.org
    "))
    (org-mode)
    (org-md-export-to-markdown)
    ;; Coloured html does not work in Github, afaik.
    ;; (org-html-export-to-html)
    ;; (shell-command "mv README.html README.md")
)
#+END_SRC

** List recently accessed files upon startup
:PROPERTIES:
:CUSTOM_ID: List-recently-accessed-files-upon-startup
:END:

#+BEGIN_SRC emacs-lisp :tangle no
(recentf-mode 1)                   ;; Part of Emacs
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

(split-window-below)			  ;; C-x 3
(other-window 1)                              ;; C-x 0
(recentf-open-files)
#+END_SRC

** Homemade attempt before learning about shell-pop
:PROPERTIES:
:CUSTOM_ID: Homemade-attempt-before-learning-about-shell-pop
:END:

#+begin_src emacs-lisp :tangle no
(cl-defun toggle-terminal (&optional (name "*eshell-pop-up*"))
   "Pop up a terminal, do some work, then close it using the same command.

   The toggle behaviour is tied into the existence of the pop-up buffer.
   If the buffer exists, kill it; else create it.
   "
   (interactive)
   (cond
     ;; when the terminal buffer is alive, kill it.
     ((get-buffer name)  (kill-buffer name)
                         (ignore-errors (delete-window)))
     ;; otherwise, set value to refer to a new eshell buffer.
     (t                  (split-window-right)
                         (other-window 1)
                         (eshell)
                         (rename-buffer name))))

(global-set-key "\C-t" 'toggle-terminal)
#+end_src
** Exporting Tables to CSV :Documentation:
:PROPERTIES:
:CUSTOM_ID: Exporting-Tables-to-CSV
:END:

Org-mode can export tables as TAB or comma delimited formats. I set the default format to CSV with:

(setq org-table-export-default-format "orgtbl-to-csv")
Exporting to CSV format is the only one I use and this provides the default so I can just hit RETURN when prompted for the format.

To export the following table I put the cursor inside the table and hit M-x org-table-export which prompts for a filename and the format which defaults to orgtbl-to-csv from the setting above.
** Interpret the Haskell source blocks in a file :Cool_but_have_not_used_this_in_some_time:
:PROPERTIES:
:CUSTOM_ID: Interpret-the-Haskell-source-blocks-in-a-file
:END:

#+BEGIN_SRC emacs-lisp
(defvar *current-module* "NoModuleNameSpecified"
  "The name of the module, file, that source blocks are
   currently being tangled to.

   This technique is insipired by ‚ÄúInteractive Way to C‚Äù;
   see https://alhassy.github.io/InteractiveWayToC/.
  ")

(defun current-module ()
  "Returns the current module under focus."
  *current-module*)

(defun set-module (name)
   "Set the name of the module currently under focus.

    Usage: When a module is declared, i.e., a new file has begun,
    then that source blocks header should be ‚Äú:tangle (set-module ‚Äùname-here‚Äù)‚Äù.
    succeeding source blocks now inherit this name and so are tangled
    to the same module file. How? By placing the following line at the top
    of your Org file: ‚Äú‚Äò#+PROPERTY: header-args :tangle (current-module))‚Äô.

    This technique structures ‚ÄúInteractive Way to C‚Äù.
   "
   (setq *current-module* name)
)

(cl-defun my/org-run-haskell (&optional target (filename (buffer-name)))
  "Tangle Haskell source blocks of given ‚Äòfilename‚Äô, or otherwise current buffer,
   and load the resulting ‚Äòtarget‚Äô file into a ghci buffer.

   If no name is provided for the ‚Äòtarget‚Äô file that is generated from the
   tangeling process, it is assumed to be the buffer's name with a ‚Äòhs‚Äô extension.

   Note that this only loads the blocks tangled to ‚Äòtarget‚Äô.

   For example, file ‚ÄòX.org‚Äô may have haskell blocks that tangle to files
   ‚ÄòX.hs‚Äô, ‚ÄòY.hs‚Äô and ‚ÄòZ.hs‚Äô. If no target name is supplied, we tangle all blocks
   but only load ‚ÄòX.hs‚Äô into the ghci buffer. A helpful technique to load the
   last, bottom most, defined haskell module, is to have the module declaration's
   source block be ‚Äò:tangle (setq CODE ‚ÄúY.hs‚Äù)‚Äô, for example; then the following
   code blocks will inherit this location provided our Org file has at the top
   ‚Äò#+PROPERTY: header-args :tangle (current-module))‚Äô.
   Finally, our ‚Äòcompile-command‚Äô suffices to be ‚Äò(my/org-run-haskell CODE)‚Äô.
   ‚îÄ
   This technique structures ‚ÄúInteractive Way to C‚Äù.
  "
   (let* ((it  (if target target (concat (file-name-sans-extension filename) ".hs")))
         (buf (concat "*GHCI* " it)))

     (-let [kill-buffer-query-functions nil] (ignore-errors (kill-buffer buf)))
     (org-babel-tangle it "haskell")
     (async-shell-command (concat "ghci " it) buf)
     (switch-to-buffer-other-window buf)
     (end-of-buffer)
   )
)

;; Set this as the ‚Äòcompile-command‚Äô in ‚ÄòLocal Variables‚Äô, for example.
#+END_SRC
** Makeshift HTML Folded Drawers: Folding-mode & Org-Macros
:PROPERTIES:
:CUSTOM_ID: Makeshift-HTML-Folded-Drawers-Folding-mode-Org-Macros
:END:

My =my/prettify-alist= has the following:

                    ("{{{fold("        . ?‚Ü≥)
                    (")}}}"            . ?‚Ü≤)
                    ("{{{end-fold}}}"  . ?‚Ü∫)

The ~‚Ü≥Title Here‚Ü≤ Contents ‚Ü∫~ combination is for my makeshift HTML code
folding macro ---word-wrapped for readability.
#+BEGIN_SRC org :tangle no
,#+MACRO: end-fold  #+HTML: </details>
,#+MACRO: fold      #+HTML: <details class="code-details"> <summary> <strong>
                              <font face="Courier" size="3" color="green"> $1
                              </font> </strong> </summary>
#+END_SRC

:Example:
# The (org-mode-restart) invocation actually enables the source block prettifications.

# Empty macros to make the example go through.
#
#+MACRO: end-fold
#+MACRO: fold

{{{fold(nice)}}}

hello

{{{end-fold}}}

:End:

Let's have this fold-away in the source buffer as well by using [[https://www.emacswiki.org/emacs/FoldingMode][folding-mode]];
with show/hide with ~C-<tab>~ key.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package folding
 :init
 (folding-add-to-marks-list 'org-mode               "{{{fold(" "{{{end-fold}}}" nil t)
 (setq folding-top-mark "{{{fold(")
 (setq folding-bottom-mark "{{{end-fold}}}")
 :config
  (define-key folding-mode-map (kbd "C-<tab>")       #'folding-toggle-show-hide)
  (add-hook 'org-mode-hook #'folding-mode))
#+END_SRC
#  (remove-hook 'org-mode-hook #'folding-mode)

** Default Compilation Commands ---Local Variables
:PROPERTIES:
:CUSTOM_ID: Default-Compilation-Commands-Local-Variables
:END:


Emacs' [[https://www.emacswiki.org/emacs/CompileCommand][compile]] command allows us to execute arbitrary Elisp
when ~M-x recompile~ is invoked. One of my habits is to append
most of my files with the following:
#+begin_src org :tangle no
# Local Variables:
# eval: (message "Load file specific stuffs here")
# compile-command: (async-shell-command (concat "open " (org-latex-export-to-pdf)))
# End:
#+end_src

Since nearly every file I work with is ‚îÄor can be coerced into being‚îÄ in org mode,
I usually have a section ~* footer~ that contains something like the above.

Let's remove repeated matter.
#+begin_src emacs-lisp :tangle no
;; Silently save before compiling.
(setq compilation-ask-about-save nil)

;; Silently kill previous compilation process before starting a new one.
(setq compilation-always-kill t)

;; Scroll as compilation output is procuded in *Compilation* buffer; e.g., pdflatex
;; Use 'first-error to stop scrolling on the first error encountered; otherwise ‚Äòt‚Äô.
(setq compilation-scroll-output 'first-error)

;; Don't stop on informaiton messages or warnings; only on errors.
(setq compilation-skip-threshold 2)
#+end_src

#+BEGIN_SRC emacs-lisp :tangle no
;; My global compile command
(setq compile-command
  '(async-shell-command (concat "open " (org-latex-export-to-pdf))))

;; Bind ‚Äòrecompile‚Äô to ‚ÄòC-c C-m‚Äô ‚îÄ‚Äúm‚Äù for ‚Äúm‚Äùake
(global-set-key (kbd "C-c C-m") 'recompile)

;; Also a helpful quick f-key.
(global-set-key (kbd "<f7>") 'recompile)
#+END_SRC
** Keeping my system up to date
:PROPERTIES:
:CUSTOM_ID: Keeping-my-system-up-to-date
:END:

Let's ensure our system is always up to date.
#+BEGIN_SRC emacs-lisp
(defun my/stay-up-to-date ()
  "Ensure that OS and Emacs package listings are up to date.

   Takes ~5 seconds when everything is up to date."
  (async-shell-command "brew update && brew upgrade")
  (other-window 1)
  (rename-buffer "Keeping-system-up-to-date")

  (package-refresh-contents 'please-do-so-in-the-background)
  (message "Updated Emacs package manager.")
  (other-window 1))

(add-hook 'after-init-hook 'my/stay-up-to-date)

;; For now, doing this since I'm also calling my/stay-up-to-date with
;; after-init-hook which hides the startup message.
(add-hook 'after-init-hook 'display-startup-echo-area-message)
#+END_SRC

:MacOS:
After an OS upgrade, the XCode Command Line Utilities
may need to be reset.

In a terminal execute: xcode-select --install

May need to actually reboot the system as well.
:End:
* COMMENT Improvements                                             :noexport:
:PROPERTIES:
:CUSTOM_ID: Improvements
:END:

** Learn about TRAMP & Edit as Root
:PROPERTIES:
:CUSTOM_ID: Learn-about-TRAMP-Edit-as-Root
:END:

From an [[http://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html][emacs-fu blog post]].
#+BEGIN_SRC emacs-lisp
(defun find-file-as-root ()
  "Like `ido-find-file, but automatically edit the file with
root-privileges (using tramp/sudo), if the file is not writable
by user."
  (interactive)
  (let ((file (ido-read-file-name "Edit as root: ")))
    (unless (file-writable-p file)
      (setq file (concat "/sudo:root@localhost:" file)))
    (find-file file)))

(bind-key "C-x F" 'find-file-as-root)
#+END_SRC

Incidentally, TRAMP allows us to do the same thing.
** Easy tasks
:PROPERTIES:
:CUSTOM_ID: Easy-tasks
:END:

# TODO: MA: ‚á® Add unit tests for the init file.

# ox-pandoc is "another exporter that translates Org-mode file to various other formats via Pandoc".
# (shell-command "brew install pandoc")
# (use-package ox-pandoc)

;; Omit empty lines between headings in the collapsed view
(setq org-cycle-separator-lines 0)

#+BEGIN_SRC emacs-lisp :results replace :tangle yes
(defun show-me ()
  "Evaluate a Lisp expression and insert its value
   as a comment at the end of the line.

   Useful for documenting values or checking values.
  "
  (interactive)
  (-let [it
         (thread-last (thing-at-point 'line)
           read-from-string
           car
           eval
           (format " ;; ‚áí %s"))]
    (end-of-line)
    (insert it)))
#+END_SRC

+ [ ] Consider moving emots, such as \csi and \whyme, into yassnipets.
** Smartparens
:PROPERTIES:
:CUSTOM_ID: Smartparens
:END:

:PROPERTIES:

:END:
#+BEGIN_SRC emacs-lisp :tangle no
(use-package smartparens
  :init
  (smartparens-global-mode 1)
  (show-smartparens-global-mode +1)

  :bind (

         ("M-f" . sp-forward-sexp)  ;; Move forward one  expression.
         ("M-b" . sp-backward-sexp) ;; Move backward one expression.

         ;; Going to the start & end of current expr in pair-able character.
         ("M-a" . sp-beginning-of-sexp)
         ("M-e" . sp-end-of-sexp)

         ;; Going forwards deep down & up current expr; treating it as a tree.
         ("M-d" . sp-down-sexp)
         ("M-u" . sp-up-sexp)
         ;; Acending & descending backwards; i.e., leftwards.
         ("M-n" . sp-backward-down-sexp)
         ("M-p" . sp-backward-up-sexp)

         ;; Unwrapping: Removing pair-able characters.
         ("M-w" . sp-unwrap-sexp)
         ("M-m" . sp-backward-unwrap-sexp)

         ;; ‚ÄúSlurping‚Äù: Move closing character forward/backward to include next sexp.
         ;; ‚ÄúBarfing‚Äù: Contract a sexp, or string, by pushing a its last/first item out.
         ;; See below for examples.
         ("M-)" . sp-forward-slurp-sexp)
         ("M-(" . sp-backward-slurp-sexp)
         ("M-]" . sp-forward-barf-sexp)
         ("M-[" . sp-backward-barf-sexp)

         ;; Transpose two bracketed terms; e.g., a b c ‚ü™Here‚ü´ ‚ü∂ a c b ‚ü™Here‚ü´
         ;; Transpose backwards by being on the token;
         ;; transpose forwards by being after the token.
         ("M-t" . sp-transpose-sexp)

         )

  :config
  ;; Enable smartparens everywhere
  (use-package smartparens-config)

  (setq
   ;; smartparens-strict-mode t
   ;; sp-autoinsert-if-followed-by-word t
   ;; sp-autoskip-closing-pair 'always
   sp-hybrid-kill-entire-symbol nil)

  ;; In Elisp & org modes, do not ‚Äòclose‚Äô a back-tick or single quote!
  (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p))
  (sp-local-pair 'emacs-lisp-mode "'" nil :when '(sp-in-string-p))
  (sp-local-pair 'org-mode "`" nil :when '(sp-in-string-p))
  (sp-local-pair 'org-mode "'" nil :when '(sp-in-string-p))
  )
#+END_SRC

*Wrapping*
To enclose a token with a pair-able character, at the start of the expression
press ~C-ESCAPE-SPACE~, select the region, followed by a pair-able character such as ~[, {, ", ', *,~ etc.
To wrap a single token forwards, use ~C-M-SPACE~.

Examples of slurping & barfing --i.e., sexp inclusion and contraction.
#+begin_example
a [x y z] b  ‚ü∂‚ÄúM-) inside [‚ãØ]‚Äù‚ü∂  a [x y z b]
a [x y z] b  ‚ü∂‚ÄúM-) inside [‚ãØ]‚Äù‚ü∂  [a x y z] b
[a x y z b]  ‚ü∂‚ÄúM-] inside [‚ãØ]‚Äù‚ü∂  a [x y z b]
[a x y z b]  ‚ü∂‚ÄúM-] inside [‚ãØ]‚Äù‚ü∂  [a x y z] b
#+end_example
** Macros
:PROPERTIES:
:CUSTOM_ID: Macros
:END:

Here's a neat macro I made, but I /may/ avoid using it in the init in order to
avoid scaring anyone. I may use it in my personal stuff.

#+BEGIN_SRC emacs-lisp
(defmacro Œª (&rest body)
  "Implementing Z-notation style, interactive, lambdas; ideally for inline use:

   ‚ÄúŒª Œ± Œ≤ ‚Ä¶ œâ ‚Ä¢ body‚Äù  becomes an interactive function with arguments Œ±, ‚Ä¶, œâ.

   The args list may be empty, in which case the separator ‚Äú‚Ä¢‚Äù may be omitted
   entirely, if desired.
  "

  (let* ((parts (-split-on '‚Ä¢ body)) args rest)

    (if (<= 2 (length parts))
        (progn (setq args (car parts)) (setq rest (cadr parts)))
         ;; Otherwise, only one part was found ---no arguments were provided.
         (setq args nil) (setq rest (car parts)))

   `(lambda ,args (interactive) ,@rest)
  ))

;; Some tests

(setq f (Œª x y ‚Ä¢ (+ x y)))   ;; ‚áí (lambda (x y) (interactive) (+ x y))
(setq g (Œª ‚Ä¢ 'neato "woah")) ;; ‚áí (lambda (x y) (interactive) 'neato "woah")
(setq h (Œª "bye" 'bye))      ;; ‚áí (lambda (x y) (interactive) "bye" 'bye)
(funcall f 1 2)
(funcall g)
(funcall h)

;; intended use case

(local-set-key (kbd "C-x x x") (lambda () (interactive) (message-box "Test!")))
(local-set-key (kbd "C-x x x") (Œª (message-box "Terse!")))
#+END_SRC

** Summary of Utilities Provided
:PROPERTIES:
:CUSTOM_ID: Summary-of-Utilities-Provided
:END:

| _Command_                                | _Action_                                                |
| ~<f5>~                                   | revert buffer                                           |
| ~C-‚à£~                                    | toggle 2 windows from horizontal to vertical view       |
| ~M-x create-scratch-buffer~              | --self evident--                                        |
| ~M-$~                                    | check spelling of word at point                         |
| ~M-#~                                    | thesaurus look-up word at point                         |
| ~C-+/-~                                  | increase/decrease text size                             |
| ~(org-keywords)~                         | get ~#+Property: Value~ pairs from an org file          |
| ~(org-keyword property)~                 | get the ~value~ of a given org ~#+property~             |

Since I'm using ~use-package~, I can invoke ~M-x describe-personal-keybindings~ to see what key bindings I've defined.
Since not all my bindings are via ~use-package~, it does not yet cover all of my bindings.

We could run ~C-h b~ to see /all/ our bindings
---or ~M-x describe-personal-bindings~ to see only those
set throughout our init file.
#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :defer t
  :bind ("C-h b" . helm-descbinds))
#+END_SRC

Finally, we can observe which features are active in our current Emacs with,
#+begin_src emacs-lisp :tangle no
(message "Features: %s" features)
#+end_src

# List of installed packages: (mapcar 'car package-alist)
** Stuff I don't really use, but may want to look at later
:PROPERTIES:
:CUSTOM_ID: Stuff-I-don't-really-use-but-may-want-to-look-at-later
:END:
*** hooks and things for literate agda with org-agda
:PROPERTIES:
:CUSTOM_ID: hooks-and-things-for-literate-agda-with-org-agda
:END:

#+BEGIN_SRC emacs-lisp  :tangle no
;; not needed
(defun lagda-extension-whatdo ()
       "What to do when encountering a .lagda file.
       To be added to auto-mode-list."
       (agda2-mode)
       (org-babel-load-file "~/Dropbox/lagda-with-org.org")
       (message "Musa's special Agda settings enabled."))

(add-to-list 'auto-mode-alist '("\\.lagda\\'" . (lambda () (lagda-extension-whatdo))))
; (add-to-list 'auto-mode-alist '("\\.lagda\\'" . 'lagda-extension-whatdo))

(defun my-add-to-multiple-hooks (function hooks) (mapc (lambda (hook) (add-hook hook function)) hooks))
(defun my-common-hook () (fci-mode) (orgstruct-mode) )
(my-add-to-multiple-hooks 'my-common-hook '(text-mode-hook agda2-mode-hook))
#+END_SRC
*** floating toc material                            :no_longer_using_this:
:PROPERTIES:
:CUSTOM_ID: floating-toc-material
:END:

Add the following to a web-page if you'd like it to have a floating table of contents.
+ Perhaps consider making this a default for all org-files?
 + The ~floatingTocStyle.css~ lives in my Dropbox; bring it here to be self-contained.

#+BEGIN_SRC org :tangle no
#+HTML: <small><center>
( Please remember that you can always access a section using the floating table of contents at the upper-right corner of your screen. )
#+HTML: </center></small>
#+HTML_HEAD: <link rel=\"stylesheet\" type=\"text/css\" href=\"floatingTocStyle.css\" />
#+HTML: <div id=\"toc\"> &nbsp;Table of Contents&nbsp; <small> <div id=\"full\">
#+TOC: headlines 2
#+HTML: </div> </small> </div>
#+END_SRC

*** org-html-postamble-format
:PROPERTIES:
:CUSTOM_ID: org-html-postamble-format
:END:

 Look at the super short doc to know how to manipulate this variable.
 (describe-symbol 'org-html-postamble-format)

 #+BEGIN_SRC emacs-lisp :tangle no
(defun make-html-link (url identifier)
  (concat "<a href=\"" url "\">" identifier "</a>"))

(setq org-html-postamble-format
  (let* ((nomorg (buffer-name))
         (nom    (file-name-sans-extension nomorg))
         (src    (make-html-link nomorg "Org Source"))
         (nompdf (concat nom ".pdf"))
         (pdf    (make-html-link nompdf "View me as a PDF"))
        )
`(("en" ,(concat "<center> Last modified on %C ; " pdf " ; " src " ; Contact me at %e </center>"))))
)
 #+END_SRC

*** Programming Language Support                                     :TODO:
:PROPERTIES:
:CUSTOM_ID: Programming-Language-Support
:END:

***** Haskell :tangle no
:PROPERTIES:
:CUSTOM_ID: Haskell-tangle-no
:END:

#+BEGIN_SRC emacs-lisp
;; now C-c C-l interpets the current buffer; will ofcourse need to switch to the ghci buffer
 (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
#+END_SRC

***** Lambda Prolog
:PROPERTIES:
:CUSTOM_ID: Lambda-Prolog
:END:

#+BEGIN_SRC emacs-lisp  :tangle no
(load "/usr/local/packages/teyjus/emacs/teyjus.el")
(setq tjcc "/usr/local/packages/teyjus/tjcc")
#+END_SRC
***** Coq Support
:PROPERTIES:
:CUSTOM_ID: Coq-Support
:END:

Sometimes I use Coq,
#+begin_src emacs-lisp
;; Open .v files with Proof General's Coq mode
;; (load "~/.emacs.d/lisp/PG/generic/proof-site")
#+end_src

*** Column Marker
:PROPERTIES:
:CUSTOM_ID: Column-Marker
:END:

(  Maybe a hook would be better? Much better...? )

Have a thin line to the right to ensure I don't write ‚Äúoff the page‚Äù.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package fill-column-indicator)
(define-globalized-minor-mode my-fci-global-mode fci-mode
  (lambda () (set-fill-column 90) (fci-mode 't)
))
(my-fci-global-mode 1)
#+END_SRC

There are issues with making things global.
In this case, exporting to html produces curious symbols
thereby prompting ~my-org-html-export-to-html~ below to
take care of this.

*** theme magic
:PROPERTIES:
:CUSTOM_ID: theme-magic
:END:

[[https://github.com/jcaw/theme-magic][Theme-magic]] looks nice, in theory, but I've not found it to be useful, for me.
#+BEGIN_SRC emacs-lisp :tangle no
;; Automatically propagate Emacs theme changes to OS
(use-package theme-magic)
;; (shell-command "pip3 install pywal")
(theme-magic-export-theme-mode)
#+END_SRC

** Referencing Text From Code Blocks ---Attaching prose as doc strings :noexport:ignore:
:PROPERTIES:
:CUSTOM_ID: Referencing-Text-From-Code-Blocks-Attaching-prose-as-doc-strings
:END:

Sources:
+ John Kitchin https://lists.gnu.org/archive/html/emacs-orgmode/2018-05/msg00350.html
+ https://kdr2.com/tech/emacs/1805-approach-org-ref-code-to-text.html

I want both ~get-named-text~ and ~docs~ ^_^

#+NAME: get-named-text
#+BEGIN_SRC emacs-lisp :var name = "" :var sep = "\n\n" :results replace :tangle no
(my/get-named-text name sep)
#+END_SRC

#+NAME: docs
#+BEGIN_SRC emacs-lisp :var name = "" :var sep = "\n\n" :results replace :tangle no
(my/get-named-text name sep)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my/get-named-text (name sep)

  (let ((el (org-element-map (org-element-parse-buffer) org-element-all-elements
              (lambda (el) (when (string= (org-element-property :name el) name)
                             el)))))
    (concat "\n"
            (s-join sep
                    (cl-loop for e in el
                          for s = (buffer-substring (org-element-property :contents-begin e)
                                                    (org-element-property :contents-end e))
                          collect
                          (s-trim (replace-regexp-in-string "\\\"" "\\\\\"" s)))))))
#+END_SRC

#+NAME: OLD-get-named-text
#+BEGIN_SRC emacs-lisp :var name="" :results replace :tangle no
(let ((el (org-element-map (org-element-parse-buffer) org-element-all-elements
            (lambda (el)
              (when (string= (org-element-property :name el) name)
                el))
            nil t)))
  (let ((s (buffer-substring (org-element-property :contents-begin el)
                             (org-element-property :contents-end el))))
    (concat "\n" (s-trim (replace-regexp-in-string "\\\"" "\\\\\"" s)))))
#+END_SRC

Let's make ~get-named-text~ a globally defined and callable code block:
#+BEGIN_SRC emacs-lisp
(org-babel-lob-ingest (expand-file-name "~/.emacs.d/init.org"))
#+END_SRC


***  COMMENT Example
:PROPERTIES:
:CUSTOM_ID: Example
:END:
:PROPERTIES:

:END:
:PROPERTIES:

:END:
For example:
#+NAME: ADD
#+BEGIN_SRC emacs-lisp -n -r :noweb yes :tangle test.el
(defun add (x y)
  "One line description of adding X and Y.
<<get-named-text('DOC-OF-ADD)>> ;; code to code
<<get-named-text('add-options)>>"
  (+ x y)
  )
#+END_SRC

#+NAME: DOC-OF-ADD
We use the XXX function add to calculate the sum of two numbers.

#+NAME: add-options
- one
- two
- three
- and of course "optional things"

+ There is a reason we only support two args
** Tangeling to multiple files
:PROPERTIES:
:CUSTOM_ID: Tangeling-to-multiple-files
:END:

From https://emacs.stackexchange.com/questions/39032/tangle-the-same-src-block-to-different-files,

#+begin_src emacs-lisp :tangle no
(defun org-babel-tangle-collect-blocks-handle-tangle-list (&optional language tangle-file)
  "Can be used as :override advice for `org-babel-tangle-collect-blocks'.
Handles lists of :tangle files."
  (let ((counter 0) last-heading-pos blocks)
    (org-babel-map-src-blocks (buffer-file-name)
      (let ((current-heading-pos
         (org-with-wide-buffer
          (org-with-limited-levels (outline-previous-heading)))))
    (if (eq last-heading-pos current-heading-pos) (cl-incf counter)
      (setq counter 1)
      (setq last-heading-pos current-heading-pos)))
      (unless (org-in-commented-heading-p)
    (let* ((info (org-babel-get-src-block-info)) ;; MA: not ‚Äúlight‚Äù!
                                          ;; (describe-symbol 'org-babel-get-src-block-info)
           (src-lang (nth 0 info))
           (src-tfiles (cdr (assq :tangle (nth 2 info))))) ; Tobias: accept list for :tangle
      (unless (consp src-tfiles) ; Tobias: unify handling of strings and lists for :tangle
        (setq src-tfiles (list src-tfiles))) ; Tobias: unify handling
      (dolist (src-tfile src-tfiles) ; Tobias: iterate over list
        (unless (or (string= src-tfile "no")
            (and tangle-file (not (equal tangle-file src-tfile)))
            (and language (not (string= language src-lang))))
          ;; Add the spec for this block to blocks under its
          ;; language.
          (let ((by-lang (assoc src-lang blocks))
            (block (org-babel-tangle-single-block counter)))
        (setcdr (assoc :tangle (nth 4 block)) src-tfile) ; Tobias:
        (if by-lang (setcdr by-lang (cons block (cdr by-lang)))
          (push (cons src-lang (list block)) blocks)))))))) ; Tobias: just ()
    ;; Ensure blocks are in the correct order.
    (mapcar (lambda (b) (cons (car b) (nreverse (cdr b)))) blocks)))

(defun org-babel-tangle-single-block-handle-tangle-list (oldfun block-counter &optional only-this-block)
  "Can be used as :around advice for `org-babel-tangle-single-block'.
If the :tangle header arg is a list of files. Handle all files"
  (let* ((info (org-babel-get-src-block-info))
     (params (nth 2 info))
     (tfiles (cdr (assoc :tangle params))))
    (if (null (and only-this-block (consp tfiles)))
    (funcall oldfun block-counter only-this-block)
      (cl-assert (listp tfiles) nil
         ":tangle only allows a tangle file name or a list of tangle file names")
      (let ((ret (mapcar
          (lambda (tfile)
            (let (old-get-info)
              (cl-letf* (((symbol-function 'old-get-info) (symbol-function 'org-babel-get-src-block-info))
                 ((symbol-function 'org-babel-get-src-block-info)
                  `(lambda (&rest get-info-args)
                     (let* ((info (apply 'old-get-info get-info-args))
                        (params (nth 2 info))
                        (tfile-cons (assoc :tangle params)))
                       (setcdr tfile-cons ,tfile)
                       info))))
            (funcall oldfun block-counter only-this-block))))
          tfiles)))
    (if only-this-block
        (list (cons (cl-caaar ret) (mapcar #'cadar ret)))
      ret)))))

(advice-add 'org-babel-tangle-collect-blocks :override #'org-babel-tangle-collect-blocks-handle-tangle-list)
(advice-add 'org-babel-tangle-single-block :around #'org-babel-tangle-single-block-handle-tangle-list)
#+end_src
** Parallel
:PROPERTIES:
:CUSTOM_ID: Parallel
:END:

#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'org-structure-template-alist '("p" . "parallel latex"))
#+END_SRC
